#! usr/bin/env python

import numpy as np
from datetime import datetime
import numpy.linalg as linalg
import math
import sys


class EventInput:
    def __init__(self):
        self.totalEnergy = 0.0
        self.totalP = np.array([0.0, 0.0, 0.0])
        self.antiMuP = np.array([0.0, 0.0, 0.0])
        self.muP = np.array([0.0, 0.0, 0.0])
        self.bAntiBP = [np.array([0.0, 0.0, 0.0]), np.array([0.0, 0.0, 0.0])]

class NuSolver(object):

    maxSolnsPerFunc = 2
    grazeTolerance = 10
    crossTolerance = 0.1

    def __init__(self, eventInput):
        self.mWm = 80.4
        self.mWp = 80.4

        self.eInit = eventInput.totalEnergy
        self.pInit = eventInput.totalP
        self.p1Vec = eventInput.antiMuP
        self.p3Vec = eventInput.bAntiBP[0]
        self.p4Vec = eventInput.muP
        self.p6Vec = eventInput.bAntiBP[1]
        self.p1Norm = linalg.norm(self.p1Vec)
        self.p4Norm = linalg.norm(self.p4Vec)

        self.enRem = self.eInit - (self.p1Norm + self.p4Norm + np.sqrt(np.vdot(self.p3Vec, self.p3Vec)) + np.sqrt(np.vdot(self.p6Vec, self.p6Vec)) )
        self.pRemVec = self.pInit - (self.p1Vec + self.p3Vec + self.p4Vec + self.p6Vec)

        self.totalMaxP2z = np.sqrt(self.enRem**2 - self.pRemVec[0]**2 - self.pRemVec[1]**2)
        self.totalMinP2z = -1*self.totalMaxP2z

        self.probCalc = None

        self.resultsListOne = []
        self.resultsListTwo = []

        self.allResultsList = []

        self.funcInitialized = [False, False]
        self.funcDone = [False, False]
        self.newFunc = False
        self.cheat = 0.0
        self.ranges = []
        self.fullRange = []
        self.ranges = []

        self.verbose = False

    def talk(self, strng):
        if self.verbose:
            print strng

    def sameSign(self, num1, num2):
        real1 = 0
        real2 = 0
        imag1 = 0
        imag2 = 0
        if isinstance(num1, complex):
            real1 = num1.real
            imag1 = num1.imag
            if imag1==-0: imag1=0
        else:
            real1 = num1
            imag1 = 0
        if isinstance(num2, complex):
            real2 = num2.real
            imag2 = num2.imag
            if imag2==-0: imag2=0
        else:
            real2 = num2
            imag2 = 0
        return np.sign(real1)==np.sign(real2) and np.sign(imag1)==np.sign(imag2)

    def p5VecFromP2Vec(self, p2Vec):
        return np.array([self.pRemVec[0] - p2Vec[0], self.pRemVec[1] - p2Vec[1], self.pRemVec[2] - p2Vec[2]])

    # Methods used in evaluating the function we are solving

    def _underSqrt(self, p2z, p4x, p4y, p4z, premx, premy, premz, mwm2, enRem, p4Norm, p1Norm):
        ans = ((4*enRem**4*mwm2*p4x**3 + 4*enRem**4*mwm2*p4x*p4y**2 - 8*enRem**4*p2z*p4x**3*p4z - 8*enRem**4*p2z*p4x*p4y**2*p4z - 4*enRem**5*p4x**3*p4Norm - 4*enRem**5*p4x*p4y**2*p4Norm - 4*enRem**4*p4x**4*premx - 4*enRem**4*p4x**2*p4y**2*premx - 4*enRem**4*p4x**2*p4z**2*premx + 4*enRem**4*p4y**2*p4z**2*premx + 4*enRem**3*mwm2*p4x**2*p4Norm*premx - 4*enRem**3*mwm2*p4y**2*p4Norm*premx - 8*enRem**3*p2z*p4x**2*p4z*p4Norm*premx + 8*enRem**3*p2z*p4y**2*p4z*p4Norm*premx - 4*enRem**2*mwm2*p4x**3*premx**2 - 8*enRem**2*mwm2*p4x*p4y**2*premx**2 + 8*enRem**2*p2z*p4x**3*p4z*premx**2 + 16*enRem**2*p2z*p4x*p4y**2*p4z*premx**2 - 4*enRem**2*mwm2*p4x*p4z**2*premx**2 + 8*enRem**2*p2z*p4x*p4z**3*premx**2 + 8*enRem**3*p4x**3*p4Norm*premx**2 + 4*enRem**3*p4x*p4y**2*p4Norm*premx**2 + 4*enRem**3*p4x*p4z**2*p4Norm*premx**2 + 8*enRem**2*p4x**4*premx**3 + 4*enRem**2*p4x**2*p4y**2*premx**3 + 12*enRem**2*p4x**2*p4z**2*premx**3 - 4*enRem**2*p4y**2*p4z**2*premx**3 + 4*enRem**2*p4z**4*premx**3 - 4*enRem*mwm2*p4x**2*p4Norm*premx**3 + 8*enRem*p2z*p4x**2*p4z*p4Norm*premx**3 - 4*enRem*mwm2*p4z**2*p4Norm*premx**3 + 8*enRem*p2z*p4z**3*p4Norm*premx**3 - 4*enRem*p4x**3*p4Norm*premx**4 - 4*enRem*p4x*p4z**2*p4Norm*premx**4 - 4*p4x**4*premx**5 - 8*p4x**2*p4z**2*premx**5 - 4*p4z**4*premx**5 - 4*enRem**4*p4x**3*p4y*premy - 4*enRem**4*p4x*p4y**3*premy - 8*enRem**4*p4x*p4y*p4z**2*premy + 8*enRem**3*mwm2*p4x*p4y*p4Norm*premy - 16*enRem**3*p2z*p4x*p4y*p4z*p4Norm*premy + 4*enRem**2*mwm2*p4x**2*p4y*premx*premy - 4*enRem**2*mwm2*p4y**3*premx*premy - 8*enRem**2*p2z*p4x**2*p4y*p4z*premx*premy + 8*enRem**2*p2z*p4y**3*p4z*premx*premy - 8*enRem**2*mwm2*p4y*p4z**2*premx*premy + 16*enRem**2*p2z*p4y*p4z**3*premx*premy + 8*enRem**3*p4x**2*p4y*p4Norm*premx*premy + 8*enRem**3*p4y*p4z**2*p4Norm*premx*premy + 16*enRem**2*p4x**3*p4y*premx**2*premy + 4*enRem**2*p4x*p4y**3*premx**2*premy + 20*enRem**2*p4x*p4y*p4z**2*premx**2*premy + 4*mwm2*p4x**2*p4y*premx**3*premy - 8*p2z*p4x**2*p4y*p4z*premx**3*premy + 4*mwm2*p4y*p4z**2*premx**3*premy - 8*p2z*p4y*p4z**3*premx**3*premy - 8*enRem*p4x**2*p4y*p4Norm*premx**3*premy - 8*enRem*p4y*p4z**2*p4Norm*premx**3*premy - 12*p4x**3*p4y*premx**4*premy - 12*p4x*p4y*p4z**2*premx**4*premy - 4*enRem**2*mwm2*p4x**3*premy**2 + 8*enRem**2*p2z*p4x**3*p4z*premy**2 + 4*enRem**2*mwm2*p4x*p4z**2*premy**2 - 8*enRem**2*p2z*p4x*p4z**3*premy**2 + 4*enRem**3*p4x**3*p4Norm*premy**2 + 8*enRem**3*p4x*p4y**2*p4Norm*premy**2 - 4*enRem**3*p4x*p4z**2*p4Norm*premy**2 + 4*enRem**2*p4x**4*premx*premy**2 + 16*enRem**2*p4x**2*p4y**2*premx*premy**2 + 8*enRem**2*p4x**2*p4z**2*premx*premy**2 + 4*enRem**2*p4z**4*premx*premy**2 - 8*enRem*mwm2*p4x**2*p4Norm*premx*premy**2 + 4*enRem*mwm2*p4y**2*p4Norm*premx*premy**2 + 16*enRem*p2z*p4x**2*p4z*p4Norm*premx*premy**2 - 8*enRem*p2z*p4y**2*p4z*p4Norm*premx*premy**2 - 4*enRem*mwm2*p4z**2*p4Norm*premx*premy**2 + 8*enRem*p2z*p4z**3*p4Norm*premx*premy**2 - 4*mwm2*p4x**3*premx**2*premy**2 + 8*mwm2*p4x*p4y**2*premx**2*premy**2 + 8*p2z*p4x**3*p4z*premx**2*premy**2 - 16*p2z*p4x*p4y**2*p4z*premx**2*premy**2 - 4*mwm2*p4x*p4z**2*premx**2*premy**2 + 8*p2z*p4x*p4z**3*premx**2*premy**2 - 4*enRem*p4x**3*p4Norm*premx**2*premy**2 - 4*enRem*p4x*p4y**2*p4Norm*premx**2*premy**2 - 4*p4x**4*premx**3*premy**2 - 12*p4x**2*p4y**2*premx**3*premy**2 - 12*p4x**2*p4z**2*premx**3*premy**2 - 4*p4y**2*p4z**2*premx**3*premy**2 - 8*p4z**4*premx**3*premy**2 + 4*enRem**2*p4x**3*p4y*premy**3 + 8*enRem**2*p4x*p4y**3*premy**3 + 12*enRem**2*p4x*p4y*p4z**2*premy**3 - 8*enRem*mwm2*p4x*p4y*p4Norm*premy**3 + 16*enRem*p2z*p4x*p4y*p4z*p4Norm*premy**3 - 8*mwm2*p4x**2*p4y*premx*premy**3 + 4*mwm2*p4y**3*premx*premy**3 + 16*p2z*p4x**2*p4y*p4z*premx*premy**3 - 8*p2z*p4y**3*p4z*premx*premy**3 + 4*mwm2*p4y*p4z**2*premx*premy**3 - 8*p2z*p4y*p4z**3*premx*premy**3 - 8*enRem*p4x**2*p4y*p4Norm*premx*premy**3 - 8*enRem*p4y*p4z**2*p4Norm*premx*premy**3 - 12*p4x**3*p4y*premx**2*premy**3 - 4*p4x*p4y**3*premx**2*premy**3 - 16*p4x*p4y*p4z**2*premx**2*premy**3 - 4*mwm2*p4x*p4y**2*premy**4 + 8*p2z*p4x*p4y**2*p4z*premy**4 - 4*mwm2*p4x*p4z**2*premy**4 + 8*p2z*p4x*p4z**3*premy**4 - 4*enRem*p4x*p4y**2*p4Norm*premy**4 + 4*enRem*p4x*p4z**2*p4Norm*premy**4 - 12*p4x**2*p4y**2*premx*premy**4 - 4*p4x**2*p4z**2*premx*premy**4 - 4*p4y**2*p4z**2*premx*premy**4 - 4*p4z**4*premx*premy**4 - 4*p4x*p4y**3*premy**5 - 4*p4x*p4y*p4z**2*premy**5 + 8*enRem**4*p4x**3*p4z*premz + 8*enRem**4*p4x*p4y**2*p4z*premz + 8*enRem**3*p2z*p4x**3*p4Norm*premz + 8*enRem**3*p2z*p4x*p4y**2*p4Norm*premz + 8*enRem**2*p2z*p4x**4*premx*premz + 8*enRem**2*p2z*p4x**2*p4y**2*premx*premz + 8*enRem**2*p2z*p4x**2*p4z**2*premx*premz - 8*enRem**2*p2z*p4y**2*p4z**2*premx*premz + 8*enRem**3*p4x**2*p4z*p4Norm*premx*premz - 8*enRem**3*p4y**2*p4z*p4Norm*premx*premz - 8*enRem**2*p4x**3*p4z*premx**2*premz - 16*enRem**2*p4x*p4y**2*p4z*premx**2*premz - 8*enRem**2*p4x*p4z**3*premx**2*premz - 8*enRem*p2z*p4x**3*p4Norm*premx**2*premz - 8*enRem*p2z*p4x*p4z**2*p4Norm*premx**2*premz - 8*p2z*p4x**4*premx**3*premz - 16*p2z*p4x**2*p4z**2*premx**3*premz - 8*p2z*p4z**4*premx**3*premz - 8*enRem*p4x**2*p4z*p4Norm*premx**3*premz - 8*enRem*p4z**3*p4Norm*premx**3*premz + 8*enRem**2*p2z*p4x**3*p4y*premy*premz + 8*enRem**2*p2z*p4x*p4y**3*premy*premz + 16*enRem**2*p2z*p4x*p4y*p4z**2*premy*premz + 16*enRem**3*p4x*p4y*p4z*p4Norm*premy*premz + 8*enRem**2*p4x**2*p4y*p4z*premx*premy*premz - 8*enRem**2*p4y**3*p4z*premx*premy*premz - 16*enRem**2*p4y*p4z**3*premx*premy*premz - 16*enRem*p2z*p4x**2*p4y*p4Norm*premx*premy*premz - 16*enRem*p2z*p4y*p4z**2*p4Norm*premx*premy*premz - 24*p2z*p4x**3*p4y*premx**2*premy*premz - 24*p2z*p4x*p4y*p4z**2*premx**2*premy*premz + 8*p4x**2*p4y*p4z*premx**3*premy*premz + 8*p4y*p4z**3*premx**3*premy*premz - 8*enRem**2*p4x**3*p4z*premy**2*premz + 8*enRem**2*p4x*p4z**3*premy**2*premz - 8*enRem*p2z*p4x*p4y**2*p4Norm*premy**2*premz + 8*enRem*p2z*p4x*p4z**2*p4Norm*premy**2*premz - 24*p2z*p4x**2*p4y**2*premx*premy**2*premz - 8*p2z*p4x**2*p4z**2*premx*premy**2*premz - 8*p2z*p4y**2*p4z**2*premx*premy**2*premz - 8*p2z*p4z**4*premx*premy**2*premz - 16*enRem*p4x**2*p4z*p4Norm*premx*premy**2*premz + 8*enRem*p4y**2*p4z*p4Norm*premx*premy**2*premz - 8*enRem*p4z**3*p4Norm*premx*premy**2*premz - 8*p4x**3*p4z*premx**2*premy**2*premz + 16*p4x*p4y**2*p4z*premx**2*premy**2*premz - 8*p4x*p4z**3*premx**2*premy**2*premz - 8*p2z*p4x*p4y**3*premy**3*premz - 8*p2z*p4x*p4y*p4z**2*premy**3*premz - 16*enRem*p4x*p4y*p4z*p4Norm*premy**3*premz - 16*p4x**2*p4y*p4z*premx*premy**3*premz + 8*p4y**3*p4z*premx*premy**3*premz + 8*p4y*p4z**3*premx*premy**3*premz - 8*p4x*p4y**2*p4z*premy**4*premz - 8*p4x*p4z**3*premy**4*premz - 4*enRem**3*p4x**3*p4Norm*premz**2 - 4*enRem**3*p4x*p4y**2*p4Norm*premz**2 - 4*enRem**2*p4x**4*premx*premz**2 - 4*enRem**2*p4x**2*p4y**2*premx*premz**2 - 4*enRem**2*p4x**2*p4z**2*premx*premz**2 + 4*enRem**2*p4y**2*p4z**2*premx*premz**2 + 4*enRem*p4x**3*p4Norm*premx**2*premz**2 + 4*enRem*p4x*p4z**2*p4Norm*premx**2*premz**2 + 4*p4x**4*premx**3*premz**2 + 8*p4x**2*p4z**2*premx**3*premz**2 + 4*p4z**4*premx**3*premz**2 - 4*enRem**2*p4x**3*p4y*premy*premz**2 - 4*enRem**2*p4x*p4y**3*premy*premz**2 - 8*enRem**2*p4x*p4y*p4z**2*premy*premz**2 + 8*enRem*p4x**2*p4y*p4Norm*premx*premy*premz**2 + 8*enRem*p4y*p4z**2*p4Norm*premx*premy*premz**2 + 12*p4x**3*p4y*premx**2*premy*premz**2 + 12*p4x*p4y*p4z**2*premx**2*premy*premz**2 + 4*enRem*p4x*p4y**2*p4Norm*premy**2*premz**2 - 4*enRem*p4x*p4z**2*p4Norm*premy**2*premz**2 + 12*p4x**2*p4y**2*premx*premy**2*premz**2 + 4*p4x**2*p4z**2*premx*premy**2*premz**2 + 4*p4y**2*p4z**2*premx*premy**2*premz**2 + 4*p4z**4*premx*premy**2*premz**2 + 4*p4x*p4y**3*premy**3*premz**2 + 4*p4x*p4y*p4z**2*premy**3*premz**2)**2 - 4*(4*enRem**4*p4x**4 + 8*enRem**4*p4x**2*p4y**2 + 4*enRem**4*p4y**4 - 8*enRem**2*p4x**4*premx**2 - 8*enRem**2*p4x**2*p4y**2*premx**2 - 8*enRem**2*p4x**2*p4z**2*premx**2 + 8*enRem**2*p4y**2*p4z**2*premx**2 + 4*p4x**4*premx**4 + 8*p4x**2*p4z**2*premx**4 + 4*p4z**4*premx**4 - 16*enRem**2*p4x**3*p4y*premx*premy - 16*enRem**2*p4x*p4y**3*premx*premy - 32*enRem**2*p4x*p4y*p4z**2*premx*premy + 16*p4x**3*p4y*premx**3*premy + 16*p4x*p4y*p4z**2*premx**3*premy - 8*enRem**2*p4x**2*p4y**2*premy**2 - 8*enRem**2*p4y**4*premy**2 + 8*enRem**2*p4x**2*p4z**2*premy**2 - 8*enRem**2*p4y**2*p4z**2*premy**2 + 24*p4x**2*p4y**2*premx**2*premy**2 + 8*p4x**2*p4z**2*premx**2*premy**2 + 8*p4y**2*p4z**2*premx**2*premy**2 + 8*p4z**4*premx**2*premy**2 + 16*p4x*p4y**3*premx*premy**3 + 16*p4x*p4y*p4z**2*premx*premy**3 + 4*p4y**4*premy**4 + 8*p4y**2*p4z**2*premy**4 + 4*p4z**4*premy**4)*(enRem**4*mwm2**2*p4x**2 + enRem**6*p4x**4 + enRem**4*mwm2**2*p4y**2 + enRem**6*p4x**2*p4y**2 + 4*enRem**4*p2z**2*p4x**2*p4y**2 + 4*enRem**4*p2z**2*p4y**4 - 4*enRem**4*mwm2*p2z*p4x**2*p4z - 4*enRem**4*mwm2*p2z*p4y**2*p4z + enRem**6*p4x**2*p4z**2 + 4*enRem**4*p2z**2*p4x**2*p4z**2 + enRem**6*p4y**2*p4z**2 + 4*enRem**4*p2z**2*p4y**2*p4z**2 - 2*enRem**5*mwm2*p4x**2*p4Norm - 2*enRem**5*mwm2*p4y**2*p4Norm + 4*enRem**5*p2z*p4x**2*p4z*p4Norm + 4*enRem**5*p2z*p4y**2*p4z*p4Norm - 4*enRem**4*mwm2*p4x**3*premx - 4*enRem**4*mwm2*p4x*p4y**2*premx + 8*enRem**4*p2z*p4x**3*p4z*premx + 8*enRem**4*p2z*p4x*p4y**2*p4z*premx - 4*enRem**4*mwm2*p4x*p4z**2*premx + 8*enRem**4*p2z*p4x*p4z**3*premx + 2*enRem**3*mwm2**2*p4x*p4Norm*premx + 2*enRem**5*p4x**3*p4Norm*premx + 8*enRem**3*p2z**2*p4x*p4y**2*p4Norm*premx - 8*enRem**3*mwm2*p2z*p4x*p4z*p4Norm*premx + 2*enRem**5*p4x*p4z**2*p4Norm*premx + 8*enRem**3*p2z**2*p4x*p4z**2*p4Norm*premx + enRem**2*mwm2**2*p4x**2*premx**2 - enRem**4*p4x**4*premx**2 - 2*enRem**4*p4x**2*p4y**2*premx**2 + 4*enRem**2*p2z**2*p4x**2*p4y**2*premx**2 - 4*enRem**2*mwm2*p2z*p4x**2*p4z*premx**2 + enRem**2*mwm2**2*p4z**2*premx**2 + 4*enRem**2*p2z**2*p4x**2*p4z**2*premx**2 - 2*enRem**4*p4y**2*p4z**2*premx**2 + 4*enRem**2*p2z**2*p4y**2*p4z**2*premx**2 - 4*enRem**2*mwm2*p2z*p4z**3*premx**2 + enRem**4*p4z**4*premx**2 + 4*enRem**2*p2z**2*p4z**4*premx**2 + 2*enRem**3*mwm2*p4y**2*p4Norm*premx**2 - 4*enRem**3*p2z*p4y**2*p4z*p4Norm*premx**2 - 2*enRem**3*mwm2*p4z**2*p4Norm*premx**2 + 4*enRem**3*p2z*p4z**3*p4Norm*premx**2 + 4*enRem**2*mwm2*p4x**3*premx**3 + 4*enRem**2*mwm2*p4x*p4y**2*premx**3 - 8*enRem**2*p2z*p4x**3*p4z*premx**3 - 8*enRem**2*p2z*p4x*p4y**2*p4z*premx**3 + 4*enRem**2*mwm2*p4x*p4z**2*premx**3 - 8*enRem**2*p2z*p4x*p4z**3*premx**3 - 4*enRem**3*p4x**3*p4Norm*premx**3 - 4*enRem**3*p4x*p4z**2*p4Norm*premx**3 - enRem**2*p4x**4*premx**4 + enRem**2*p4x**2*p4y**2*premx**4 - 3*enRem**2*p4x**2*p4z**2*premx**4 + enRem**2*p4y**2*p4z**2*premx**4 - 2*enRem**2*p4z**4*premx**4 + 2*enRem*mwm2*p4x**2*p4Norm*premx**4 - 4*enRem*p2z*p4x**2*p4z*p4Norm*premx**4 + 2*enRem*mwm2*p4z**2*p4Norm*premx**4 - 4*enRem*p2z*p4z**3*p4Norm*premx**4 + 2*enRem*p4x**3*p4Norm*premx**5 + 2*enRem*p4x*p4z**2*p4Norm*premx**5 + p4x**4*premx**6 + 2*p4x**2*p4z**2*premx**6 + p4z**4*premx**6 - 2*enRem**4*mwm2*p4x**2*p4y*premy - 2*enRem**4*mwm2*p4y**3*premy + 4*enRem**4*p2z*p4x**2*p4y*p4z*premy + 4*enRem**4*p2z*p4y**3*p4z*premy - 4*enRem**4*mwm2*p4y*p4z**2*premy + 8*enRem**4*p2z*p4y*p4z**3*premy + 2*enRem**3*mwm2**2*p4y*p4Norm*premy + 2*enRem**5*p4x**2*p4y*p4Norm*premy - 8*enRem**3*p2z**2*p4x**2*p4y*p4Norm*premy - 8*enRem**3*mwm2*p2z*p4y*p4z*p4Norm*premy + 2*enRem**5*p4y*p4z**2*p4Norm*premy + 8*enRem**3*p2z**2*p4y*p4z**2*p4Norm*premy + 2*enRem**2*mwm2**2*p4x*p4y*premx*premy + 2*enRem**4*p4x**3*p4y*premx*premy - 16*enRem**2*p2z**2*p4x**3*p4y*premx*premy - 8*enRem**2*p2z**2*p4x*p4y**3*premx*premy - 8*enRem**2*mwm2*p2z*p4x*p4y*p4z*premx*premy + 2*enRem**4*p4x*p4y*p4z**2*premx*premy - 8*enRem**2*p2z**2*p4x*p4y*p4z**2*premx*premy + 4*enRem**2*mwm2*p4x**2*p4y*premx**2*premy + 2*enRem**2*mwm2*p4y**3*premx**2*premy - 8*enRem**2*p2z*p4x**2*p4y*p4z*premx**2*premy - 4*enRem**2*p2z*p4y**3*p4z*premx**2*premy + 6*enRem**2*mwm2*p4y*p4z**2*premx**2*premy - 12*enRem**2*p2z*p4y*p4z**3*premx**2*premy - 4*enRem**3*p4x**2*p4y*p4Norm*premx**2*premy - 8*enRem*p2z**2*p4x**2*p4y*p4Norm*premx**2*premy - 4*enRem**3*p4y*p4z**2*p4Norm*premx**2*premy - 8*enRem*p2z**2*p4y*p4z**2*p4Norm*premx**2*premy - 4*enRem**2*p4x**3*p4y*premx**3*premy - 4*enRem**2*p4x*p4y*p4z**2*premx**3*premy - 2*mwm2*p4x**2*p4y*premx**4*premy + 4*p2z*p4x**2*p4y*p4z*premx**4*premy - 2*mwm2*p4y*p4z**2*premx**4*premy + 4*p2z*p4y*p4z**3*premx**4*premy + 2*enRem*p4x**2*p4y*p4Norm*premx**4*premy + 2*enRem*p4y*p4z**2*p4Norm*premx**4*premy + 2*p4x**3*p4y*premx**5*premy + 2*p4x*p4y*p4z**2*premx**5*premy - enRem**2*mwm2**2*p4x**2*premy**2 - 2*enRem**4*p4x**4*premy**2 + 4*enRem**2*p2z**2*p4x**4*premy**2 - enRem**4*p4x**2*p4y**2*premy**2 - 8*enRem**2*p2z**2*p4x**2*p4y**2*premy**2 - 8*enRem**2*p2z**2*p4y**4*premy**2 + 4*enRem**2*mwm2*p2z*p4x**2*p4z*premy**2 + enRem**2*mwm2**2*p4z**2*premy**2 - enRem**4*p4x**2*p4z**2*premy**2 - enRem**4*p4y**2*p4z**2*premy**2 - 8*enRem**2*p2z**2*p4y**2*p4z**2*premy**2 - 4*enRem**2*mwm2*p2z*p4z**3*premy**2 + enRem**4*p4z**4*premy**2 + 4*enRem**2*p2z**2*p4z**4*premy**2 + 2*enRem**3*mwm2*p4x**2*p4Norm*premy**2 + 4*enRem**3*mwm2*p4y**2*p4Norm*premy**2 - 4*enRem**3*p2z*p4x**2*p4z*p4Norm*premy**2 - 8*enRem**3*p2z*p4y**2*p4z*p4Norm*premy**2 - 2*enRem**3*mwm2*p4z**2*p4Norm*premy**2 + 4*enRem**3*p2z*p4z**3*p4Norm*premy**2 + 4*enRem**2*mwm2*p4x**3*premx*premy**2 + 8*enRem**2*mwm2*p4x*p4y**2*premx*premy**2 - 8*enRem**2*p2z*p4x**3*p4z*premx*premy**2 - 16*enRem**2*p2z*p4x*p4y**2*p4z*premx*premy**2 + 4*enRem**2*mwm2*p4x*p4z**2*premx*premy**2 - 8*enRem**2*p2z*p4x*p4z**3*premx*premy**2 - 2*enRem*mwm2**2*p4x*p4Norm*premx*premy**2 - 4*enRem**3*p4x**3*p4Norm*premx*premy**2 + 8*enRem*p2z**2*p4x**3*p4Norm*premx*premy**2 - 8*enRem*p2z**2*p4x*p4y**2*p4Norm*premx*premy**2 + 8*enRem*mwm2*p2z*p4x*p4z*p4Norm*premx*premy**2 - 4*enRem**3*p4x*p4z**2*p4Norm*premx*premy**2 - mwm2**2*p4x**2*premx**2*premy**2 + 4*p2z**2*p4x**4*premx**2*premy**2 + 4*p2z**2*p4x**2*p4y**2*premx**2*premy**2 + 4*mwm2*p2z*p4x**2*p4z*premx**2*premy**2 - mwm2**2*p4z**2*premx**2*premy**2 - 4*enRem**2*p4x**2*p4z**2*premx**2*premy**2 + 4*p2z**2*p4x**2*p4z**2*premx**2*premy**2 + 4*p2z**2*p4y**2*p4z**2*premx**2*premy**2 + 4*mwm2*p2z*p4z**3*premx**2*premy**2 - 4*enRem**2*p4z**4*premx**2*premy**2 + 2*enRem*mwm2*p4x**2*p4Norm*premx**2*premy**2 - 2*enRem*mwm2*p4y**2*p4Norm*premx**2*premy**2 - 4*enRem*p2z*p4x**2*p4z*p4Norm*premx**2*premy**2 + 4*enRem*p2z*p4y**2*p4z*p4Norm*premx**2*premy**2 + 4*enRem*mwm2*p4z**2*p4Norm*premx**2*premy**2 - 8*enRem*p2z*p4z**3*p4Norm*premx**2*premy**2 - 4*mwm2*p4x*p4y**2*premx**3*premy**2 + 8*p2z*p4x*p4y**2*p4z*premx**3*premy**2 + 4*enRem*p4x**3*p4Norm*premx**3*premy**2 + 4*enRem*p4x*p4z**2*p4Norm*premx**3*premy**2 + 2*p4x**4*premx**4*premy**2 + p4x**2*p4y**2*premx**4*premy**2 + 5*p4x**2*p4z**2*premx**4*premy**2 + p4y**2*p4z**2*premx**4*premy**2 + 3*p4z**4*premx**4*premy**2 + 2*enRem**2*mwm2*p4x**2*p4y*premy**3 + 4*enRem**2*mwm2*p4y**3*premy**3 - 4*enRem**2*p2z*p4x**2*p4y*p4z*premy**3 - 8*enRem**2*p2z*p4y**3*p4z*premy**3 + 6*enRem**2*mwm2*p4y*p4z**2*premy**3 - 12*enRem**2*p2z*p4y*p4z**3*premy**3 - 2*enRem*mwm2**2*p4y*p4Norm*premy**3 - 4*enRem**3*p4x**2*p4y*p4Norm*premy**3 + 8*enRem*p2z**2*p4x**2*p4y*p4Norm*premy**3 + 8*enRem*mwm2*p2z*p4y*p4z*p4Norm*premy**3 - 4*enRem**3*p4y*p4z**2*p4Norm*premy**3 - 8*enRem*p2z**2*p4y*p4z**2*p4Norm*premy**3 - 2*mwm2**2*p4x*p4y*premx*premy**3 - 4*enRem**2*p4x**3*p4y*premx*premy**3 + 8*p2z**2*p4x**3*p4y*premx*premy**3 + 8*p2z**2*p4x*p4y**3*premx*premy**3 + 8*mwm2*p2z*p4x*p4y*p4z*premx*premy**3 - 4*enRem**2*p4x*p4y*p4z**2*premx*premy**3 - 2*mwm2*p4x**2*p4y*premx**2*premy**3 - 2*mwm2*p4y**3*premx**2*premy**3 + 4*p2z*p4x**2*p4y*p4z*premx**2*premy**3 + 4*p2z*p4y**3*p4z*premx**2*premy**3 - 4*mwm2*p4y*p4z**2*premx**2*premy**3 + 8*p2z*p4y*p4z**3*premx**2*premy**3 + 4*enRem*p4x**2*p4y*p4Norm*premx**2*premy**3 + 4*enRem*p4y*p4z**2*p4Norm*premx**2*premy**3 + 4*p4x**3*p4y*premx**3*premy**3 + 4*p4x*p4y*p4z**2*premx**3*premy**3 + enRem**2*p4x**4*premy**4 - mwm2**2*p4y**2*premy**4 - enRem**2*p4x**2*p4y**2*premy**4 + 4*p2z**2*p4x**2*p4y**2*premy**4 + 4*p2z**2*p4y**4*premy**4 + 4*mwm2*p2z*p4y**2*p4z*premy**4 - mwm2**2*p4z**2*premy**4 - enRem**2*p4x**2*p4z**2*premy**4 + 4*p2z**2*p4x**2*p4z**2*premy**4 - enRem**2*p4y**2*p4z**2*premy**4 + 4*p2z**2*p4y**2*p4z**2*premy**4 + 4*mwm2*p2z*p4z**3*premy**4 - 2*enRem**2*p4z**4*premy**4 - 2*enRem*mwm2*p4y**2*p4Norm*premy**4 + 4*enRem*p2z*p4y**2*p4z*p4Norm*premy**4 + 2*enRem*mwm2*p4z**2*p4Norm*premy**4 - 4*enRem*p2z*p4z**3*p4Norm*premy**4 - 4*mwm2*p4x*p4y**2*premx*premy**4 + 8*p2z*p4x*p4y**2*p4z*premx*premy**4 + 2*enRem*p4x**3*p4Norm*premx*premy**4 + 2*enRem*p4x*p4z**2*p4Norm*premx*premy**4 + p4x**4*premx**2*premy**4 + 2*p4x**2*p4y**2*premx**2*premy**4 + 4*p4x**2*p4z**2*premx**2*premy**4 + 2*p4y**2*p4z**2*premx**2*premy**4 + 3*p4z**4*premx**2*premy**4 - 2*mwm2*p4y**3*premy**5 + 4*p2z*p4y**3*p4z*premy**5 - 2*mwm2*p4y*p4z**2*premy**5 + 4*p2z*p4y*p4z**3*premy**5 + 2*enRem*p4x**2*p4y*p4Norm*premy**5 + 2*enRem*p4y*p4z**2*p4Norm*premy**5 + 2*p4x**3*p4y*premx*premy**5 + 2*p4x*p4y*p4z**2*premx*premy**5 + p4x**2*p4y**2*premy**6 + p4x**2*p4z**2*premy**6 + p4y**2*p4z**2*premy**6 + p4z**4*premy**6 - 4*enRem**4*p2z*p4x**4*premz - 12*enRem**4*p2z*p4x**2*p4y**2*premz - 8*enRem**4*p2z*p4y**4*premz + 4*enRem**4*mwm2*p4x**2*p4z*premz + 4*enRem**4*mwm2*p4y**2*p4z*premz - 12*enRem**4*p2z*p4x**2*p4z**2*premz - 12*enRem**4*p2z*p4y**2*p4z**2*premz + 4*enRem**3*mwm2*p2z*p4x**2*p4Norm*premz + 4*enRem**3*mwm2*p2z*p4y**2*p4Norm*premz - 4*enRem**5*p4x**2*p4z*p4Norm*premz - 8*enRem**3*p2z**2*p4x**2*p4z*p4Norm*premz - 4*enRem**5*p4y**2*p4z*p4Norm*premz - 8*enRem**3*p2z**2*p4y**2*p4z*p4Norm*premz + 8*enRem**2*mwm2*p2z*p4x**3*premx*premz + 8*enRem**2*mwm2*p2z*p4x*p4y**2*premx*premz - 8*enRem**4*p4x**3*p4z*premx*premz - 16*enRem**2*p2z**2*p4x**3*p4z*premx*premz - 8*enRem**4*p4x*p4y**2*p4z*premx*premz - 16*enRem**2*p2z**2*p4x*p4y**2*p4z*premx*premz + 8*enRem**2*mwm2*p2z*p4x*p4z**2*premx*premz - 8*enRem**4*p4x*p4z**3*premx*premz - 16*enRem**2*p2z**2*p4x*p4z**3*premx*premz - 8*enRem**3*p2z*p4x**3*p4Norm*premx*premz - 16*enRem**3*p2z*p4x*p4y**2*p4Norm*premx*premz + 8*enRem**3*mwm2*p4x*p4z*p4Norm*premx*premz - 24*enRem**3*p2z*p4x*p4z**2*p4Norm*premx*premz - 4*enRem**2*p2z*p4x**2*p4y**2*premx**2*premz + 4*enRem**2*mwm2*p4x**2*p4z*premx**2*premz - 12*enRem**2*p2z*p4x**2*p4z**2*premx**2*premz - 4*enRem**2*p2z*p4y**2*p4z**2*premx**2*premz + 4*enRem**2*mwm2*p4z**3*premx**2*premz - 12*enRem**2*p2z*p4z**4*premx**2*premz + 4*enRem*mwm2*p2z*p4x**2*p4Norm*premx**2*premz - 8*enRem*p2z**2*p4x**2*p4z*p4Norm*premx**2*premz + 4*enRem**3*p4y**2*p4z*p4Norm*premx**2*premz + 4*enRem*mwm2*p2z*p4z**2*p4Norm*premx**2*premz - 4*enRem**3*p4z**3*p4Norm*premx**2*premz - 8*enRem*p2z**2*p4z**3*p4Norm*premx**2*premz + 8*enRem**2*p4x**3*p4z*premx**3*premz + 8*enRem**2*p4x*p4y**2*p4z*premx**3*premz + 8*enRem**2*p4x*p4z**3*premx**3*premz + 8*enRem*p2z*p4x**3*p4Norm*premx**3*premz + 8*enRem*p2z*p4x*p4z**2*p4Norm*premx**3*premz + 4*p2z*p4x**4*premx**4*premz + 8*p2z*p4x**2*p4z**2*premx**4*premz + 4*p2z*p4z**4*premx**4*premz + 4*enRem*p4x**2*p4z*p4Norm*premx**4*premz + 4*enRem*p4z**3*p4Norm*premx**4*premz + 4*enRem**2*mwm2*p2z*p4x**2*p4y*premy*premz + 4*enRem**2*mwm2*p2z*p4y**3*premy*premz - 4*enRem**4*p4x**2*p4y*p4z*premy*premz - 8*enRem**2*p2z**2*p4x**2*p4y*p4z*premy*premz - 4*enRem**4*p4y**3*p4z*premy*premz - 8*enRem**2*p2z**2*p4y**3*p4z*premy*premz + 8*enRem**2*mwm2*p2z*p4y*p4z**2*premy*premz - 8*enRem**4*p4y*p4z**3*premy*premz - 16*enRem**2*p2z**2*p4y*p4z**3*premy*premz + 8*enRem**3*p2z*p4x**2*p4y*p4Norm*premy*premz + 8*enRem**3*mwm2*p4y*p4z*p4Norm*premy*premz - 24*enRem**3*p2z*p4y*p4z**2*p4Norm*premy*premz + 24*enRem**2*p2z*p4x**3*p4y*premx*premy*premz + 16*enRem**2*p2z*p4x*p4y**3*premx*premy*premz + 8*enRem**2*mwm2*p4x*p4y*p4z*premx*premy*premz + 8*enRem**2*p2z*p4x*p4y*p4z**2*premx*premy*premz - 4*mwm2*p2z*p4x**2*p4y*premx**2*premy*premz + 8*enRem**2*p4x**2*p4y*p4z*premx**2*premy*premz + 8*p2z**2*p4x**2*p4y*p4z*premx**2*premy*premz + 4*enRem**2*p4y**3*p4z*premx**2*premy*premz - 4*mwm2*p2z*p4y*p4z**2*premx**2*premy*premz + 12*enRem**2*p4y*p4z**3*premx**2*premy*premz + 8*p2z**2*p4y*p4z**3*premx**2*premy*premz + 24*enRem*p2z*p4x**2*p4y*p4Norm*premx**2*premy*premz + 24*enRem*p2z*p4y*p4z**2*p4Norm*premx**2*premy*premz + 8*p2z*p4x**3*p4y*premx**3*premy*premz + 8*p2z*p4x*p4y*p4z**2*premx**3*premy*premz - 4*p4x**2*p4y*p4z*premx**4*premy*premz - 4*p4y*p4z**3*premx**4*premy*premz - 4*enRem**2*p2z*p4x**4*premy**2*premz + 16*enRem**2*p2z*p4x**2*p4y**2*premy**2*premz + 16*enRem**2*p2z*p4y**4*premy**2*premz - 4*enRem**2*mwm2*p4x**2*p4z*premy**2*premz + 16*enRem**2*p2z*p4y**2*p4z**2*premy**2*premz + 4*enRem**2*mwm2*p4z**3*premy**2*premz - 12*enRem**2*p2z*p4z**4*premy**2*premz - 4*enRem*mwm2*p2z*p4y**2*p4Norm*premy**2*premz + 4*enRem**3*p4x**2*p4z*p4Norm*premy**2*premz + 8*enRem**3*p4y**2*p4z*p4Norm*premy**2*premz + 8*enRem*p2z**2*p4y**2*p4z*p4Norm*premy**2*premz + 4*enRem*mwm2*p2z*p4z**2*p4Norm*premy**2*premz - 4*enRem**3*p4z**3*p4Norm*premy**2*premz - 8*enRem*p2z**2*p4z**3*p4Norm*premy**2*premz - 8*mwm2*p2z*p4x*p4y**2*premx*premy**2*premz + 8*enRem**2*p4x**3*p4z*premx*premy**2*premz + 16*enRem**2*p4x*p4y**2*p4z*premx*premy**2*premz + 16*p2z**2*p4x*p4y**2*p4z*premx*premy**2*premz + 8*enRem**2*p4x*p4z**3*premx*premy**2*premz - 8*enRem*p2z*p4x**3*p4Norm*premx*premy**2*premz + 16*enRem*p2z*p4x*p4y**2*p4Norm*premx*premy**2*premz - 8*enRem*mwm2*p4x*p4z*p4Norm*premx*premy**2*premz + 8*enRem*p2z*p4x*p4z**2*p4Norm*premx*premy**2*premz - 4*p2z*p4x**4*premx**2*premy**2*premz - 4*p2z*p4x**2*p4y**2*premx**2*premy**2*premz - 4*mwm2*p4x**2*p4z*premx**2*premy**2*premz + 4*p2z*p4x**2*p4z**2*premx**2*premy**2*premz - 4*p2z*p4y**2*p4z**2*premx**2*premy**2*premz - 4*mwm2*p4z**3*premx**2*premy**2*premz + 8*p2z*p4z**4*premx**2*premy**2*premz + 4*enRem*p4x**2*p4z*p4Norm*premx**2*premy**2*premz - 4*enRem*p4y**2*p4z*p4Norm*premx**2*premy**2*premz + 8*enRem*p4z**3*p4Norm*premx**2*premy**2*premz - 8*p4x*p4y**2*p4z*premx**3*premy**2*premz - 4*mwm2*p2z*p4y**3*premy**3*premz + 4*enRem**2*p4x**2*p4y*p4z*premy**3*premz + 8*enRem**2*p4y**3*p4z*premy**3*premz + 8*p2z**2*p4y**3*p4z*premy**3*premz - 4*mwm2*p2z*p4y*p4z**2*premy**3*premz + 12*enRem**2*p4y*p4z**3*premy**3*premz + 8*p2z**2*p4y*p4z**3*premy**3*premz - 8*enRem*p2z*p4x**2*p4y*p4Norm*premy**3*premz - 8*enRem*mwm2*p4y*p4z*p4Norm*premy**3*premz + 24*enRem*p2z*p4y*p4z**2*p4Norm*premy**3*premz - 8*p2z*p4x**3*p4y*premx*premy**3*premz - 16*p2z*p4x*p4y**3*premx*premy**3*premz - 8*mwm2*p4x*p4y*p4z*premx*premy**3*premz + 8*p2z*p4x*p4y*p4z**2*premx*premy**3*premz - 4*p4x**2*p4y*p4z*premx**2*premy**3*premz - 4*p4y**3*p4z*premx**2*premy**3*premz - 8*p4y*p4z**3*premx**2*premy**3*premz - 4*p2z*p4x**2*p4y**2*premy**4*premz - 8*p2z*p4y**4*premy**4*premz - 4*mwm2*p4y**2*p4z*premy**4*premz - 4*p2z*p4x**2*p4z**2*premy**4*premz - 4*p2z*p4y**2*p4z**2*premy**4*premz - 4*mwm2*p4z**3*premy**4*premz + 4*p2z*p4z**4*premy**4*premz - 4*enRem*p4y**2*p4z*p4Norm*premy**4*premz + 4*enRem*p4z**3*p4Norm*premy**4*premz - 8*p4x*p4y**2*p4z*premx*premy**4*premz - 4*p4y**3*p4z*premy**5*premz - 4*p4y*p4z**3*premy**5*premz + 2*enRem**4*p4x**4*premz**2 + 4*enRem**2*p2z**2*p4x**4*premz**2 + 6*enRem**4*p4x**2*p4y**2*premz**2 + 4*enRem**2*p2z**2*p4x**2*p4y**2*premz**2 + 4*enRem**4*p4y**4*premz**2 + 6*enRem**4*p4x**2*p4z**2*premz**2 + 4*enRem**2*p2z**2*p4x**2*p4z**2*premz**2 + 6*enRem**4*p4y**2*p4z**2*premz**2 + 4*enRem**2*p2z**2*p4y**2*p4z**2*premz**2 - 2*enRem**3*mwm2*p4x**2*p4Norm*premz**2 - 2*enRem**3*mwm2*p4y**2*p4Norm*premz**2 + 12*enRem**3*p2z*p4x**2*p4z*p4Norm*premz**2 + 12*enRem**3*p2z*p4y**2*p4z*p4Norm*premz**2 - 4*enRem**2*mwm2*p4x**3*premx*premz**2 - 4*enRem**2*mwm2*p4x*p4y**2*premx*premz**2 + 24*enRem**2*p2z*p4x**3*p4z*premx*premz**2 + 24*enRem**2*p2z*p4x*p4y**2*p4z*premx*premz**2 - 4*enRem**2*mwm2*p4x*p4z**2*premx*premz**2 + 24*enRem**2*p2z*p4x*p4z**3*premx*premz**2 + 4*enRem**3*p4x**3*p4Norm*premx*premz**2 + 8*enRem*p2z**2*p4x**3*p4Norm*premx*premz**2 + 8*enRem**3*p4x*p4y**2*p4Norm*premx*premz**2 + 12*enRem**3*p4x*p4z**2*p4Norm*premx*premz**2 + 8*enRem*p2z**2*p4x*p4z**2*p4Norm*premx*premz**2 + 4*p2z**2*p4x**4*premx**2*premz**2 + 2*enRem**2*p4x**2*p4y**2*premx**2*premz**2 + 6*enRem**2*p4x**2*p4z**2*premx**2*premz**2 + 8*p2z**2*p4x**2*p4z**2*premx**2*premz**2 + 2*enRem**2*p4y**2*p4z**2*premx**2*premz**2 + 6*enRem**2*p4z**4*premx**2*premz**2 + 4*p2z**2*p4z**4*premx**2*premz**2 - 2*enRem*mwm2*p4x**2*p4Norm*premx**2*premz**2 + 12*enRem*p2z*p4x**2*p4z*p4Norm*premx**2*premz**2 - 2*enRem*mwm2*p4z**2*p4Norm*premx**2*premz**2 + 12*enRem*p2z*p4z**3*p4Norm*premx**2*premz**2 - 4*enRem*p4x**3*p4Norm*premx**3*premz**2 - 4*enRem*p4x*p4z**2*p4Norm*premx**3*premz**2 - 2*p4x**4*premx**4*premz**2 - 4*p4x**2*p4z**2*premx**4*premz**2 - 2*p4z**4*premx**4*premz**2 - 2*enRem**2*mwm2*p4x**2*p4y*premy*premz**2 - 2*enRem**2*mwm2*p4y**3*premy*premz**2 + 12*enRem**2*p2z*p4x**2*p4y*p4z*premy*premz**2 + 12*enRem**2*p2z*p4y**3*p4z*premy*premz**2 - 4*enRem**2*mwm2*p4y*p4z**2*premy*premz**2 + 24*enRem**2*p2z*p4y*p4z**3*premy*premz**2 - 4*enRem**3*p4x**2*p4y*p4Norm*premy*premz**2 + 8*enRem*p2z**2*p4x**2*p4y*p4Norm*premy*premz**2 + 12*enRem**3*p4y*p4z**2*p4Norm*premy*premz**2 + 8*enRem*p2z**2*p4y*p4z**2*p4Norm*premy*premz**2 - 12*enRem**2*p4x**3*p4y*premx*premy*premz**2 + 8*p2z**2*p4x**3*p4y*premx*premy*premz**2 - 8*enRem**2*p4x*p4y**3*premx*premy*premz**2 - 4*enRem**2*p4x*p4y*p4z**2*premx*premy*premz**2 + 8*p2z**2*p4x*p4y*p4z**2*premx*premy*premz**2 + 2*mwm2*p4x**2*p4y*premx**2*premy*premz**2 - 12*p2z*p4x**2*p4y*p4z*premx**2*premy*premz**2 + 2*mwm2*p4y*p4z**2*premx**2*premy*premz**2 - 12*p2z*p4y*p4z**3*premx**2*premy*premz**2 - 12*enRem*p4x**2*p4y*p4Norm*premx**2*premy*premz**2 - 12*enRem*p4y*p4z**2*p4Norm*premx**2*premy*premz**2 - 4*p4x**3*p4y*premx**3*premy*premz**2 - 4*p4x*p4y*p4z**2*premx**3*premy*premz**2 + 2*enRem**2*p4x**4*premy**2*premz**2 - 8*enRem**2*p4x**2*p4y**2*premy**2*premz**2 + 4*p2z**2*p4x**2*p4y**2*premy**2*premz**2 - 8*enRem**2*p4y**4*premy**2*premz**2 + 4*p2z**2*p4x**2*p4z**2*premy**2*premz**2 - 8*enRem**2*p4y**2*p4z**2*premy**2*premz**2 + 4*p2z**2*p4y**2*p4z**2*premy**2*premz**2 + 6*enRem**2*p4z**4*premy**2*premz**2 + 4*p2z**2*p4z**4*premy**2*premz**2 + 2*enRem*mwm2*p4y**2*p4Norm*premy**2*premz**2 - 12*enRem*p2z*p4y**2*p4z*p4Norm*premy**2*premz**2 - 2*enRem*mwm2*p4z**2*p4Norm*premy**2*premz**2 + 12*enRem*p2z*p4z**3*p4Norm*premy**2*premz**2 + 4*mwm2*p4x*p4y**2*premx*premy**2*premz**2 - 24*p2z*p4x*p4y**2*p4z*premx*premy**2*premz**2 + 4*enRem*p4x**3*p4Norm*premx*premy**2*premz**2 - 8*enRem*p4x*p4y**2*p4Norm*premx*premy**2*premz**2 - 4*enRem*p4x*p4z**2*p4Norm*premx*premy**2*premz**2 + 2*p4x**4*premx**2*premy**2*premz**2 + 2*p4x**2*p4y**2*premx**2*premy**2*premz**2 - 2*p4x**2*p4z**2*premx**2*premy**2*premz**2 + 2*p4y**2*p4z**2*premx**2*premy**2*premz**2 - 4*p4z**4*premx**2*premy**2*premz**2 + 2*mwm2*p4y**3*premy**3*premz**2 - 12*p2z*p4y**3*p4z*premy**3*premz**2 + 2*mwm2*p4y*p4z**2*premy**3*premz**2 - 12*p2z*p4y*p4z**3*premy**3*premz**2 + 4*enRem*p4x**2*p4y*p4Norm*premy**3*premz**2 - 12*enRem*p4y*p4z**2*p4Norm*premy**3*premz**2 + 4*p4x**3*p4y*premx*premy**3*premz**2 + 8*p4x*p4y**3*premx*premy**3*premz**2 - 4*p4x*p4y*p4z**2*premx*premy**3*premz**2 + 2*p4x**2*p4y**2*premy**4*premz**2 + 4*p4y**4*premy**4*premz**2 + 2*p4x**2*p4z**2*premy**4*premz**2 + 2*p4y**2*p4z**2*premy**4*premz**2 - 2*p4z**4*premy**4*premz**2 - 4*enRem**2*p2z*p4x**4*premz**3 - 4*enRem**2*p2z*p4x**2*p4y**2*premz**3 - 4*enRem**2*p2z*p4x**2*p4z**2*premz**3 - 4*enRem**2*p2z*p4y**2*p4z**2*premz**3 - 4*enRem**3*p4x**2*p4z*p4Norm*premz**3 - 4*enRem**3*p4y**2*p4z*p4Norm*premz**3 - 8*enRem**2*p4x**3*p4z*premx*premz**3 - 8*enRem**2*p4x*p4y**2*p4z*premx*premz**3 - 8*enRem**2*p4x*p4z**3*premx*premz**3 - 8*enRem*p2z*p4x**3*p4Norm*premx*premz**3 - 8*enRem*p2z*p4x*p4z**2*p4Norm*premx*premz**3 - 4*p2z*p4x**4*premx**2*premz**3 - 8*p2z*p4x**2*p4z**2*premx**2*premz**3 - 4*p2z*p4z**4*premx**2*premz**3 - 4*enRem*p4x**2*p4z*p4Norm*premx**2*premz**3 - 4*enRem*p4z**3*p4Norm*premx**2*premz**3 - 4*enRem**2*p4x**2*p4y*p4z*premy*premz**3 - 4*enRem**2*p4y**3*p4z*premy*premz**3 - 8*enRem**2*p4y*p4z**3*premy*premz**3 - 8*enRem*p2z*p4x**2*p4y*p4Norm*premy*premz**3 - 8*enRem*p2z*p4y*p4z**2*p4Norm*premy*premz**3 - 8*p2z*p4x**3*p4y*premx*premy*premz**3 - 8*p2z*p4x*p4y*p4z**2*premx*premy*premz**3 + 4*p4x**2*p4y*p4z*premx**2*premy*premz**3 + 4*p4y*p4z**3*premx**2*premy*premz**3 - 4*p2z*p4x**2*p4y**2*premy**2*premz**3 - 4*p2z*p4x**2*p4z**2*premy**2*premz**3 - 4*p2z*p4y**2*p4z**2*premy**2*premz**3 - 4*p2z*p4z**4*premy**2*premz**3 + 4*enRem*p4y**2*p4z*p4Norm*premy**2*premz**3 - 4*enRem*p4z**3*p4Norm*premy**2*premz**3 + 8*p4x*p4y**2*p4z*premx*premy**2*premz**3 + 4*p4y**3*p4z*premy**3*premz**3 + 4*p4y*p4z**3*premy**3*premz**3 + enRem**2*p4x**4*premz**4 + enRem**2*p4x**2*p4y**2*premz**4 + enRem**2*p4x**2*p4z**2*premz**4 + enRem**2*p4y**2*p4z**2*premz**4 + 2*enRem*p4x**3*p4Norm*premx*premz**4 + 2*enRem*p4x*p4z**2*p4Norm*premx*premz**4 + p4x**4*premx**2*premz**4 + 2*p4x**2*p4z**2*premx**2*premz**4 + p4z**4*premx**2*premz**4 + 2*enRem*p4x**2*p4y*p4Norm*premy*premz**4 + 2*enRem*p4y*p4z**2*p4Norm*premy*premz**4 + 2*p4x**3*p4y*premx*premy*premz**4 + 2*p4x*p4y*p4z**2*premx*premy*premz**4 + p4x**2*p4y**2*premy**2*premz**4 + p4x**2*p4z**2*premy**2*premz**4 + p4y**2*p4z**2*premy**2*premz**4 + p4z**4*premy**2*premz**4))
        return ans

    def _p2x_func1(self, p2z, underSqrt, p4x, p4y, p4z, premx, premy, premz, mwm2, enRem, p4Norm, p1Norm):
        p2x = premx - (-4*enRem**4*mwm2*p4x**3 - 4*enRem**4*mwm2*p4x*p4y**2 + 8*enRem**4*p2z*p4x**3*p4z + 8*enRem**4*p2z*p4x*p4y**2*p4z + 4*enRem**5*p4x**3*p4Norm + 4*enRem**5*p4x*p4y**2*p4Norm + 4*enRem**4*p4x**4*premx + 4*enRem**4*p4x**2*p4y**2*premx + 4*enRem**4*p4x**2*p4z**2*premx - 4*enRem**4*p4y**2*p4z**2*premx - 4*enRem**3*mwm2*p4x**2*p4Norm*premx + 4*enRem**3*mwm2*p4y**2*p4Norm*premx + 8*enRem**3*p2z*p4x**2*p4z*p4Norm*premx - 8*enRem**3*p2z*p4y**2*p4z*p4Norm*premx + 4*enRem**2*mwm2*p4x**3*premx**2 + 8*enRem**2*mwm2*p4x*p4y**2*premx**2 - 8*enRem**2*p2z*p4x**3*p4z*premx**2 - 16*enRem**2*p2z*p4x*p4y**2*p4z*premx**2 + 4*enRem**2*mwm2*p4x*p4z**2*premx**2 - 8*enRem**2*p2z*p4x*p4z**3*premx**2 - 8*enRem**3*p4x**3*p4Norm*premx**2 - 4*enRem**3*p4x*p4y**2*p4Norm*premx**2 - 4*enRem**3*p4x*p4z**2*p4Norm*premx**2 - 8*enRem**2*p4x**4*premx**3 - 4*enRem**2*p4x**2*p4y**2*premx**3 - 12*enRem**2*p4x**2*p4z**2*premx**3 + 4*enRem**2*p4y**2*p4z**2*premx**3 - 4*enRem**2*p4z**4*premx**3 + 4*enRem*mwm2*p4x**2*p4Norm*premx**3 - 8*enRem*p2z*p4x**2*p4z*p4Norm*premx**3 + 4*enRem*mwm2*p4z**2*p4Norm*premx**3 - 8*enRem*p2z*p4z**3*p4Norm*premx**3 + 4*enRem*p4x**3*p4Norm*premx**4 + 4*enRem*p4x*p4z**2*p4Norm*premx**4 + 4*p4x**4*premx**5 + 8*p4x**2*p4z**2*premx**5 + 4*p4z**4*premx**5 + 4*enRem**4*p4x**3*p4y*premy + 4*enRem**4*p4x*p4y**3*premy + 8*enRem**4*p4x*p4y*p4z**2*premy - 8*enRem**3*mwm2*p4x*p4y*p4Norm*premy + 16*enRem**3*p2z*p4x*p4y*p4z*p4Norm*premy - 4*enRem**2*mwm2*p4x**2*p4y*premx*premy + 4*enRem**2*mwm2*p4y**3*premx*premy + 8*enRem**2*p2z*p4x**2*p4y*p4z*premx*premy - 8*enRem**2*p2z*p4y**3*p4z*premx*premy + 8*enRem**2*mwm2*p4y*p4z**2*premx*premy - 16*enRem**2*p2z*p4y*p4z**3*premx*premy - 8*enRem**3*p4x**2*p4y*p4Norm*premx*premy - 8*enRem**3*p4y*p4z**2*p4Norm*premx*premy - 16*enRem**2*p4x**3*p4y*premx**2*premy - 4*enRem**2*p4x*p4y**3*premx**2*premy - 20*enRem**2*p4x*p4y*p4z**2*premx**2*premy - 4*mwm2*p4x**2*p4y*premx**3*premy + 8*p2z*p4x**2*p4y*p4z*premx**3*premy - 4*mwm2*p4y*p4z**2*premx**3*premy + 8*p2z*p4y*p4z**3*premx**3*premy + 8*enRem*p4x**2*p4y*p4Norm*premx**3*premy + 8*enRem*p4y*p4z**2*p4Norm*premx**3*premy + 12*p4x**3*p4y*premx**4*premy + 12*p4x*p4y*p4z**2*premx**4*premy + 4*enRem**2*mwm2*p4x**3*premy**2 - 8*enRem**2*p2z*p4x**3*p4z*premy**2 - 4*enRem**2*mwm2*p4x*p4z**2*premy**2 + 8*enRem**2*p2z*p4x*p4z**3*premy**2 - 4*enRem**3*p4x**3*p4Norm*premy**2 - 8*enRem**3*p4x*p4y**2*p4Norm*premy**2 + 4*enRem**3*p4x*p4z**2*p4Norm*premy**2 - 4*enRem**2*p4x**4*premx*premy**2 - 16*enRem**2*p4x**2*p4y**2*premx*premy**2 - 8*enRem**2*p4x**2*p4z**2*premx*premy**2 - 4*enRem**2*p4z**4*premx*premy**2 + 8*enRem*mwm2*p4x**2*p4Norm*premx*premy**2 - 4*enRem*mwm2*p4y**2*p4Norm*premx*premy**2 - 16*enRem*p2z*p4x**2*p4z*p4Norm*premx*premy**2 + 8*enRem*p2z*p4y**2*p4z*p4Norm*premx*premy**2 + 4*enRem*mwm2*p4z**2*p4Norm*premx*premy**2 - 8*enRem*p2z*p4z**3*p4Norm*premx*premy**2 + 4*mwm2*p4x**3*premx**2*premy**2 - 8*mwm2*p4x*p4y**2*premx**2*premy**2 - 8*p2z*p4x**3*p4z*premx**2*premy**2 + 16*p2z*p4x*p4y**2*p4z*premx**2*premy**2 + 4*mwm2*p4x*p4z**2*premx**2*premy**2 - 8*p2z*p4x*p4z**3*premx**2*premy**2 + 4*enRem*p4x**3*p4Norm*premx**2*premy**2 + 4*enRem*p4x*p4y**2*p4Norm*premx**2*premy**2 + 4*p4x**4*premx**3*premy**2 + 12*p4x**2*p4y**2*premx**3*premy**2 + 12*p4x**2*p4z**2*premx**3*premy**2 + 4*p4y**2*p4z**2*premx**3*premy**2 + 8*p4z**4*premx**3*premy**2 - 4*enRem**2*p4x**3*p4y*premy**3 - 8*enRem**2*p4x*p4y**3*premy**3 - 12*enRem**2*p4x*p4y*p4z**2*premy**3 + 8*enRem*mwm2*p4x*p4y*p4Norm*premy**3 - 16*enRem*p2z*p4x*p4y*p4z*p4Norm*premy**3 + 8*mwm2*p4x**2*p4y*premx*premy**3 - 4*mwm2*p4y**3*premx*premy**3 - 16*p2z*p4x**2*p4y*p4z*premx*premy**3 + 8*p2z*p4y**3*p4z*premx*premy**3 - 4*mwm2*p4y*p4z**2*premx*premy**3 + 8*p2z*p4y*p4z**3*premx*premy**3 + 8*enRem*p4x**2*p4y*p4Norm*premx*premy**3 + 8*enRem*p4y*p4z**2*p4Norm*premx*premy**3 + 12*p4x**3*p4y*premx**2*premy**3 + 4*p4x*p4y**3*premx**2*premy**3 + 16*p4x*p4y*p4z**2*premx**2*premy**3 + 4*mwm2*p4x*p4y**2*premy**4 - 8*p2z*p4x*p4y**2*p4z*premy**4 + 4*mwm2*p4x*p4z**2*premy**4 - 8*p2z*p4x*p4z**3*premy**4 + 4*enRem*p4x*p4y**2*p4Norm*premy**4 - 4*enRem*p4x*p4z**2*p4Norm*premy**4 + 12*p4x**2*p4y**2*premx*premy**4 + 4*p4x**2*p4z**2*premx*premy**4 + 4*p4y**2*p4z**2*premx*premy**4 + 4*p4z**4*premx*premy**4 + 4*p4x*p4y**3*premy**5 + 4*p4x*p4y*p4z**2*premy**5 - 8*enRem**4*p4x**3*p4z*premz - 8*enRem**4*p4x*p4y**2*p4z*premz - 8*enRem**3*p2z*p4x**3*p4Norm*premz - 8*enRem**3*p2z*p4x*p4y**2*p4Norm*premz - 8*enRem**2*p2z*p4x**4*premx*premz - 8*enRem**2*p2z*p4x**2*p4y**2*premx*premz - 8*enRem**2*p2z*p4x**2*p4z**2*premx*premz + 8*enRem**2*p2z*p4y**2*p4z**2*premx*premz - 8*enRem**3*p4x**2*p4z*p4Norm*premx*premz + 8*enRem**3*p4y**2*p4z*p4Norm*premx*premz + 8*enRem**2*p4x**3*p4z*premx**2*premz + 16*enRem**2*p4x*p4y**2*p4z*premx**2*premz + 8*enRem**2*p4x*p4z**3*premx**2*premz + 8*enRem*p2z*p4x**3*p4Norm*premx**2*premz + 8*enRem*p2z*p4x*p4z**2*p4Norm*premx**2*premz + 8*p2z*p4x**4*premx**3*premz + 16*p2z*p4x**2*p4z**2*premx**3*premz + 8*p2z*p4z**4*premx**3*premz + 8*enRem*p4x**2*p4z*p4Norm*premx**3*premz + 8*enRem*p4z**3*p4Norm*premx**3*premz - 8*enRem**2*p2z*p4x**3*p4y*premy*premz - 8*enRem**2*p2z*p4x*p4y**3*premy*premz - 16*enRem**2*p2z*p4x*p4y*p4z**2*premy*premz - 16*enRem**3*p4x*p4y*p4z*p4Norm*premy*premz - 8*enRem**2*p4x**2*p4y*p4z*premx*premy*premz + 8*enRem**2*p4y**3*p4z*premx*premy*premz + 16*enRem**2*p4y*p4z**3*premx*premy*premz + 16*enRem*p2z*p4x**2*p4y*p4Norm*premx*premy*premz + 16*enRem*p2z*p4y*p4z**2*p4Norm*premx*premy*premz + 24*p2z*p4x**3*p4y*premx**2*premy*premz + 24*p2z*p4x*p4y*p4z**2*premx**2*premy*premz - 8*p4x**2*p4y*p4z*premx**3*premy*premz - 8*p4y*p4z**3*premx**3*premy*premz + 8*enRem**2*p4x**3*p4z*premy**2*premz - 8*enRem**2*p4x*p4z**3*premy**2*premz + 8*enRem*p2z*p4x*p4y**2*p4Norm*premy**2*premz - 8*enRem*p2z*p4x*p4z**2*p4Norm*premy**2*premz + 24*p2z*p4x**2*p4y**2*premx*premy**2*premz + 8*p2z*p4x**2*p4z**2*premx*premy**2*premz + 8*p2z*p4y**2*p4z**2*premx*premy**2*premz + 8*p2z*p4z**4*premx*premy**2*premz + 16*enRem*p4x**2*p4z*p4Norm*premx*premy**2*premz - 8*enRem*p4y**2*p4z*p4Norm*premx*premy**2*premz + 8*enRem*p4z**3*p4Norm*premx*premy**2*premz + 8*p4x**3*p4z*premx**2*premy**2*premz - 16*p4x*p4y**2*p4z*premx**2*premy**2*premz + 8*p4x*p4z**3*premx**2*premy**2*premz + 8*p2z*p4x*p4y**3*premy**3*premz + 8*p2z*p4x*p4y*p4z**2*premy**3*premz + 16*enRem*p4x*p4y*p4z*p4Norm*premy**3*premz + 16*p4x**2*p4y*p4z*premx*premy**3*premz - 8*p4y**3*p4z*premx*premy**3*premz - 8*p4y*p4z**3*premx*premy**3*premz + 8*p4x*p4y**2*p4z*premy**4*premz + 8*p4x*p4z**3*premy**4*premz + 4*enRem**3*p4x**3*p4Norm*premz**2 + 4*enRem**3*p4x*p4y**2*p4Norm*premz**2 + 4*enRem**2*p4x**4*premx*premz**2 + 4*enRem**2*p4x**2*p4y**2*premx*premz**2 + 4*enRem**2*p4x**2*p4z**2*premx*premz**2 - 4*enRem**2*p4y**2*p4z**2*premx*premz**2 - 4*enRem*p4x**3*p4Norm*premx**2*premz**2 - 4*enRem*p4x*p4z**2*p4Norm*premx**2*premz**2 - 4*p4x**4*premx**3*premz**2 - 8*p4x**2*p4z**2*premx**3*premz**2 - 4*p4z**4*premx**3*premz**2 + 4*enRem**2*p4x**3*p4y*premy*premz**2 + 4*enRem**2*p4x*p4y**3*premy*premz**2 + 8*enRem**2*p4x*p4y*p4z**2*premy*premz**2 - 8*enRem*p4x**2*p4y*p4Norm*premx*premy*premz**2 - 8*enRem*p4y*p4z**2*p4Norm*premx*premy*premz**2 - 12*p4x**3*p4y*premx**2*premy*premz**2 - 12*p4x*p4y*p4z**2*premx**2*premy*premz**2 - 4*enRem*p4x*p4y**2*p4Norm*premy**2*premz**2 + 4*enRem*p4x*p4z**2*p4Norm*premy**2*premz**2 - 12*p4x**2*p4y**2*premx*premy**2*premz**2 - 4*p4x**2*p4z**2*premx*premy**2*premz**2 - 4*p4y**2*p4z**2*premx*premy**2*premz**2 - 4*p4z**4*premx*premy**2*premz**2 - 4*p4x*p4y**3*premy**3*premz**2 - 4*p4x*p4y*p4z**2*premy**3*premz**2 - np.sqrt(underSqrt))/(2*(4*enRem**4*p4x**4 + 8*enRem**4*p4x**2*p4y**2 + 4*enRem**4*p4y**4 - 8*enRem**2*p4x**4*premx**2 - 8*enRem**2*p4x**2*p4y**2*premx**2 - 8*enRem**2*p4x**2*p4z**2*premx**2 + 8*enRem**2*p4y**2*p4z**2*premx**2 + 4*p4x**4*premx**4 + 8*p4x**2*p4z**2*premx**4 + 4*p4z**4*premx**4 - 16*enRem**2*p4x**3*p4y*premx*premy - 16*enRem**2*p4x*p4y**3*premx*premy - 32*enRem**2*p4x*p4y*p4z**2*premx*premy + 16*p4x**3*p4y*premx**3*premy + 16*p4x*p4y*p4z**2*premx**3*premy - 8*enRem**2*p4x**2*p4y**2*premy**2 - 8*enRem**2*p4y**4*premy**2 + 8*enRem**2*p4x**2*p4z**2*premy**2 - 8*enRem**2*p4y**2*p4z**2*premy**2 + 24*p4x**2*p4y**2*premx**2*premy**2 + 8*p4x**2*p4z**2*premx**2*premy**2 + 8*p4y**2*p4z**2*premx**2*premy**2 + 8*p4z**4*premx**2*premy**2 + 16*p4x*p4y**3*premx*premy**3 + 16*p4x*p4y*p4z**2*premx*premy**3 + 4*p4y**4*premy**4 + 8*p4y**2*p4z**2*premy**4 + 4*p4z**4*premy**4))
        return p2x

    def _p2y_func1(self, p2z, underSqrt, p4x, p4y, p4z, premx, premy, premz, mwm2, enRem, p4Norm, p1Norm):
        p2y = premy - (-(enRem**2*mwm2*p4y) + 2*enRem**2*p2z*p4y*p4z + enRem**3*p4y*p4Norm - enRem*p4y*p4Norm*premx**2 + enRem**2*p4x**2*premy + enRem**2*p4y**2*premy + enRem**2*p4z**2*premy - enRem*mwm2*p4Norm*premy + 2*enRem*p2z*p4z*p4Norm*premy - p4x**2*premx**2*premy - p4y**2*premx**2*premy - p4z**2*premx**2*premy - enRem*p4y*p4Norm*premy**2 - p4x**2*premy**3 - p4y**2*premy**3 - p4z**2*premy**3 - 2*enRem**2*p4y*p4z*premz - 2*enRem*p2z*p4y*p4Norm*premz - 2*p2z*p4x**2*premy*premz - 2*p2z*p4y**2*premy*premz - 2*p2z*p4z**2*premy*premz - 2*enRem*p4z*p4Norm*premy*premz + enRem*p4y*p4Norm*premz**2 + p4x**2*premy*premz**2 + p4y**2*premy*premz**2 + p4z**2*premy*premz**2 - (enRem**2*p4x*p4y*(-4*enRem**4*mwm2*p4x**3 - 4*enRem**4*mwm2*p4x*p4y**2 + 8*enRem**4*p2z*p4x**3*p4z + 8*enRem**4*p2z*p4x*p4y**2*p4z + 4*enRem**5*p4x**3*p4Norm + 4*enRem**5*p4x*p4y**2*p4Norm + 4*enRem**4*p4x**4*premx + 4*enRem**4*p4x**2*p4y**2*premx + 4*enRem**4*p4x**2*p4z**2*premx - 4*enRem**4*p4y**2*p4z**2*premx - 4*enRem**3*mwm2*p4x**2*p4Norm*premx + 4*enRem**3*mwm2*p4y**2*p4Norm*premx + 8*enRem**3*p2z*p4x**2*p4z*p4Norm*premx - 8*enRem**3*p2z*p4y**2*p4z*p4Norm*premx + 4*enRem**2*mwm2*p4x**3*premx**2 + 8*enRem**2*mwm2*p4x*p4y**2*premx**2 - 8*enRem**2*p2z*p4x**3*p4z*premx**2 - 16*enRem**2*p2z*p4x*p4y**2*p4z*premx**2 + 4*enRem**2*mwm2*p4x*p4z**2*premx**2 - 8*enRem**2*p2z*p4x*p4z**3*premx**2 - 8*enRem**3*p4x**3*p4Norm*premx**2 - 4*enRem**3*p4x*p4y**2*p4Norm*premx**2 - 4*enRem**3*p4x*p4z**2*p4Norm*premx**2 - 8*enRem**2*p4x**4*premx**3 - 4*enRem**2*p4x**2*p4y**2*premx**3 - 12*enRem**2*p4x**2*p4z**2*premx**3 + 4*enRem**2*p4y**2*p4z**2*premx**3 - 4*enRem**2*p4z**4*premx**3 + 4*enRem*mwm2*p4x**2*p4Norm*premx**3 - 8*enRem*p2z*p4x**2*p4z*p4Norm*premx**3 + 4*enRem*mwm2*p4z**2*p4Norm*premx**3 - 8*enRem*p2z*p4z**3*p4Norm*premx**3 + 4*enRem*p4x**3*p4Norm*premx**4 + 4*enRem*p4x*p4z**2*p4Norm*premx**4 + 4*p4x**4*premx**5 + 8*p4x**2*p4z**2*premx**5 + 4*p4z**4*premx**5 + 4*enRem**4*p4x**3*p4y*premy + 4*enRem**4*p4x*p4y**3*premy + 8*enRem**4*p4x*p4y*p4z**2*premy - 8*enRem**3*mwm2*p4x*p4y*p4Norm*premy + 16*enRem**3*p2z*p4x*p4y*p4z*p4Norm*premy - 4*enRem**2*mwm2*p4x**2*p4y*premx*premy + 4*enRem**2*mwm2*p4y**3*premx*premy + 8*enRem**2*p2z*p4x**2*p4y*p4z*premx*premy - 8*enRem**2*p2z*p4y**3*p4z*premx*premy + 8*enRem**2*mwm2*p4y*p4z**2*premx*premy - 16*enRem**2*p2z*p4y*p4z**3*premx*premy - 8*enRem**3*p4x**2*p4y*p4Norm*premx*premy - 8*enRem**3*p4y*p4z**2*p4Norm*premx*premy - 16*enRem**2*p4x**3*p4y*premx**2*premy - 4*enRem**2*p4x*p4y**3*premx**2*premy - 20*enRem**2*p4x*p4y*p4z**2*premx**2*premy - 4*mwm2*p4x**2*p4y*premx**3*premy + 8*p2z*p4x**2*p4y*p4z*premx**3*premy - 4*mwm2*p4y*p4z**2*premx**3*premy + 8*p2z*p4y*p4z**3*premx**3*premy + 8*enRem*p4x**2*p4y*p4Norm*premx**3*premy + 8*enRem*p4y*p4z**2*p4Norm*premx**3*premy + 12*p4x**3*p4y*premx**4*premy + 12*p4x*p4y*p4z**2*premx**4*premy + 4*enRem**2*mwm2*p4x**3*premy**2 - 8*enRem**2*p2z*p4x**3*p4z*premy**2 - 4*enRem**2*mwm2*p4x*p4z**2*premy**2 + 8*enRem**2*p2z*p4x*p4z**3*premy**2 - 4*enRem**3*p4x**3*p4Norm*premy**2 - 8*enRem**3*p4x*p4y**2*p4Norm*premy**2 + 4*enRem**3*p4x*p4z**2*p4Norm*premy**2 - 4*enRem**2*p4x**4*premx*premy**2 - 16*enRem**2*p4x**2*p4y**2*premx*premy**2 - 8*enRem**2*p4x**2*p4z**2*premx*premy**2 - 4*enRem**2*p4z**4*premx*premy**2 + 8*enRem*mwm2*p4x**2*p4Norm*premx*premy**2 - 4*enRem*mwm2*p4y**2*p4Norm*premx*premy**2 - 16*enRem*p2z*p4x**2*p4z*p4Norm*premx*premy**2 + 8*enRem*p2z*p4y**2*p4z*p4Norm*premx*premy**2 + 4*enRem*mwm2*p4z**2*p4Norm*premx*premy**2 - 8*enRem*p2z*p4z**3*p4Norm*premx*premy**2 + 4*mwm2*p4x**3*premx**2*premy**2 - 8*mwm2*p4x*p4y**2*premx**2*premy**2 - 8*p2z*p4x**3*p4z*premx**2*premy**2 + 16*p2z*p4x*p4y**2*p4z*premx**2*premy**2 + 4*mwm2*p4x*p4z**2*premx**2*premy**2 - 8*p2z*p4x*p4z**3*premx**2*premy**2 + 4*enRem*p4x**3*p4Norm*premx**2*premy**2 + 4*enRem*p4x*p4y**2*p4Norm*premx**2*premy**2 + 4*p4x**4*premx**3*premy**2 + 12*p4x**2*p4y**2*premx**3*premy**2 + 12*p4x**2*p4z**2*premx**3*premy**2 + 4*p4y**2*p4z**2*premx**3*premy**2 + 8*p4z**4*premx**3*premy**2 - 4*enRem**2*p4x**3*p4y*premy**3 - 8*enRem**2*p4x*p4y**3*premy**3 - 12*enRem**2*p4x*p4y*p4z**2*premy**3 + 8*enRem*mwm2*p4x*p4y*p4Norm*premy**3 - 16*enRem*p2z*p4x*p4y*p4z*p4Norm*premy**3 + 8*mwm2*p4x**2*p4y*premx*premy**3 - 4*mwm2*p4y**3*premx*premy**3 - 16*p2z*p4x**2*p4y*p4z*premx*premy**3 + 8*p2z*p4y**3*p4z*premx*premy**3 - 4*mwm2*p4y*p4z**2*premx*premy**3 + 8*p2z*p4y*p4z**3*premx*premy**3 + 8*enRem*p4x**2*p4y*p4Norm*premx*premy**3 + 8*enRem*p4y*p4z**2*p4Norm*premx*premy**3 + 12*p4x**3*p4y*premx**2*premy**3 + 4*p4x*p4y**3*premx**2*premy**3 + 16*p4x*p4y*p4z**2*premx**2*premy**3 + 4*mwm2*p4x*p4y**2*premy**4 - 8*p2z*p4x*p4y**2*p4z*premy**4 + 4*mwm2*p4x*p4z**2*premy**4 - 8*p2z*p4x*p4z**3*premy**4 + 4*enRem*p4x*p4y**2*p4Norm*premy**4 - 4*enRem*p4x*p4z**2*p4Norm*premy**4 + 12*p4x**2*p4y**2*premx*premy**4 + 4*p4x**2*p4z**2*premx*premy**4 + 4*p4y**2*p4z**2*premx*premy**4 + 4*p4z**4*premx*premy**4 + 4*p4x*p4y**3*premy**5 + 4*p4x*p4y*p4z**2*premy**5 - 8*enRem**4*p4x**3*p4z*premz - 8*enRem**4*p4x*p4y**2*p4z*premz - 8*enRem**3*p2z*p4x**3*p4Norm*premz - 8*enRem**3*p2z*p4x*p4y**2*p4Norm*premz - 8*enRem**2*p2z*p4x**4*premx*premz - 8*enRem**2*p2z*p4x**2*p4y**2*premx*premz - 8*enRem**2*p2z*p4x**2*p4z**2*premx*premz + 8*enRem**2*p2z*p4y**2*p4z**2*premx*premz - 8*enRem**3*p4x**2*p4z*p4Norm*premx*premz + 8*enRem**3*p4y**2*p4z*p4Norm*premx*premz + 8*enRem**2*p4x**3*p4z*premx**2*premz + 16*enRem**2*p4x*p4y**2*p4z*premx**2*premz + 8*enRem**2*p4x*p4z**3*premx**2*premz + 8*enRem*p2z*p4x**3*p4Norm*premx**2*premz + 8*enRem*p2z*p4x*p4z**2*p4Norm*premx**2*premz + 8*p2z*p4x**4*premx**3*premz + 16*p2z*p4x**2*p4z**2*premx**3*premz + 8*p2z*p4z**4*premx**3*premz + 8*enRem*p4x**2*p4z*p4Norm*premx**3*premz + 8*enRem*p4z**3*p4Norm*premx**3*premz - 8*enRem**2*p2z*p4x**3*p4y*premy*premz - 8*enRem**2*p2z*p4x*p4y**3*premy*premz - 16*enRem**2*p2z*p4x*p4y*p4z**2*premy*premz - 16*enRem**3*p4x*p4y*p4z*p4Norm*premy*premz - 8*enRem**2*p4x**2*p4y*p4z*premx*premy*premz + 8*enRem**2*p4y**3*p4z*premx*premy*premz + 16*enRem**2*p4y*p4z**3*premx*premy*premz + 16*enRem*p2z*p4x**2*p4y*p4Norm*premx*premy*premz + 16*enRem*p2z*p4y*p4z**2*p4Norm*premx*premy*premz + 24*p2z*p4x**3*p4y*premx**2*premy*premz + 24*p2z*p4x*p4y*p4z**2*premx**2*premy*premz - 8*p4x**2*p4y*p4z*premx**3*premy*premz - 8*p4y*p4z**3*premx**3*premy*premz + 8*enRem**2*p4x**3*p4z*premy**2*premz - 8*enRem**2*p4x*p4z**3*premy**2*premz + 8*enRem*p2z*p4x*p4y**2*p4Norm*premy**2*premz - 8*enRem*p2z*p4x*p4z**2*p4Norm*premy**2*premz + 24*p2z*p4x**2*p4y**2*premx*premy**2*premz + 8*p2z*p4x**2*p4z**2*premx*premy**2*premz + 8*p2z*p4y**2*p4z**2*premx*premy**2*premz + 8*p2z*p4z**4*premx*premy**2*premz + 16*enRem*p4x**2*p4z*p4Norm*premx*premy**2*premz - 8*enRem*p4y**2*p4z*p4Norm*premx*premy**2*premz + 8*enRem*p4z**3*p4Norm*premx*premy**2*premz + 8*p4x**3*p4z*premx**2*premy**2*premz - 16*p4x*p4y**2*p4z*premx**2*premy**2*premz + 8*p4x*p4z**3*premx**2*premy**2*premz + 8*p2z*p4x*p4y**3*premy**3*premz + 8*p2z*p4x*p4y*p4z**2*premy**3*premz + 16*enRem*p4x*p4y*p4z*p4Norm*premy**3*premz + 16*p4x**2*p4y*p4z*premx*premy**3*premz - 8*p4y**3*p4z*premx*premy**3*premz - 8*p4y*p4z**3*premx*premy**3*premz + 8*p4x*p4y**2*p4z*premy**4*premz + 8*p4x*p4z**3*premy**4*premz + 4*enRem**3*p4x**3*p4Norm*premz**2 + 4*enRem**3*p4x*p4y**2*p4Norm*premz**2 + 4*enRem**2*p4x**4*premx*premz**2 + 4*enRem**2*p4x**2*p4y**2*premx*premz**2 + 4*enRem**2*p4x**2*p4z**2*premx*premz**2 - 4*enRem**2*p4y**2*p4z**2*premx*premz**2 - 4*enRem*p4x**3*p4Norm*premx**2*premz**2 - 4*enRem*p4x*p4z**2*p4Norm*premx**2*premz**2 - 4*p4x**4*premx**3*premz**2 - 8*p4x**2*p4z**2*premx**3*premz**2 - 4*p4z**4*premx**3*premz**2 + 4*enRem**2*p4x**3*p4y*premy*premz**2 + 4*enRem**2*p4x*p4y**3*premy*premz**2 + 8*enRem**2*p4x*p4y*p4z**2*premy*premz**2 - 8*enRem*p4x**2*p4y*p4Norm*premx*premy*premz**2 - 8*enRem*p4y*p4z**2*p4Norm*premx*premy*premz**2 - 12*p4x**3*p4y*premx**2*premy*premz**2 - 12*p4x*p4y*p4z**2*premx**2*premy*premz**2 - 4*enRem*p4x*p4y**2*p4Norm*premy**2*premz**2 + 4*enRem*p4x*p4z**2*p4Norm*premy**2*premz**2 - 12*p4x**2*p4y**2*premx*premy**2*premz**2 - 4*p4x**2*p4z**2*premx*premy**2*premz**2 - 4*p4y**2*p4z**2*premx*premy**2*premz**2 - 4*p4z**4*premx*premy**2*premz**2 - 4*p4x*p4y**3*premy**3*premz**2 - 4*p4x*p4y*p4z**2*premy**3*premz**2 - np.sqrt(underSqrt)))/(4*enRem**4*p4x**4 + 8*enRem**4*p4x**2*p4y**2 + 4*enRem**4*p4y**4 - 8*enRem**2*p4x**4*premx**2 - 8*enRem**2*p4x**2*p4y**2*premx**2 - 8*enRem**2*p4x**2*p4z**2*premx**2 + 8*enRem**2*p4y**2*p4z**2*premx**2 + 4*p4x**4*premx**4 + 8*p4x**2*p4z**2*premx**4 + 4*p4z**4*premx**4 - 16*enRem**2*p4x**3*p4y*premx*premy - 16*enRem**2*p4x*p4y**3*premx*premy - 32*enRem**2*p4x*p4y*p4z**2*premx*premy + 16*p4x**3*p4y*premx**3*premy + 16*p4x*p4y*p4z**2*premx**3*premy - 8*enRem**2*p4x**2*p4y**2*premy**2 - 8*enRem**2*p4y**4*premy**2 + 8*enRem**2*p4x**2*p4z**2*premy**2 - 8*enRem**2*p4y**2*p4z**2*premy**2 + 24*p4x**2*p4y**2*premx**2*premy**2 + 8*p4x**2*p4z**2*premx**2*premy**2 + 8*p4y**2*p4z**2*premx**2*premy**2 + 8*p4z**4*premx**2*premy**2 + 16*p4x*p4y**3*premx*premy**3 + 16*p4x*p4y*p4z**2*premx*premy**3 + 4*p4y**4*premy**4 + 8*p4y**2*p4z**2*premy**4 + 4*p4z**4*premy**4) + (enRem*p4y*p4Norm*premx*(-4*enRem**4*mwm2*p4x**3 - 4*enRem**4*mwm2*p4x*p4y**2 + 8*enRem**4*p2z*p4x**3*p4z + 8*enRem**4*p2z*p4x*p4y**2*p4z + 4*enRem**5*p4x**3*p4Norm + 4*enRem**5*p4x*p4y**2*p4Norm + 4*enRem**4*p4x**4*premx + 4*enRem**4*p4x**2*p4y**2*premx + 4*enRem**4*p4x**2*p4z**2*premx - 4*enRem**4*p4y**2*p4z**2*premx - 4*enRem**3*mwm2*p4x**2*p4Norm*premx + 4*enRem**3*mwm2*p4y**2*p4Norm*premx + 8*enRem**3*p2z*p4x**2*p4z*p4Norm*premx - 8*enRem**3*p2z*p4y**2*p4z*p4Norm*premx + 4*enRem**2*mwm2*p4x**3*premx**2 + 8*enRem**2*mwm2*p4x*p4y**2*premx**2 - 8*enRem**2*p2z*p4x**3*p4z*premx**2 - 16*enRem**2*p2z*p4x*p4y**2*p4z*premx**2 + 4*enRem**2*mwm2*p4x*p4z**2*premx**2 - 8*enRem**2*p2z*p4x*p4z**3*premx**2 - 8*enRem**3*p4x**3*p4Norm*premx**2 - 4*enRem**3*p4x*p4y**2*p4Norm*premx**2 - 4*enRem**3*p4x*p4z**2*p4Norm*premx**2 - 8*enRem**2*p4x**4*premx**3 - 4*enRem**2*p4x**2*p4y**2*premx**3 - 12*enRem**2*p4x**2*p4z**2*premx**3 + 4*enRem**2*p4y**2*p4z**2*premx**3 - 4*enRem**2*p4z**4*premx**3 + 4*enRem*mwm2*p4x**2*p4Norm*premx**3 - 8*enRem*p2z*p4x**2*p4z*p4Norm*premx**3 + 4*enRem*mwm2*p4z**2*p4Norm*premx**3 - 8*enRem*p2z*p4z**3*p4Norm*premx**3 + 4*enRem*p4x**3*p4Norm*premx**4 + 4*enRem*p4x*p4z**2*p4Norm*premx**4 + 4*p4x**4*premx**5 + 8*p4x**2*p4z**2*premx**5 + 4*p4z**4*premx**5 + 4*enRem**4*p4x**3*p4y*premy + 4*enRem**4*p4x*p4y**3*premy + 8*enRem**4*p4x*p4y*p4z**2*premy - 8*enRem**3*mwm2*p4x*p4y*p4Norm*premy + 16*enRem**3*p2z*p4x*p4y*p4z*p4Norm*premy - 4*enRem**2*mwm2*p4x**2*p4y*premx*premy + 4*enRem**2*mwm2*p4y**3*premx*premy + 8*enRem**2*p2z*p4x**2*p4y*p4z*premx*premy - 8*enRem**2*p2z*p4y**3*p4z*premx*premy + 8*enRem**2*mwm2*p4y*p4z**2*premx*premy - 16*enRem**2*p2z*p4y*p4z**3*premx*premy - 8*enRem**3*p4x**2*p4y*p4Norm*premx*premy - 8*enRem**3*p4y*p4z**2*p4Norm*premx*premy - 16*enRem**2*p4x**3*p4y*premx**2*premy - 4*enRem**2*p4x*p4y**3*premx**2*premy - 20*enRem**2*p4x*p4y*p4z**2*premx**2*premy - 4*mwm2*p4x**2*p4y*premx**3*premy + 8*p2z*p4x**2*p4y*p4z*premx**3*premy - 4*mwm2*p4y*p4z**2*premx**3*premy + 8*p2z*p4y*p4z**3*premx**3*premy + 8*enRem*p4x**2*p4y*p4Norm*premx**3*premy + 8*enRem*p4y*p4z**2*p4Norm*premx**3*premy + 12*p4x**3*p4y*premx**4*premy + 12*p4x*p4y*p4z**2*premx**4*premy + 4*enRem**2*mwm2*p4x**3*premy**2 - 8*enRem**2*p2z*p4x**3*p4z*premy**2 - 4*enRem**2*mwm2*p4x*p4z**2*premy**2 + 8*enRem**2*p2z*p4x*p4z**3*premy**2 - 4*enRem**3*p4x**3*p4Norm*premy**2 - 8*enRem**3*p4x*p4y**2*p4Norm*premy**2 + 4*enRem**3*p4x*p4z**2*p4Norm*premy**2 - 4*enRem**2*p4x**4*premx*premy**2 - 16*enRem**2*p4x**2*p4y**2*premx*premy**2 - 8*enRem**2*p4x**2*p4z**2*premx*premy**2 - 4*enRem**2*p4z**4*premx*premy**2 + 8*enRem*mwm2*p4x**2*p4Norm*premx*premy**2 - 4*enRem*mwm2*p4y**2*p4Norm*premx*premy**2 - 16*enRem*p2z*p4x**2*p4z*p4Norm*premx*premy**2 + 8*enRem*p2z*p4y**2*p4z*p4Norm*premx*premy**2 + 4*enRem*mwm2*p4z**2*p4Norm*premx*premy**2 - 8*enRem*p2z*p4z**3*p4Norm*premx*premy**2 + 4*mwm2*p4x**3*premx**2*premy**2 - 8*mwm2*p4x*p4y**2*premx**2*premy**2 - 8*p2z*p4x**3*p4z*premx**2*premy**2 + 16*p2z*p4x*p4y**2*p4z*premx**2*premy**2 + 4*mwm2*p4x*p4z**2*premx**2*premy**2 - 8*p2z*p4x*p4z**3*premx**2*premy**2 + 4*enRem*p4x**3*p4Norm*premx**2*premy**2 + 4*enRem*p4x*p4y**2*p4Norm*premx**2*premy**2 + 4*p4x**4*premx**3*premy**2 + 12*p4x**2*p4y**2*premx**3*premy**2 + 12*p4x**2*p4z**2*premx**3*premy**2 + 4*p4y**2*p4z**2*premx**3*premy**2 + 8*p4z**4*premx**3*premy**2 - 4*enRem**2*p4x**3*p4y*premy**3 - 8*enRem**2*p4x*p4y**3*premy**3 - 12*enRem**2*p4x*p4y*p4z**2*premy**3 + 8*enRem*mwm2*p4x*p4y*p4Norm*premy**3 - 16*enRem*p2z*p4x*p4y*p4z*p4Norm*premy**3 + 8*mwm2*p4x**2*p4y*premx*premy**3 - 4*mwm2*p4y**3*premx*premy**3 - 16*p2z*p4x**2*p4y*p4z*premx*premy**3 + 8*p2z*p4y**3*p4z*premx*premy**3 - 4*mwm2*p4y*p4z**2*premx*premy**3 + 8*p2z*p4y*p4z**3*premx*premy**3 + 8*enRem*p4x**2*p4y*p4Norm*premx*premy**3 + 8*enRem*p4y*p4z**2*p4Norm*premx*premy**3 + 12*p4x**3*p4y*premx**2*premy**3 + 4*p4x*p4y**3*premx**2*premy**3 + 16*p4x*p4y*p4z**2*premx**2*premy**3 + 4*mwm2*p4x*p4y**2*premy**4 - 8*p2z*p4x*p4y**2*p4z*premy**4 + 4*mwm2*p4x*p4z**2*premy**4 - 8*p2z*p4x*p4z**3*premy**4 + 4*enRem*p4x*p4y**2*p4Norm*premy**4 - 4*enRem*p4x*p4z**2*p4Norm*premy**4 + 12*p4x**2*p4y**2*premx*premy**4 + 4*p4x**2*p4z**2*premx*premy**4 + 4*p4y**2*p4z**2*premx*premy**4 + 4*p4z**4*premx*premy**4 + 4*p4x*p4y**3*premy**5 + 4*p4x*p4y*p4z**2*premy**5 - 8*enRem**4*p4x**3*p4z*premz - 8*enRem**4*p4x*p4y**2*p4z*premz - 8*enRem**3*p2z*p4x**3*p4Norm*premz - 8*enRem**3*p2z*p4x*p4y**2*p4Norm*premz - 8*enRem**2*p2z*p4x**4*premx*premz - 8*enRem**2*p2z*p4x**2*p4y**2*premx*premz - 8*enRem**2*p2z*p4x**2*p4z**2*premx*premz + 8*enRem**2*p2z*p4y**2*p4z**2*premx*premz - 8*enRem**3*p4x**2*p4z*p4Norm*premx*premz + 8*enRem**3*p4y**2*p4z*p4Norm*premx*premz + 8*enRem**2*p4x**3*p4z*premx**2*premz + 16*enRem**2*p4x*p4y**2*p4z*premx**2*premz + 8*enRem**2*p4x*p4z**3*premx**2*premz + 8*enRem*p2z*p4x**3*p4Norm*premx**2*premz + 8*enRem*p2z*p4x*p4z**2*p4Norm*premx**2*premz + 8*p2z*p4x**4*premx**3*premz + 16*p2z*p4x**2*p4z**2*premx**3*premz + 8*p2z*p4z**4*premx**3*premz + 8*enRem*p4x**2*p4z*p4Norm*premx**3*premz + 8*enRem*p4z**3*p4Norm*premx**3*premz - 8*enRem**2*p2z*p4x**3*p4y*premy*premz - 8*enRem**2*p2z*p4x*p4y**3*premy*premz - 16*enRem**2*p2z*p4x*p4y*p4z**2*premy*premz - 16*enRem**3*p4x*p4y*p4z*p4Norm*premy*premz - 8*enRem**2*p4x**2*p4y*p4z*premx*premy*premz + 8*enRem**2*p4y**3*p4z*premx*premy*premz + 16*enRem**2*p4y*p4z**3*premx*premy*premz + 16*enRem*p2z*p4x**2*p4y*p4Norm*premx*premy*premz + 16*enRem*p2z*p4y*p4z**2*p4Norm*premx*premy*premz + 24*p2z*p4x**3*p4y*premx**2*premy*premz + 24*p2z*p4x*p4y*p4z**2*premx**2*premy*premz - 8*p4x**2*p4y*p4z*premx**3*premy*premz - 8*p4y*p4z**3*premx**3*premy*premz + 8*enRem**2*p4x**3*p4z*premy**2*premz - 8*enRem**2*p4x*p4z**3*premy**2*premz + 8*enRem*p2z*p4x*p4y**2*p4Norm*premy**2*premz - 8*enRem*p2z*p4x*p4z**2*p4Norm*premy**2*premz + 24*p2z*p4x**2*p4y**2*premx*premy**2*premz + 8*p2z*p4x**2*p4z**2*premx*premy**2*premz + 8*p2z*p4y**2*p4z**2*premx*premy**2*premz + 8*p2z*p4z**4*premx*premy**2*premz + 16*enRem*p4x**2*p4z*p4Norm*premx*premy**2*premz - 8*enRem*p4y**2*p4z*p4Norm*premx*premy**2*premz + 8*enRem*p4z**3*p4Norm*premx*premy**2*premz + 8*p4x**3*p4z*premx**2*premy**2*premz - 16*p4x*p4y**2*p4z*premx**2*premy**2*premz + 8*p4x*p4z**3*premx**2*premy**2*premz + 8*p2z*p4x*p4y**3*premy**3*premz + 8*p2z*p4x*p4y*p4z**2*premy**3*premz + 16*enRem*p4x*p4y*p4z*p4Norm*premy**3*premz + 16*p4x**2*p4y*p4z*premx*premy**3*premz - 8*p4y**3*p4z*premx*premy**3*premz - 8*p4y*p4z**3*premx*premy**3*premz + 8*p4x*p4y**2*p4z*premy**4*premz + 8*p4x*p4z**3*premy**4*premz + 4*enRem**3*p4x**3*p4Norm*premz**2 + 4*enRem**3*p4x*p4y**2*p4Norm*premz**2 + 4*enRem**2*p4x**4*premx*premz**2 + 4*enRem**2*p4x**2*p4y**2*premx*premz**2 + 4*enRem**2*p4x**2*p4z**2*premx*premz**2 - 4*enRem**2*p4y**2*p4z**2*premx*premz**2 - 4*enRem*p4x**3*p4Norm*premx**2*premz**2 - 4*enRem*p4x*p4z**2*p4Norm*premx**2*premz**2 - 4*p4x**4*premx**3*premz**2 - 8*p4x**2*p4z**2*premx**3*premz**2 - 4*p4z**4*premx**3*premz**2 + 4*enRem**2*p4x**3*p4y*premy*premz**2 + 4*enRem**2*p4x*p4y**3*premy*premz**2 + 8*enRem**2*p4x*p4y*p4z**2*premy*premz**2 - 8*enRem*p4x**2*p4y*p4Norm*premx*premy*premz**2 - 8*enRem*p4y*p4z**2*p4Norm*premx*premy*premz**2 - 12*p4x**3*p4y*premx**2*premy*premz**2 - 12*p4x*p4y*p4z**2*premx**2*premy*premz**2 - 4*enRem*p4x*p4y**2*p4Norm*premy**2*premz**2 + 4*enRem*p4x*p4z**2*p4Norm*premy**2*premz**2 - 12*p4x**2*p4y**2*premx*premy**2*premz**2 - 4*p4x**2*p4z**2*premx*premy**2*premz**2 - 4*p4y**2*p4z**2*premx*premy**2*premz**2 - 4*p4z**4*premx*premy**2*premz**2 - 4*p4x*p4y**3*premy**3*premz**2 - 4*p4x*p4y*p4z**2*premy**3*premz**2 - np.sqrt(underSqrt)))/(4*enRem**4*p4x**4 + 8*enRem**4*p4x**2*p4y**2 + 4*enRem**4*p4y**4 - 8*enRem**2*p4x**4*premx**2 - 8*enRem**2*p4x**2*p4y**2*premx**2 - 8*enRem**2*p4x**2*p4z**2*premx**2 + 8*enRem**2*p4y**2*p4z**2*premx**2 + 4*p4x**4*premx**4 + 8*p4x**2*p4z**2*premx**4 + 4*p4z**4*premx**4 - 16*enRem**2*p4x**3*p4y*premx*premy - 16*enRem**2*p4x*p4y**3*premx*premy - 32*enRem**2*p4x*p4y*p4z**2*premx*premy + 16*p4x**3*p4y*premx**3*premy + 16*p4x*p4y*p4z**2*premx**3*premy - 8*enRem**2*p4x**2*p4y**2*premy**2 - 8*enRem**2*p4y**4*premy**2 + 8*enRem**2*p4x**2*p4z**2*premy**2 - 8*enRem**2*p4y**2*p4z**2*premy**2 + 24*p4x**2*p4y**2*premx**2*premy**2 + 8*p4x**2*p4z**2*premx**2*premy**2 + 8*p4y**2*p4z**2*premx**2*premy**2 + 8*p4z**4*premx**2*premy**2 + 16*p4x*p4y**3*premx*premy**3 + 16*p4x*p4y*p4z**2*premx*premy**3 + 4*p4y**4*premy**4 + 8*p4y**2*p4z**2*premy**4 + 4*p4z**4*premy**4) - (enRem*p4x*p4Norm*premy*(-4*enRem**4*mwm2*p4x**3 - 4*enRem**4*mwm2*p4x*p4y**2 + 8*enRem**4*p2z*p4x**3*p4z + 8*enRem**4*p2z*p4x*p4y**2*p4z + 4*enRem**5*p4x**3*p4Norm + 4*enRem**5*p4x*p4y**2*p4Norm + 4*enRem**4*p4x**4*premx + 4*enRem**4*p4x**2*p4y**2*premx + 4*enRem**4*p4x**2*p4z**2*premx - 4*enRem**4*p4y**2*p4z**2*premx - 4*enRem**3*mwm2*p4x**2*p4Norm*premx + 4*enRem**3*mwm2*p4y**2*p4Norm*premx + 8*enRem**3*p2z*p4x**2*p4z*p4Norm*premx - 8*enRem**3*p2z*p4y**2*p4z*p4Norm*premx + 4*enRem**2*mwm2*p4x**3*premx**2 + 8*enRem**2*mwm2*p4x*p4y**2*premx**2 - 8*enRem**2*p2z*p4x**3*p4z*premx**2 - 16*enRem**2*p2z*p4x*p4y**2*p4z*premx**2 + 4*enRem**2*mwm2*p4x*p4z**2*premx**2 - 8*enRem**2*p2z*p4x*p4z**3*premx**2 - 8*enRem**3*p4x**3*p4Norm*premx**2 - 4*enRem**3*p4x*p4y**2*p4Norm*premx**2 - 4*enRem**3*p4x*p4z**2*p4Norm*premx**2 - 8*enRem**2*p4x**4*premx**3 - 4*enRem**2*p4x**2*p4y**2*premx**3 - 12*enRem**2*p4x**2*p4z**2*premx**3 + 4*enRem**2*p4y**2*p4z**2*premx**3 - 4*enRem**2*p4z**4*premx**3 + 4*enRem*mwm2*p4x**2*p4Norm*premx**3 - 8*enRem*p2z*p4x**2*p4z*p4Norm*premx**3 + 4*enRem*mwm2*p4z**2*p4Norm*premx**3 - 8*enRem*p2z*p4z**3*p4Norm*premx**3 + 4*enRem*p4x**3*p4Norm*premx**4 + 4*enRem*p4x*p4z**2*p4Norm*premx**4 + 4*p4x**4*premx**5 + 8*p4x**2*p4z**2*premx**5 + 4*p4z**4*premx**5 + 4*enRem**4*p4x**3*p4y*premy + 4*enRem**4*p4x*p4y**3*premy + 8*enRem**4*p4x*p4y*p4z**2*premy - 8*enRem**3*mwm2*p4x*p4y*p4Norm*premy + 16*enRem**3*p2z*p4x*p4y*p4z*p4Norm*premy - 4*enRem**2*mwm2*p4x**2*p4y*premx*premy + 4*enRem**2*mwm2*p4y**3*premx*premy + 8*enRem**2*p2z*p4x**2*p4y*p4z*premx*premy - 8*enRem**2*p2z*p4y**3*p4z*premx*premy + 8*enRem**2*mwm2*p4y*p4z**2*premx*premy - 16*enRem**2*p2z*p4y*p4z**3*premx*premy - 8*enRem**3*p4x**2*p4y*p4Norm*premx*premy - 8*enRem**3*p4y*p4z**2*p4Norm*premx*premy - 16*enRem**2*p4x**3*p4y*premx**2*premy - 4*enRem**2*p4x*p4y**3*premx**2*premy - 20*enRem**2*p4x*p4y*p4z**2*premx**2*premy - 4*mwm2*p4x**2*p4y*premx**3*premy + 8*p2z*p4x**2*p4y*p4z*premx**3*premy - 4*mwm2*p4y*p4z**2*premx**3*premy + 8*p2z*p4y*p4z**3*premx**3*premy + 8*enRem*p4x**2*p4y*p4Norm*premx**3*premy + 8*enRem*p4y*p4z**2*p4Norm*premx**3*premy + 12*p4x**3*p4y*premx**4*premy + 12*p4x*p4y*p4z**2*premx**4*premy + 4*enRem**2*mwm2*p4x**3*premy**2 - 8*enRem**2*p2z*p4x**3*p4z*premy**2 - 4*enRem**2*mwm2*p4x*p4z**2*premy**2 + 8*enRem**2*p2z*p4x*p4z**3*premy**2 - 4*enRem**3*p4x**3*p4Norm*premy**2 - 8*enRem**3*p4x*p4y**2*p4Norm*premy**2 + 4*enRem**3*p4x*p4z**2*p4Norm*premy**2 - 4*enRem**2*p4x**4*premx*premy**2 - 16*enRem**2*p4x**2*p4y**2*premx*premy**2 - 8*enRem**2*p4x**2*p4z**2*premx*premy**2 - 4*enRem**2*p4z**4*premx*premy**2 + 8*enRem*mwm2*p4x**2*p4Norm*premx*premy**2 - 4*enRem*mwm2*p4y**2*p4Norm*premx*premy**2 - 16*enRem*p2z*p4x**2*p4z*p4Norm*premx*premy**2 + 8*enRem*p2z*p4y**2*p4z*p4Norm*premx*premy**2 + 4*enRem*mwm2*p4z**2*p4Norm*premx*premy**2 - 8*enRem*p2z*p4z**3*p4Norm*premx*premy**2 + 4*mwm2*p4x**3*premx**2*premy**2 - 8*mwm2*p4x*p4y**2*premx**2*premy**2 - 8*p2z*p4x**3*p4z*premx**2*premy**2 + 16*p2z*p4x*p4y**2*p4z*premx**2*premy**2 + 4*mwm2*p4x*p4z**2*premx**2*premy**2 - 8*p2z*p4x*p4z**3*premx**2*premy**2 + 4*enRem*p4x**3*p4Norm*premx**2*premy**2 + 4*enRem*p4x*p4y**2*p4Norm*premx**2*premy**2 + 4*p4x**4*premx**3*premy**2 + 12*p4x**2*p4y**2*premx**3*premy**2 + 12*p4x**2*p4z**2*premx**3*premy**2 + 4*p4y**2*p4z**2*premx**3*premy**2 + 8*p4z**4*premx**3*premy**2 - 4*enRem**2*p4x**3*p4y*premy**3 - 8*enRem**2*p4x*p4y**3*premy**3 - 12*enRem**2*p4x*p4y*p4z**2*premy**3 + 8*enRem*mwm2*p4x*p4y*p4Norm*premy**3 - 16*enRem*p2z*p4x*p4y*p4z*p4Norm*premy**3 + 8*mwm2*p4x**2*p4y*premx*premy**3 - 4*mwm2*p4y**3*premx*premy**3 - 16*p2z*p4x**2*p4y*p4z*premx*premy**3 + 8*p2z*p4y**3*p4z*premx*premy**3 - 4*mwm2*p4y*p4z**2*premx*premy**3 + 8*p2z*p4y*p4z**3*premx*premy**3 + 8*enRem*p4x**2*p4y*p4Norm*premx*premy**3 + 8*enRem*p4y*p4z**2*p4Norm*premx*premy**3 + 12*p4x**3*p4y*premx**2*premy**3 + 4*p4x*p4y**3*premx**2*premy**3 + 16*p4x*p4y*p4z**2*premx**2*premy**3 + 4*mwm2*p4x*p4y**2*premy**4 - 8*p2z*p4x*p4y**2*p4z*premy**4 + 4*mwm2*p4x*p4z**2*premy**4 - 8*p2z*p4x*p4z**3*premy**4 + 4*enRem*p4x*p4y**2*p4Norm*premy**4 - 4*enRem*p4x*p4z**2*p4Norm*premy**4 + 12*p4x**2*p4y**2*premx*premy**4 + 4*p4x**2*p4z**2*premx*premy**4 + 4*p4y**2*p4z**2*premx*premy**4 + 4*p4z**4*premx*premy**4 + 4*p4x*p4y**3*premy**5 + 4*p4x*p4y*p4z**2*premy**5 - 8*enRem**4*p4x**3*p4z*premz - 8*enRem**4*p4x*p4y**2*p4z*premz - 8*enRem**3*p2z*p4x**3*p4Norm*premz - 8*enRem**3*p2z*p4x*p4y**2*p4Norm*premz - 8*enRem**2*p2z*p4x**4*premx*premz - 8*enRem**2*p2z*p4x**2*p4y**2*premx*premz - 8*enRem**2*p2z*p4x**2*p4z**2*premx*premz + 8*enRem**2*p2z*p4y**2*p4z**2*premx*premz - 8*enRem**3*p4x**2*p4z*p4Norm*premx*premz + 8*enRem**3*p4y**2*p4z*p4Norm*premx*premz + 8*enRem**2*p4x**3*p4z*premx**2*premz + 16*enRem**2*p4x*p4y**2*p4z*premx**2*premz + 8*enRem**2*p4x*p4z**3*premx**2*premz + 8*enRem*p2z*p4x**3*p4Norm*premx**2*premz + 8*enRem*p2z*p4x*p4z**2*p4Norm*premx**2*premz + 8*p2z*p4x**4*premx**3*premz + 16*p2z*p4x**2*p4z**2*premx**3*premz + 8*p2z*p4z**4*premx**3*premz + 8*enRem*p4x**2*p4z*p4Norm*premx**3*premz + 8*enRem*p4z**3*p4Norm*premx**3*premz - 8*enRem**2*p2z*p4x**3*p4y*premy*premz - 8*enRem**2*p2z*p4x*p4y**3*premy*premz - 16*enRem**2*p2z*p4x*p4y*p4z**2*premy*premz - 16*enRem**3*p4x*p4y*p4z*p4Norm*premy*premz - 8*enRem**2*p4x**2*p4y*p4z*premx*premy*premz + 8*enRem**2*p4y**3*p4z*premx*premy*premz + 16*enRem**2*p4y*p4z**3*premx*premy*premz + 16*enRem*p2z*p4x**2*p4y*p4Norm*premx*premy*premz + 16*enRem*p2z*p4y*p4z**2*p4Norm*premx*premy*premz + 24*p2z*p4x**3*p4y*premx**2*premy*premz + 24*p2z*p4x*p4y*p4z**2*premx**2*premy*premz - 8*p4x**2*p4y*p4z*premx**3*premy*premz - 8*p4y*p4z**3*premx**3*premy*premz + 8*enRem**2*p4x**3*p4z*premy**2*premz - 8*enRem**2*p4x*p4z**3*premy**2*premz + 8*enRem*p2z*p4x*p4y**2*p4Norm*premy**2*premz - 8*enRem*p2z*p4x*p4z**2*p4Norm*premy**2*premz + 24*p2z*p4x**2*p4y**2*premx*premy**2*premz + 8*p2z*p4x**2*p4z**2*premx*premy**2*premz + 8*p2z*p4y**2*p4z**2*premx*premy**2*premz + 8*p2z*p4z**4*premx*premy**2*premz + 16*enRem*p4x**2*p4z*p4Norm*premx*premy**2*premz - 8*enRem*p4y**2*p4z*p4Norm*premx*premy**2*premz + 8*enRem*p4z**3*p4Norm*premx*premy**2*premz + 8*p4x**3*p4z*premx**2*premy**2*premz - 16*p4x*p4y**2*p4z*premx**2*premy**2*premz + 8*p4x*p4z**3*premx**2*premy**2*premz + 8*p2z*p4x*p4y**3*premy**3*premz + 8*p2z*p4x*p4y*p4z**2*premy**3*premz + 16*enRem*p4x*p4y*p4z*p4Norm*premy**3*premz + 16*p4x**2*p4y*p4z*premx*premy**3*premz - 8*p4y**3*p4z*premx*premy**3*premz - 8*p4y*p4z**3*premx*premy**3*premz + 8*p4x*p4y**2*p4z*premy**4*premz + 8*p4x*p4z**3*premy**4*premz + 4*enRem**3*p4x**3*p4Norm*premz**2 + 4*enRem**3*p4x*p4y**2*p4Norm*premz**2 + 4*enRem**2*p4x**4*premx*premz**2 + 4*enRem**2*p4x**2*p4y**2*premx*premz**2 + 4*enRem**2*p4x**2*p4z**2*premx*premz**2 - 4*enRem**2*p4y**2*p4z**2*premx*premz**2 - 4*enRem*p4x**3*p4Norm*premx**2*premz**2 - 4*enRem*p4x*p4z**2*p4Norm*premx**2*premz**2 - 4*p4x**4*premx**3*premz**2 - 8*p4x**2*p4z**2*premx**3*premz**2 - 4*p4z**4*premx**3*premz**2 + 4*enRem**2*p4x**3*p4y*premy*premz**2 + 4*enRem**2*p4x*p4y**3*premy*premz**2 + 8*enRem**2*p4x*p4y*p4z**2*premy*premz**2 - 8*enRem*p4x**2*p4y*p4Norm*premx*premy*premz**2 - 8*enRem*p4y*p4z**2*p4Norm*premx*premy*premz**2 - 12*p4x**3*p4y*premx**2*premy*premz**2 - 12*p4x*p4y*p4z**2*premx**2*premy*premz**2 - 4*enRem*p4x*p4y**2*p4Norm*premy**2*premz**2 + 4*enRem*p4x*p4z**2*p4Norm*premy**2*premz**2 - 12*p4x**2*p4y**2*premx*premy**2*premz**2 - 4*p4x**2*p4z**2*premx*premy**2*premz**2 - 4*p4y**2*p4z**2*premx*premy**2*premz**2 - 4*p4z**4*premx*premy**2*premz**2 - 4*p4x*p4y**3*premy**3*premz**2 - 4*p4x*p4y*p4z**2*premy**3*premz**2 - np.sqrt(underSqrt)))/(4*enRem**4*p4x**4 + 8*enRem**4*p4x**2*p4y**2 + 4*enRem**4*p4y**4 - 8*enRem**2*p4x**4*premx**2 - 8*enRem**2*p4x**2*p4y**2*premx**2 - 8*enRem**2*p4x**2*p4z**2*premx**2 + 8*enRem**2*p4y**2*p4z**2*premx**2 + 4*p4x**4*premx**4 + 8*p4x**2*p4z**2*premx**4 + 4*p4z**4*premx**4 - 16*enRem**2*p4x**3*p4y*premx*premy - 16*enRem**2*p4x*p4y**3*premx*premy - 32*enRem**2*p4x*p4y*p4z**2*premx*premy + 16*p4x**3*p4y*premx**3*premy + 16*p4x*p4y*p4z**2*premx**3*premy - 8*enRem**2*p4x**2*p4y**2*premy**2 - 8*enRem**2*p4y**4*premy**2 + 8*enRem**2*p4x**2*p4z**2*premy**2 - 8*enRem**2*p4y**2*p4z**2*premy**2 + 24*p4x**2*p4y**2*premx**2*premy**2 + 8*p4x**2*p4z**2*premx**2*premy**2 + 8*p4y**2*p4z**2*premx**2*premy**2 + 8*p4z**4*premx**2*premy**2 + 16*p4x*p4y**3*premx*premy**3 + 16*p4x*p4y*p4z**2*premx*premy**3 + 4*p4y**4*premy**4 + 8*p4y**2*p4z**2*premy**4 + 4*p4z**4*premy**4) + (p4x**2*premx*premy*(-4*enRem**4*mwm2*p4x**3 - 4*enRem**4*mwm2*p4x*p4y**2 + 8*enRem**4*p2z*p4x**3*p4z + 8*enRem**4*p2z*p4x*p4y**2*p4z + 4*enRem**5*p4x**3*p4Norm + 4*enRem**5*p4x*p4y**2*p4Norm + 4*enRem**4*p4x**4*premx + 4*enRem**4*p4x**2*p4y**2*premx + 4*enRem**4*p4x**2*p4z**2*premx - 4*enRem**4*p4y**2*p4z**2*premx - 4*enRem**3*mwm2*p4x**2*p4Norm*premx + 4*enRem**3*mwm2*p4y**2*p4Norm*premx + 8*enRem**3*p2z*p4x**2*p4z*p4Norm*premx - 8*enRem**3*p2z*p4y**2*p4z*p4Norm*premx + 4*enRem**2*mwm2*p4x**3*premx**2 + 8*enRem**2*mwm2*p4x*p4y**2*premx**2 - 8*enRem**2*p2z*p4x**3*p4z*premx**2 - 16*enRem**2*p2z*p4x*p4y**2*p4z*premx**2 + 4*enRem**2*mwm2*p4x*p4z**2*premx**2 - 8*enRem**2*p2z*p4x*p4z**3*premx**2 - 8*enRem**3*p4x**3*p4Norm*premx**2 - 4*enRem**3*p4x*p4y**2*p4Norm*premx**2 - 4*enRem**3*p4x*p4z**2*p4Norm*premx**2 - 8*enRem**2*p4x**4*premx**3 - 4*enRem**2*p4x**2*p4y**2*premx**3 - 12*enRem**2*p4x**2*p4z**2*premx**3 + 4*enRem**2*p4y**2*p4z**2*premx**3 - 4*enRem**2*p4z**4*premx**3 + 4*enRem*mwm2*p4x**2*p4Norm*premx**3 - 8*enRem*p2z*p4x**2*p4z*p4Norm*premx**3 + 4*enRem*mwm2*p4z**2*p4Norm*premx**3 - 8*enRem*p2z*p4z**3*p4Norm*premx**3 + 4*enRem*p4x**3*p4Norm*premx**4 + 4*enRem*p4x*p4z**2*p4Norm*premx**4 + 4*p4x**4*premx**5 + 8*p4x**2*p4z**2*premx**5 + 4*p4z**4*premx**5 + 4*enRem**4*p4x**3*p4y*premy + 4*enRem**4*p4x*p4y**3*premy + 8*enRem**4*p4x*p4y*p4z**2*premy - 8*enRem**3*mwm2*p4x*p4y*p4Norm*premy + 16*enRem**3*p2z*p4x*p4y*p4z*p4Norm*premy - 4*enRem**2*mwm2*p4x**2*p4y*premx*premy + 4*enRem**2*mwm2*p4y**3*premx*premy + 8*enRem**2*p2z*p4x**2*p4y*p4z*premx*premy - 8*enRem**2*p2z*p4y**3*p4z*premx*premy + 8*enRem**2*mwm2*p4y*p4z**2*premx*premy - 16*enRem**2*p2z*p4y*p4z**3*premx*premy - 8*enRem**3*p4x**2*p4y*p4Norm*premx*premy - 8*enRem**3*p4y*p4z**2*p4Norm*premx*premy - 16*enRem**2*p4x**3*p4y*premx**2*premy - 4*enRem**2*p4x*p4y**3*premx**2*premy - 20*enRem**2*p4x*p4y*p4z**2*premx**2*premy - 4*mwm2*p4x**2*p4y*premx**3*premy + 8*p2z*p4x**2*p4y*p4z*premx**3*premy - 4*mwm2*p4y*p4z**2*premx**3*premy + 8*p2z*p4y*p4z**3*premx**3*premy + 8*enRem*p4x**2*p4y*p4Norm*premx**3*premy + 8*enRem*p4y*p4z**2*p4Norm*premx**3*premy + 12*p4x**3*p4y*premx**4*premy + 12*p4x*p4y*p4z**2*premx**4*premy + 4*enRem**2*mwm2*p4x**3*premy**2 - 8*enRem**2*p2z*p4x**3*p4z*premy**2 - 4*enRem**2*mwm2*p4x*p4z**2*premy**2 + 8*enRem**2*p2z*p4x*p4z**3*premy**2 - 4*enRem**3*p4x**3*p4Norm*premy**2 - 8*enRem**3*p4x*p4y**2*p4Norm*premy**2 + 4*enRem**3*p4x*p4z**2*p4Norm*premy**2 - 4*enRem**2*p4x**4*premx*premy**2 - 16*enRem**2*p4x**2*p4y**2*premx*premy**2 - 8*enRem**2*p4x**2*p4z**2*premx*premy**2 - 4*enRem**2*p4z**4*premx*premy**2 + 8*enRem*mwm2*p4x**2*p4Norm*premx*premy**2 - 4*enRem*mwm2*p4y**2*p4Norm*premx*premy**2 - 16*enRem*p2z*p4x**2*p4z*p4Norm*premx*premy**2 + 8*enRem*p2z*p4y**2*p4z*p4Norm*premx*premy**2 + 4*enRem*mwm2*p4z**2*p4Norm*premx*premy**2 - 8*enRem*p2z*p4z**3*p4Norm*premx*premy**2 + 4*mwm2*p4x**3*premx**2*premy**2 - 8*mwm2*p4x*p4y**2*premx**2*premy**2 - 8*p2z*p4x**3*p4z*premx**2*premy**2 + 16*p2z*p4x*p4y**2*p4z*premx**2*premy**2 + 4*mwm2*p4x*p4z**2*premx**2*premy**2 - 8*p2z*p4x*p4z**3*premx**2*premy**2 + 4*enRem*p4x**3*p4Norm*premx**2*premy**2 + 4*enRem*p4x*p4y**2*p4Norm*premx**2*premy**2 + 4*p4x**4*premx**3*premy**2 + 12*p4x**2*p4y**2*premx**3*premy**2 + 12*p4x**2*p4z**2*premx**3*premy**2 + 4*p4y**2*p4z**2*premx**3*premy**2 + 8*p4z**4*premx**3*premy**2 - 4*enRem**2*p4x**3*p4y*premy**3 - 8*enRem**2*p4x*p4y**3*premy**3 - 12*enRem**2*p4x*p4y*p4z**2*premy**3 + 8*enRem*mwm2*p4x*p4y*p4Norm*premy**3 - 16*enRem*p2z*p4x*p4y*p4z*p4Norm*premy**3 + 8*mwm2*p4x**2*p4y*premx*premy**3 - 4*mwm2*p4y**3*premx*premy**3 - 16*p2z*p4x**2*p4y*p4z*premx*premy**3 + 8*p2z*p4y**3*p4z*premx*premy**3 - 4*mwm2*p4y*p4z**2*premx*premy**3 + 8*p2z*p4y*p4z**3*premx*premy**3 + 8*enRem*p4x**2*p4y*p4Norm*premx*premy**3 + 8*enRem*p4y*p4z**2*p4Norm*premx*premy**3 + 12*p4x**3*p4y*premx**2*premy**3 + 4*p4x*p4y**3*premx**2*premy**3 + 16*p4x*p4y*p4z**2*premx**2*premy**3 + 4*mwm2*p4x*p4y**2*premy**4 - 8*p2z*p4x*p4y**2*p4z*premy**4 + 4*mwm2*p4x*p4z**2*premy**4 - 8*p2z*p4x*p4z**3*premy**4 + 4*enRem*p4x*p4y**2*p4Norm*premy**4 - 4*enRem*p4x*p4z**2*p4Norm*premy**4 + 12*p4x**2*p4y**2*premx*premy**4 + 4*p4x**2*p4z**2*premx*premy**4 + 4*p4y**2*p4z**2*premx*premy**4 + 4*p4z**4*premx*premy**4 + 4*p4x*p4y**3*premy**5 + 4*p4x*p4y*p4z**2*premy**5 - 8*enRem**4*p4x**3*p4z*premz - 8*enRem**4*p4x*p4y**2*p4z*premz - 8*enRem**3*p2z*p4x**3*p4Norm*premz - 8*enRem**3*p2z*p4x*p4y**2*p4Norm*premz - 8*enRem**2*p2z*p4x**4*premx*premz - 8*enRem**2*p2z*p4x**2*p4y**2*premx*premz - 8*enRem**2*p2z*p4x**2*p4z**2*premx*premz + 8*enRem**2*p2z*p4y**2*p4z**2*premx*premz - 8*enRem**3*p4x**2*p4z*p4Norm*premx*premz + 8*enRem**3*p4y**2*p4z*p4Norm*premx*premz + 8*enRem**2*p4x**3*p4z*premx**2*premz + 16*enRem**2*p4x*p4y**2*p4z*premx**2*premz + 8*enRem**2*p4x*p4z**3*premx**2*premz + 8*enRem*p2z*p4x**3*p4Norm*premx**2*premz + 8*enRem*p2z*p4x*p4z**2*p4Norm*premx**2*premz + 8*p2z*p4x**4*premx**3*premz + 16*p2z*p4x**2*p4z**2*premx**3*premz + 8*p2z*p4z**4*premx**3*premz + 8*enRem*p4x**2*p4z*p4Norm*premx**3*premz + 8*enRem*p4z**3*p4Norm*premx**3*premz - 8*enRem**2*p2z*p4x**3*p4y*premy*premz - 8*enRem**2*p2z*p4x*p4y**3*premy*premz - 16*enRem**2*p2z*p4x*p4y*p4z**2*premy*premz - 16*enRem**3*p4x*p4y*p4z*p4Norm*premy*premz - 8*enRem**2*p4x**2*p4y*p4z*premx*premy*premz + 8*enRem**2*p4y**3*p4z*premx*premy*premz + 16*enRem**2*p4y*p4z**3*premx*premy*premz + 16*enRem*p2z*p4x**2*p4y*p4Norm*premx*premy*premz + 16*enRem*p2z*p4y*p4z**2*p4Norm*premx*premy*premz + 24*p2z*p4x**3*p4y*premx**2*premy*premz + 24*p2z*p4x*p4y*p4z**2*premx**2*premy*premz - 8*p4x**2*p4y*p4z*premx**3*premy*premz - 8*p4y*p4z**3*premx**3*premy*premz + 8*enRem**2*p4x**3*p4z*premy**2*premz - 8*enRem**2*p4x*p4z**3*premy**2*premz + 8*enRem*p2z*p4x*p4y**2*p4Norm*premy**2*premz - 8*enRem*p2z*p4x*p4z**2*p4Norm*premy**2*premz + 24*p2z*p4x**2*p4y**2*premx*premy**2*premz + 8*p2z*p4x**2*p4z**2*premx*premy**2*premz + 8*p2z*p4y**2*p4z**2*premx*premy**2*premz + 8*p2z*p4z**4*premx*premy**2*premz + 16*enRem*p4x**2*p4z*p4Norm*premx*premy**2*premz - 8*enRem*p4y**2*p4z*p4Norm*premx*premy**2*premz + 8*enRem*p4z**3*p4Norm*premx*premy**2*premz + 8*p4x**3*p4z*premx**2*premy**2*premz - 16*p4x*p4y**2*p4z*premx**2*premy**2*premz + 8*p4x*p4z**3*premx**2*premy**2*premz + 8*p2z*p4x*p4y**3*premy**3*premz + 8*p2z*p4x*p4y*p4z**2*premy**3*premz + 16*enRem*p4x*p4y*p4z*p4Norm*premy**3*premz + 16*p4x**2*p4y*p4z*premx*premy**3*premz - 8*p4y**3*p4z*premx*premy**3*premz - 8*p4y*p4z**3*premx*premy**3*premz + 8*p4x*p4y**2*p4z*premy**4*premz + 8*p4x*p4z**3*premy**4*premz + 4*enRem**3*p4x**3*p4Norm*premz**2 + 4*enRem**3*p4x*p4y**2*p4Norm*premz**2 + 4*enRem**2*p4x**4*premx*premz**2 + 4*enRem**2*p4x**2*p4y**2*premx*premz**2 + 4*enRem**2*p4x**2*p4z**2*premx*premz**2 - 4*enRem**2*p4y**2*p4z**2*premx*premz**2 - 4*enRem*p4x**3*p4Norm*premx**2*premz**2 - 4*enRem*p4x*p4z**2*p4Norm*premx**2*premz**2 - 4*p4x**4*premx**3*premz**2 - 8*p4x**2*p4z**2*premx**3*premz**2 - 4*p4z**4*premx**3*premz**2 + 4*enRem**2*p4x**3*p4y*premy*premz**2 + 4*enRem**2*p4x*p4y**3*premy*premz**2 + 8*enRem**2*p4x*p4y*p4z**2*premy*premz**2 - 8*enRem*p4x**2*p4y*p4Norm*premx*premy*premz**2 - 8*enRem*p4y*p4z**2*p4Norm*premx*premy*premz**2 - 12*p4x**3*p4y*premx**2*premy*premz**2 - 12*p4x*p4y*p4z**2*premx**2*premy*premz**2 - 4*enRem*p4x*p4y**2*p4Norm*premy**2*premz**2 + 4*enRem*p4x*p4z**2*p4Norm*premy**2*premz**2 - 12*p4x**2*p4y**2*premx*premy**2*premz**2 - 4*p4x**2*p4z**2*premx*premy**2*premz**2 - 4*p4y**2*p4z**2*premx*premy**2*premz**2 - 4*p4z**4*premx*premy**2*premz**2 - 4*p4x*p4y**3*premy**3*premz**2 - 4*p4x*p4y*p4z**2*premy**3*premz**2 - np.sqrt(underSqrt)))/(4*enRem**4*p4x**4 + 8*enRem**4*p4x**2*p4y**2 + 4*enRem**4*p4y**4 - 8*enRem**2*p4x**4*premx**2 - 8*enRem**2*p4x**2*p4y**2*premx**2 - 8*enRem**2*p4x**2*p4z**2*premx**2 + 8*enRem**2*p4y**2*p4z**2*premx**2 + 4*p4x**4*premx**4 + 8*p4x**2*p4z**2*premx**4 + 4*p4z**4*premx**4 - 16*enRem**2*p4x**3*p4y*premx*premy - 16*enRem**2*p4x*p4y**3*premx*premy - 32*enRem**2*p4x*p4y*p4z**2*premx*premy + 16*p4x**3*p4y*premx**3*premy + 16*p4x*p4y*p4z**2*premx**3*premy - 8*enRem**2*p4x**2*p4y**2*premy**2 - 8*enRem**2*p4y**4*premy**2 + 8*enRem**2*p4x**2*p4z**2*premy**2 - 8*enRem**2*p4y**2*p4z**2*premy**2 + 24*p4x**2*p4y**2*premx**2*premy**2 + 8*p4x**2*p4z**2*premx**2*premy**2 + 8*p4y**2*p4z**2*premx**2*premy**2 + 8*p4z**4*premx**2*premy**2 + 16*p4x*p4y**3*premx*premy**3 + 16*p4x*p4y*p4z**2*premx*premy**3 + 4*p4y**4*premy**4 + 8*p4y**2*p4z**2*premy**4 + 4*p4z**4*premy**4) + (p4y**2*premx*premy*(-4*enRem**4*mwm2*p4x**3 - 4*enRem**4*mwm2*p4x*p4y**2 + 8*enRem**4*p2z*p4x**3*p4z + 8*enRem**4*p2z*p4x*p4y**2*p4z + 4*enRem**5*p4x**3*p4Norm + 4*enRem**5*p4x*p4y**2*p4Norm + 4*enRem**4*p4x**4*premx + 4*enRem**4*p4x**2*p4y**2*premx + 4*enRem**4*p4x**2*p4z**2*premx - 4*enRem**4*p4y**2*p4z**2*premx - 4*enRem**3*mwm2*p4x**2*p4Norm*premx + 4*enRem**3*mwm2*p4y**2*p4Norm*premx + 8*enRem**3*p2z*p4x**2*p4z*p4Norm*premx - 8*enRem**3*p2z*p4y**2*p4z*p4Norm*premx + 4*enRem**2*mwm2*p4x**3*premx**2 + 8*enRem**2*mwm2*p4x*p4y**2*premx**2 - 8*enRem**2*p2z*p4x**3*p4z*premx**2 - 16*enRem**2*p2z*p4x*p4y**2*p4z*premx**2 + 4*enRem**2*mwm2*p4x*p4z**2*premx**2 - 8*enRem**2*p2z*p4x*p4z**3*premx**2 - 8*enRem**3*p4x**3*p4Norm*premx**2 - 4*enRem**3*p4x*p4y**2*p4Norm*premx**2 - 4*enRem**3*p4x*p4z**2*p4Norm*premx**2 - 8*enRem**2*p4x**4*premx**3 - 4*enRem**2*p4x**2*p4y**2*premx**3 - 12*enRem**2*p4x**2*p4z**2*premx**3 + 4*enRem**2*p4y**2*p4z**2*premx**3 - 4*enRem**2*p4z**4*premx**3 + 4*enRem*mwm2*p4x**2*p4Norm*premx**3 - 8*enRem*p2z*p4x**2*p4z*p4Norm*premx**3 + 4*enRem*mwm2*p4z**2*p4Norm*premx**3 - 8*enRem*p2z*p4z**3*p4Norm*premx**3 + 4*enRem*p4x**3*p4Norm*premx**4 + 4*enRem*p4x*p4z**2*p4Norm*premx**4 + 4*p4x**4*premx**5 + 8*p4x**2*p4z**2*premx**5 + 4*p4z**4*premx**5 + 4*enRem**4*p4x**3*p4y*premy + 4*enRem**4*p4x*p4y**3*premy + 8*enRem**4*p4x*p4y*p4z**2*premy - 8*enRem**3*mwm2*p4x*p4y*p4Norm*premy + 16*enRem**3*p2z*p4x*p4y*p4z*p4Norm*premy - 4*enRem**2*mwm2*p4x**2*p4y*premx*premy + 4*enRem**2*mwm2*p4y**3*premx*premy + 8*enRem**2*p2z*p4x**2*p4y*p4z*premx*premy - 8*enRem**2*p2z*p4y**3*p4z*premx*premy + 8*enRem**2*mwm2*p4y*p4z**2*premx*premy - 16*enRem**2*p2z*p4y*p4z**3*premx*premy - 8*enRem**3*p4x**2*p4y*p4Norm*premx*premy - 8*enRem**3*p4y*p4z**2*p4Norm*premx*premy - 16*enRem**2*p4x**3*p4y*premx**2*premy - 4*enRem**2*p4x*p4y**3*premx**2*premy - 20*enRem**2*p4x*p4y*p4z**2*premx**2*premy - 4*mwm2*p4x**2*p4y*premx**3*premy + 8*p2z*p4x**2*p4y*p4z*premx**3*premy - 4*mwm2*p4y*p4z**2*premx**3*premy + 8*p2z*p4y*p4z**3*premx**3*premy + 8*enRem*p4x**2*p4y*p4Norm*premx**3*premy + 8*enRem*p4y*p4z**2*p4Norm*premx**3*premy + 12*p4x**3*p4y*premx**4*premy + 12*p4x*p4y*p4z**2*premx**4*premy + 4*enRem**2*mwm2*p4x**3*premy**2 - 8*enRem**2*p2z*p4x**3*p4z*premy**2 - 4*enRem**2*mwm2*p4x*p4z**2*premy**2 + 8*enRem**2*p2z*p4x*p4z**3*premy**2 - 4*enRem**3*p4x**3*p4Norm*premy**2 - 8*enRem**3*p4x*p4y**2*p4Norm*premy**2 + 4*enRem**3*p4x*p4z**2*p4Norm*premy**2 - 4*enRem**2*p4x**4*premx*premy**2 - 16*enRem**2*p4x**2*p4y**2*premx*premy**2 - 8*enRem**2*p4x**2*p4z**2*premx*premy**2 - 4*enRem**2*p4z**4*premx*premy**2 + 8*enRem*mwm2*p4x**2*p4Norm*premx*premy**2 - 4*enRem*mwm2*p4y**2*p4Norm*premx*premy**2 - 16*enRem*p2z*p4x**2*p4z*p4Norm*premx*premy**2 + 8*enRem*p2z*p4y**2*p4z*p4Norm*premx*premy**2 + 4*enRem*mwm2*p4z**2*p4Norm*premx*premy**2 - 8*enRem*p2z*p4z**3*p4Norm*premx*premy**2 + 4*mwm2*p4x**3*premx**2*premy**2 - 8*mwm2*p4x*p4y**2*premx**2*premy**2 - 8*p2z*p4x**3*p4z*premx**2*premy**2 + 16*p2z*p4x*p4y**2*p4z*premx**2*premy**2 + 4*mwm2*p4x*p4z**2*premx**2*premy**2 - 8*p2z*p4x*p4z**3*premx**2*premy**2 + 4*enRem*p4x**3*p4Norm*premx**2*premy**2 + 4*enRem*p4x*p4y**2*p4Norm*premx**2*premy**2 + 4*p4x**4*premx**3*premy**2 + 12*p4x**2*p4y**2*premx**3*premy**2 + 12*p4x**2*p4z**2*premx**3*premy**2 + 4*p4y**2*p4z**2*premx**3*premy**2 + 8*p4z**4*premx**3*premy**2 - 4*enRem**2*p4x**3*p4y*premy**3 - 8*enRem**2*p4x*p4y**3*premy**3 - 12*enRem**2*p4x*p4y*p4z**2*premy**3 + 8*enRem*mwm2*p4x*p4y*p4Norm*premy**3 - 16*enRem*p2z*p4x*p4y*p4z*p4Norm*premy**3 + 8*mwm2*p4x**2*p4y*premx*premy**3 - 4*mwm2*p4y**3*premx*premy**3 - 16*p2z*p4x**2*p4y*p4z*premx*premy**3 + 8*p2z*p4y**3*p4z*premx*premy**3 - 4*mwm2*p4y*p4z**2*premx*premy**3 + 8*p2z*p4y*p4z**3*premx*premy**3 + 8*enRem*p4x**2*p4y*p4Norm*premx*premy**3 + 8*enRem*p4y*p4z**2*p4Norm*premx*premy**3 + 12*p4x**3*p4y*premx**2*premy**3 + 4*p4x*p4y**3*premx**2*premy**3 + 16*p4x*p4y*p4z**2*premx**2*premy**3 + 4*mwm2*p4x*p4y**2*premy**4 - 8*p2z*p4x*p4y**2*p4z*premy**4 + 4*mwm2*p4x*p4z**2*premy**4 - 8*p2z*p4x*p4z**3*premy**4 + 4*enRem*p4x*p4y**2*p4Norm*premy**4 - 4*enRem*p4x*p4z**2*p4Norm*premy**4 + 12*p4x**2*p4y**2*premx*premy**4 + 4*p4x**2*p4z**2*premx*premy**4 + 4*p4y**2*p4z**2*premx*premy**4 + 4*p4z**4*premx*premy**4 + 4*p4x*p4y**3*premy**5 + 4*p4x*p4y*p4z**2*premy**5 - 8*enRem**4*p4x**3*p4z*premz - 8*enRem**4*p4x*p4y**2*p4z*premz - 8*enRem**3*p2z*p4x**3*p4Norm*premz - 8*enRem**3*p2z*p4x*p4y**2*p4Norm*premz - 8*enRem**2*p2z*p4x**4*premx*premz - 8*enRem**2*p2z*p4x**2*p4y**2*premx*premz - 8*enRem**2*p2z*p4x**2*p4z**2*premx*premz + 8*enRem**2*p2z*p4y**2*p4z**2*premx*premz - 8*enRem**3*p4x**2*p4z*p4Norm*premx*premz + 8*enRem**3*p4y**2*p4z*p4Norm*premx*premz + 8*enRem**2*p4x**3*p4z*premx**2*premz + 16*enRem**2*p4x*p4y**2*p4z*premx**2*premz + 8*enRem**2*p4x*p4z**3*premx**2*premz + 8*enRem*p2z*p4x**3*p4Norm*premx**2*premz + 8*enRem*p2z*p4x*p4z**2*p4Norm*premx**2*premz + 8*p2z*p4x**4*premx**3*premz + 16*p2z*p4x**2*p4z**2*premx**3*premz + 8*p2z*p4z**4*premx**3*premz + 8*enRem*p4x**2*p4z*p4Norm*premx**3*premz + 8*enRem*p4z**3*p4Norm*premx**3*premz - 8*enRem**2*p2z*p4x**3*p4y*premy*premz - 8*enRem**2*p2z*p4x*p4y**3*premy*premz - 16*enRem**2*p2z*p4x*p4y*p4z**2*premy*premz - 16*enRem**3*p4x*p4y*p4z*p4Norm*premy*premz - 8*enRem**2*p4x**2*p4y*p4z*premx*premy*premz + 8*enRem**2*p4y**3*p4z*premx*premy*premz + 16*enRem**2*p4y*p4z**3*premx*premy*premz + 16*enRem*p2z*p4x**2*p4y*p4Norm*premx*premy*premz + 16*enRem*p2z*p4y*p4z**2*p4Norm*premx*premy*premz + 24*p2z*p4x**3*p4y*premx**2*premy*premz + 24*p2z*p4x*p4y*p4z**2*premx**2*premy*premz - 8*p4x**2*p4y*p4z*premx**3*premy*premz - 8*p4y*p4z**3*premx**3*premy*premz + 8*enRem**2*p4x**3*p4z*premy**2*premz - 8*enRem**2*p4x*p4z**3*premy**2*premz + 8*enRem*p2z*p4x*p4y**2*p4Norm*premy**2*premz - 8*enRem*p2z*p4x*p4z**2*p4Norm*premy**2*premz + 24*p2z*p4x**2*p4y**2*premx*premy**2*premz + 8*p2z*p4x**2*p4z**2*premx*premy**2*premz + 8*p2z*p4y**2*p4z**2*premx*premy**2*premz + 8*p2z*p4z**4*premx*premy**2*premz + 16*enRem*p4x**2*p4z*p4Norm*premx*premy**2*premz - 8*enRem*p4y**2*p4z*p4Norm*premx*premy**2*premz + 8*enRem*p4z**3*p4Norm*premx*premy**2*premz + 8*p4x**3*p4z*premx**2*premy**2*premz - 16*p4x*p4y**2*p4z*premx**2*premy**2*premz + 8*p4x*p4z**3*premx**2*premy**2*premz + 8*p2z*p4x*p4y**3*premy**3*premz + 8*p2z*p4x*p4y*p4z**2*premy**3*premz + 16*enRem*p4x*p4y*p4z*p4Norm*premy**3*premz + 16*p4x**2*p4y*p4z*premx*premy**3*premz - 8*p4y**3*p4z*premx*premy**3*premz - 8*p4y*p4z**3*premx*premy**3*premz + 8*p4x*p4y**2*p4z*premy**4*premz + 8*p4x*p4z**3*premy**4*premz + 4*enRem**3*p4x**3*p4Norm*premz**2 + 4*enRem**3*p4x*p4y**2*p4Norm*premz**2 + 4*enRem**2*p4x**4*premx*premz**2 + 4*enRem**2*p4x**2*p4y**2*premx*premz**2 + 4*enRem**2*p4x**2*p4z**2*premx*premz**2 - 4*enRem**2*p4y**2*p4z**2*premx*premz**2 - 4*enRem*p4x**3*p4Norm*premx**2*premz**2 - 4*enRem*p4x*p4z**2*p4Norm*premx**2*premz**2 - 4*p4x**4*premx**3*premz**2 - 8*p4x**2*p4z**2*premx**3*premz**2 - 4*p4z**4*premx**3*premz**2 + 4*enRem**2*p4x**3*p4y*premy*premz**2 + 4*enRem**2*p4x*p4y**3*premy*premz**2 + 8*enRem**2*p4x*p4y*p4z**2*premy*premz**2 - 8*enRem*p4x**2*p4y*p4Norm*premx*premy*premz**2 - 8*enRem*p4y*p4z**2*p4Norm*premx*premy*premz**2 - 12*p4x**3*p4y*premx**2*premy*premz**2 - 12*p4x*p4y*p4z**2*premx**2*premy*premz**2 - 4*enRem*p4x*p4y**2*p4Norm*premy**2*premz**2 + 4*enRem*p4x*p4z**2*p4Norm*premy**2*premz**2 - 12*p4x**2*p4y**2*premx*premy**2*premz**2 - 4*p4x**2*p4z**2*premx*premy**2*premz**2 - 4*p4y**2*p4z**2*premx*premy**2*premz**2 - 4*p4z**4*premx*premy**2*premz**2 - 4*p4x*p4y**3*premy**3*premz**2 - 4*p4x*p4y*p4z**2*premy**3*premz**2 - np.sqrt(underSqrt)))/(4*enRem**4*p4x**4 + 8*enRem**4*p4x**2*p4y**2 + 4*enRem**4*p4y**4 - 8*enRem**2*p4x**4*premx**2 - 8*enRem**2*p4x**2*p4y**2*premx**2 - 8*enRem**2*p4x**2*p4z**2*premx**2 + 8*enRem**2*p4y**2*p4z**2*premx**2 + 4*p4x**4*premx**4 + 8*p4x**2*p4z**2*premx**4 + 4*p4z**4*premx**4 - 16*enRem**2*p4x**3*p4y*premx*premy - 16*enRem**2*p4x*p4y**3*premx*premy - 32*enRem**2*p4x*p4y*p4z**2*premx*premy + 16*p4x**3*p4y*premx**3*premy + 16*p4x*p4y*p4z**2*premx**3*premy - 8*enRem**2*p4x**2*p4y**2*premy**2 - 8*enRem**2*p4y**4*premy**2 + 8*enRem**2*p4x**2*p4z**2*premy**2 - 8*enRem**2*p4y**2*p4z**2*premy**2 + 24*p4x**2*p4y**2*premx**2*premy**2 + 8*p4x**2*p4z**2*premx**2*premy**2 + 8*p4y**2*p4z**2*premx**2*premy**2 + 8*p4z**4*premx**2*premy**2 + 16*p4x*p4y**3*premx*premy**3 + 16*p4x*p4y*p4z**2*premx*premy**3 + 4*p4y**4*premy**4 + 8*p4y**2*p4z**2*premy**4 + 4*p4z**4*premy**4) + (p4z**2*premx*premy*(-4*enRem**4*mwm2*p4x**3 - 4*enRem**4*mwm2*p4x*p4y**2 + 8*enRem**4*p2z*p4x**3*p4z + 8*enRem**4*p2z*p4x*p4y**2*p4z + 4*enRem**5*p4x**3*p4Norm + 4*enRem**5*p4x*p4y**2*p4Norm + 4*enRem**4*p4x**4*premx + 4*enRem**4*p4x**2*p4y**2*premx + 4*enRem**4*p4x**2*p4z**2*premx - 4*enRem**4*p4y**2*p4z**2*premx - 4*enRem**3*mwm2*p4x**2*p4Norm*premx + 4*enRem**3*mwm2*p4y**2*p4Norm*premx + 8*enRem**3*p2z*p4x**2*p4z*p4Norm*premx - 8*enRem**3*p2z*p4y**2*p4z*p4Norm*premx + 4*enRem**2*mwm2*p4x**3*premx**2 + 8*enRem**2*mwm2*p4x*p4y**2*premx**2 - 8*enRem**2*p2z*p4x**3*p4z*premx**2 - 16*enRem**2*p2z*p4x*p4y**2*p4z*premx**2 + 4*enRem**2*mwm2*p4x*p4z**2*premx**2 - 8*enRem**2*p2z*p4x*p4z**3*premx**2 - 8*enRem**3*p4x**3*p4Norm*premx**2 - 4*enRem**3*p4x*p4y**2*p4Norm*premx**2 - 4*enRem**3*p4x*p4z**2*p4Norm*premx**2 - 8*enRem**2*p4x**4*premx**3 - 4*enRem**2*p4x**2*p4y**2*premx**3 - 12*enRem**2*p4x**2*p4z**2*premx**3 + 4*enRem**2*p4y**2*p4z**2*premx**3 - 4*enRem**2*p4z**4*premx**3 + 4*enRem*mwm2*p4x**2*p4Norm*premx**3 - 8*enRem*p2z*p4x**2*p4z*p4Norm*premx**3 + 4*enRem*mwm2*p4z**2*p4Norm*premx**3 - 8*enRem*p2z*p4z**3*p4Norm*premx**3 + 4*enRem*p4x**3*p4Norm*premx**4 + 4*enRem*p4x*p4z**2*p4Norm*premx**4 + 4*p4x**4*premx**5 + 8*p4x**2*p4z**2*premx**5 + 4*p4z**4*premx**5 + 4*enRem**4*p4x**3*p4y*premy + 4*enRem**4*p4x*p4y**3*premy + 8*enRem**4*p4x*p4y*p4z**2*premy - 8*enRem**3*mwm2*p4x*p4y*p4Norm*premy + 16*enRem**3*p2z*p4x*p4y*p4z*p4Norm*premy - 4*enRem**2*mwm2*p4x**2*p4y*premx*premy + 4*enRem**2*mwm2*p4y**3*premx*premy + 8*enRem**2*p2z*p4x**2*p4y*p4z*premx*premy - 8*enRem**2*p2z*p4y**3*p4z*premx*premy + 8*enRem**2*mwm2*p4y*p4z**2*premx*premy - 16*enRem**2*p2z*p4y*p4z**3*premx*premy - 8*enRem**3*p4x**2*p4y*p4Norm*premx*premy - 8*enRem**3*p4y*p4z**2*p4Norm*premx*premy - 16*enRem**2*p4x**3*p4y*premx**2*premy - 4*enRem**2*p4x*p4y**3*premx**2*premy - 20*enRem**2*p4x*p4y*p4z**2*premx**2*premy - 4*mwm2*p4x**2*p4y*premx**3*premy + 8*p2z*p4x**2*p4y*p4z*premx**3*premy - 4*mwm2*p4y*p4z**2*premx**3*premy + 8*p2z*p4y*p4z**3*premx**3*premy + 8*enRem*p4x**2*p4y*p4Norm*premx**3*premy + 8*enRem*p4y*p4z**2*p4Norm*premx**3*premy + 12*p4x**3*p4y*premx**4*premy + 12*p4x*p4y*p4z**2*premx**4*premy + 4*enRem**2*mwm2*p4x**3*premy**2 - 8*enRem**2*p2z*p4x**3*p4z*premy**2 - 4*enRem**2*mwm2*p4x*p4z**2*premy**2 + 8*enRem**2*p2z*p4x*p4z**3*premy**2 - 4*enRem**3*p4x**3*p4Norm*premy**2 - 8*enRem**3*p4x*p4y**2*p4Norm*premy**2 + 4*enRem**3*p4x*p4z**2*p4Norm*premy**2 - 4*enRem**2*p4x**4*premx*premy**2 - 16*enRem**2*p4x**2*p4y**2*premx*premy**2 - 8*enRem**2*p4x**2*p4z**2*premx*premy**2 - 4*enRem**2*p4z**4*premx*premy**2 + 8*enRem*mwm2*p4x**2*p4Norm*premx*premy**2 - 4*enRem*mwm2*p4y**2*p4Norm*premx*premy**2 - 16*enRem*p2z*p4x**2*p4z*p4Norm*premx*premy**2 + 8*enRem*p2z*p4y**2*p4z*p4Norm*premx*premy**2 + 4*enRem*mwm2*p4z**2*p4Norm*premx*premy**2 - 8*enRem*p2z*p4z**3*p4Norm*premx*premy**2 + 4*mwm2*p4x**3*premx**2*premy**2 - 8*mwm2*p4x*p4y**2*premx**2*premy**2 - 8*p2z*p4x**3*p4z*premx**2*premy**2 + 16*p2z*p4x*p4y**2*p4z*premx**2*premy**2 + 4*mwm2*p4x*p4z**2*premx**2*premy**2 - 8*p2z*p4x*p4z**3*premx**2*premy**2 + 4*enRem*p4x**3*p4Norm*premx**2*premy**2 + 4*enRem*p4x*p4y**2*p4Norm*premx**2*premy**2 + 4*p4x**4*premx**3*premy**2 + 12*p4x**2*p4y**2*premx**3*premy**2 + 12*p4x**2*p4z**2*premx**3*premy**2 + 4*p4y**2*p4z**2*premx**3*premy**2 + 8*p4z**4*premx**3*premy**2 - 4*enRem**2*p4x**3*p4y*premy**3 - 8*enRem**2*p4x*p4y**3*premy**3 - 12*enRem**2*p4x*p4y*p4z**2*premy**3 + 8*enRem*mwm2*p4x*p4y*p4Norm*premy**3 - 16*enRem*p2z*p4x*p4y*p4z*p4Norm*premy**3 + 8*mwm2*p4x**2*p4y*premx*premy**3 - 4*mwm2*p4y**3*premx*premy**3 - 16*p2z*p4x**2*p4y*p4z*premx*premy**3 + 8*p2z*p4y**3*p4z*premx*premy**3 - 4*mwm2*p4y*p4z**2*premx*premy**3 + 8*p2z*p4y*p4z**3*premx*premy**3 + 8*enRem*p4x**2*p4y*p4Norm*premx*premy**3 + 8*enRem*p4y*p4z**2*p4Norm*premx*premy**3 + 12*p4x**3*p4y*premx**2*premy**3 + 4*p4x*p4y**3*premx**2*premy**3 + 16*p4x*p4y*p4z**2*premx**2*premy**3 + 4*mwm2*p4x*p4y**2*premy**4 - 8*p2z*p4x*p4y**2*p4z*premy**4 + 4*mwm2*p4x*p4z**2*premy**4 - 8*p2z*p4x*p4z**3*premy**4 + 4*enRem*p4x*p4y**2*p4Norm*premy**4 - 4*enRem*p4x*p4z**2*p4Norm*premy**4 + 12*p4x**2*p4y**2*premx*premy**4 + 4*p4x**2*p4z**2*premx*premy**4 + 4*p4y**2*p4z**2*premx*premy**4 + 4*p4z**4*premx*premy**4 + 4*p4x*p4y**3*premy**5 + 4*p4x*p4y*p4z**2*premy**5 - 8*enRem**4*p4x**3*p4z*premz - 8*enRem**4*p4x*p4y**2*p4z*premz - 8*enRem**3*p2z*p4x**3*p4Norm*premz - 8*enRem**3*p2z*p4x*p4y**2*p4Norm*premz - 8*enRem**2*p2z*p4x**4*premx*premz - 8*enRem**2*p2z*p4x**2*p4y**2*premx*premz - 8*enRem**2*p2z*p4x**2*p4z**2*premx*premz + 8*enRem**2*p2z*p4y**2*p4z**2*premx*premz - 8*enRem**3*p4x**2*p4z*p4Norm*premx*premz + 8*enRem**3*p4y**2*p4z*p4Norm*premx*premz + 8*enRem**2*p4x**3*p4z*premx**2*premz + 16*enRem**2*p4x*p4y**2*p4z*premx**2*premz + 8*enRem**2*p4x*p4z**3*premx**2*premz + 8*enRem*p2z*p4x**3*p4Norm*premx**2*premz + 8*enRem*p2z*p4x*p4z**2*p4Norm*premx**2*premz + 8*p2z*p4x**4*premx**3*premz + 16*p2z*p4x**2*p4z**2*premx**3*premz + 8*p2z*p4z**4*premx**3*premz + 8*enRem*p4x**2*p4z*p4Norm*premx**3*premz + 8*enRem*p4z**3*p4Norm*premx**3*premz - 8*enRem**2*p2z*p4x**3*p4y*premy*premz - 8*enRem**2*p2z*p4x*p4y**3*premy*premz - 16*enRem**2*p2z*p4x*p4y*p4z**2*premy*premz - 16*enRem**3*p4x*p4y*p4z*p4Norm*premy*premz - 8*enRem**2*p4x**2*p4y*p4z*premx*premy*premz + 8*enRem**2*p4y**3*p4z*premx*premy*premz + 16*enRem**2*p4y*p4z**3*premx*premy*premz + 16*enRem*p2z*p4x**2*p4y*p4Norm*premx*premy*premz + 16*enRem*p2z*p4y*p4z**2*p4Norm*premx*premy*premz + 24*p2z*p4x**3*p4y*premx**2*premy*premz + 24*p2z*p4x*p4y*p4z**2*premx**2*premy*premz - 8*p4x**2*p4y*p4z*premx**3*premy*premz - 8*p4y*p4z**3*premx**3*premy*premz + 8*enRem**2*p4x**3*p4z*premy**2*premz - 8*enRem**2*p4x*p4z**3*premy**2*premz + 8*enRem*p2z*p4x*p4y**2*p4Norm*premy**2*premz - 8*enRem*p2z*p4x*p4z**2*p4Norm*premy**2*premz + 24*p2z*p4x**2*p4y**2*premx*premy**2*premz + 8*p2z*p4x**2*p4z**2*premx*premy**2*premz + 8*p2z*p4y**2*p4z**2*premx*premy**2*premz + 8*p2z*p4z**4*premx*premy**2*premz + 16*enRem*p4x**2*p4z*p4Norm*premx*premy**2*premz - 8*enRem*p4y**2*p4z*p4Norm*premx*premy**2*premz + 8*enRem*p4z**3*p4Norm*premx*premy**2*premz + 8*p4x**3*p4z*premx**2*premy**2*premz - 16*p4x*p4y**2*p4z*premx**2*premy**2*premz + 8*p4x*p4z**3*premx**2*premy**2*premz + 8*p2z*p4x*p4y**3*premy**3*premz + 8*p2z*p4x*p4y*p4z**2*premy**3*premz + 16*enRem*p4x*p4y*p4z*p4Norm*premy**3*premz + 16*p4x**2*p4y*p4z*premx*premy**3*premz - 8*p4y**3*p4z*premx*premy**3*premz - 8*p4y*p4z**3*premx*premy**3*premz + 8*p4x*p4y**2*p4z*premy**4*premz + 8*p4x*p4z**3*premy**4*premz + 4*enRem**3*p4x**3*p4Norm*premz**2 + 4*enRem**3*p4x*p4y**2*p4Norm*premz**2 + 4*enRem**2*p4x**4*premx*premz**2 + 4*enRem**2*p4x**2*p4y**2*premx*premz**2 + 4*enRem**2*p4x**2*p4z**2*premx*premz**2 - 4*enRem**2*p4y**2*p4z**2*premx*premz**2 - 4*enRem*p4x**3*p4Norm*premx**2*premz**2 - 4*enRem*p4x*p4z**2*p4Norm*premx**2*premz**2 - 4*p4x**4*premx**3*premz**2 - 8*p4x**2*p4z**2*premx**3*premz**2 - 4*p4z**4*premx**3*premz**2 + 4*enRem**2*p4x**3*p4y*premy*premz**2 + 4*enRem**2*p4x*p4y**3*premy*premz**2 + 8*enRem**2*p4x*p4y*p4z**2*premy*premz**2 - 8*enRem*p4x**2*p4y*p4Norm*premx*premy*premz**2 - 8*enRem*p4y*p4z**2*p4Norm*premx*premy*premz**2 - 12*p4x**3*p4y*premx**2*premy*premz**2 - 12*p4x*p4y*p4z**2*premx**2*premy*premz**2 - 4*enRem*p4x*p4y**2*p4Norm*premy**2*premz**2 + 4*enRem*p4x*p4z**2*p4Norm*premy**2*premz**2 - 12*p4x**2*p4y**2*premx*premy**2*premz**2 - 4*p4x**2*p4z**2*premx*premy**2*premz**2 - 4*p4y**2*p4z**2*premx*premy**2*premz**2 - 4*p4z**4*premx*premy**2*premz**2 - 4*p4x*p4y**3*premy**3*premz**2 - 4*p4x*p4y*p4z**2*premy**3*premz**2 - np.sqrt(underSqrt)))/(4*enRem**4*p4x**4 + 8*enRem**4*p4x**2*p4y**2 + 4*enRem**4*p4y**4 - 8*enRem**2*p4x**4*premx**2 - 8*enRem**2*p4x**2*p4y**2*premx**2 - 8*enRem**2*p4x**2*p4z**2*premx**2 + 8*enRem**2*p4y**2*p4z**2*premx**2 + 4*p4x**4*premx**4 + 8*p4x**2*p4z**2*premx**4 + 4*p4z**4*premx**4 - 16*enRem**2*p4x**3*p4y*premx*premy - 16*enRem**2*p4x*p4y**3*premx*premy - 32*enRem**2*p4x*p4y*p4z**2*premx*premy + 16*p4x**3*p4y*premx**3*premy + 16*p4x*p4y*p4z**2*premx**3*premy - 8*enRem**2*p4x**2*p4y**2*premy**2 - 8*enRem**2*p4y**4*premy**2 + 8*enRem**2*p4x**2*p4z**2*premy**2 - 8*enRem**2*p4y**2*p4z**2*premy**2 + 24*p4x**2*p4y**2*premx**2*premy**2 + 8*p4x**2*p4z**2*premx**2*premy**2 + 8*p4y**2*p4z**2*premx**2*premy**2 + 8*p4z**4*premx**2*premy**2 + 16*p4x*p4y**3*premx*premy**3 + 16*p4x*p4y*p4z**2*premx*premy**3 + 4*p4y**4*premy**4 + 8*p4y**2*p4z**2*premy**4 + 4*p4z**4*premy**4))/(2*enRem**2*p4y**2 - 2*p4x**2*premy**2 - 2*p4y**2*premy**2 - 2*p4z**2*premy**2)
        return p2y

    def _p2x_func2(self, p2z, underSqrt, p4x, p4y, p4z, premx, premy, premz, mwm2, enRem, p4Norm, p1Norm):
        p2x = premx - (-4*enRem**4*mwm2*p4x**3 - 4*enRem**4*mwm2*p4x*p4y**2 + 8*enRem**4*p2z*p4x**3*p4z + 8*enRem**4*p2z*p4x*p4y**2*p4z + 4*enRem**5*p4x**3*p4Norm + 4*enRem**5*p4x*p4y**2*p4Norm + 4*enRem**4*p4x**4*premx + 4*enRem**4*p4x**2*p4y**2*premx + 4*enRem**4*p4x**2*p4z**2*premx - 4*enRem**4*p4y**2*p4z**2*premx - 4*enRem**3*mwm2*p4x**2*p4Norm*premx + 4*enRem**3*mwm2*p4y**2*p4Norm*premx + 8*enRem**3*p2z*p4x**2*p4z*p4Norm*premx - 8*enRem**3*p2z*p4y**2*p4z*p4Norm*premx + 4*enRem**2*mwm2*p4x**3*premx**2 + 8*enRem**2*mwm2*p4x*p4y**2*premx**2 - 8*enRem**2*p2z*p4x**3*p4z*premx**2 - 16*enRem**2*p2z*p4x*p4y**2*p4z*premx**2 + 4*enRem**2*mwm2*p4x*p4z**2*premx**2 - 8*enRem**2*p2z*p4x*p4z**3*premx**2 - 8*enRem**3*p4x**3*p4Norm*premx**2 - 4*enRem**3*p4x*p4y**2*p4Norm*premx**2 - 4*enRem**3*p4x*p4z**2*p4Norm*premx**2 - 8*enRem**2*p4x**4*premx**3 - 4*enRem**2*p4x**2*p4y**2*premx**3 - 12*enRem**2*p4x**2*p4z**2*premx**3 + 4*enRem**2*p4y**2*p4z**2*premx**3 - 4*enRem**2*p4z**4*premx**3 + 4*enRem*mwm2*p4x**2*p4Norm*premx**3 - 8*enRem*p2z*p4x**2*p4z*p4Norm*premx**3 + 4*enRem*mwm2*p4z**2*p4Norm*premx**3 - 8*enRem*p2z*p4z**3*p4Norm*premx**3 + 4*enRem*p4x**3*p4Norm*premx**4 + 4*enRem*p4x*p4z**2*p4Norm*premx**4 + 4*p4x**4*premx**5 + 8*p4x**2*p4z**2*premx**5 + 4*p4z**4*premx**5 + 4*enRem**4*p4x**3*p4y*premy + 4*enRem**4*p4x*p4y**3*premy + 8*enRem**4*p4x*p4y*p4z**2*premy - 8*enRem**3*mwm2*p4x*p4y*p4Norm*premy + 16*enRem**3*p2z*p4x*p4y*p4z*p4Norm*premy - 4*enRem**2*mwm2*p4x**2*p4y*premx*premy + 4*enRem**2*mwm2*p4y**3*premx*premy + 8*enRem**2*p2z*p4x**2*p4y*p4z*premx*premy - 8*enRem**2*p2z*p4y**3*p4z*premx*premy + 8*enRem**2*mwm2*p4y*p4z**2*premx*premy - 16*enRem**2*p2z*p4y*p4z**3*premx*premy - 8*enRem**3*p4x**2*p4y*p4Norm*premx*premy - 8*enRem**3*p4y*p4z**2*p4Norm*premx*premy - 16*enRem**2*p4x**3*p4y*premx**2*premy - 4*enRem**2*p4x*p4y**3*premx**2*premy - 20*enRem**2*p4x*p4y*p4z**2*premx**2*premy - 4*mwm2*p4x**2*p4y*premx**3*premy + 8*p2z*p4x**2*p4y*p4z*premx**3*premy - 4*mwm2*p4y*p4z**2*premx**3*premy + 8*p2z*p4y*p4z**3*premx**3*premy + 8*enRem*p4x**2*p4y*p4Norm*premx**3*premy + 8*enRem*p4y*p4z**2*p4Norm*premx**3*premy + 12*p4x**3*p4y*premx**4*premy + 12*p4x*p4y*p4z**2*premx**4*premy + 4*enRem**2*mwm2*p4x**3*premy**2 - 8*enRem**2*p2z*p4x**3*p4z*premy**2 - 4*enRem**2*mwm2*p4x*p4z**2*premy**2 + 8*enRem**2*p2z*p4x*p4z**3*premy**2 - 4*enRem**3*p4x**3*p4Norm*premy**2 - 8*enRem**3*p4x*p4y**2*p4Norm*premy**2 + 4*enRem**3*p4x*p4z**2*p4Norm*premy**2 - 4*enRem**2*p4x**4*premx*premy**2 - 16*enRem**2*p4x**2*p4y**2*premx*premy**2 - 8*enRem**2*p4x**2*p4z**2*premx*premy**2 - 4*enRem**2*p4z**4*premx*premy**2 + 8*enRem*mwm2*p4x**2*p4Norm*premx*premy**2 - 4*enRem*mwm2*p4y**2*p4Norm*premx*premy**2 - 16*enRem*p2z*p4x**2*p4z*p4Norm*premx*premy**2 + 8*enRem*p2z*p4y**2*p4z*p4Norm*premx*premy**2 + 4*enRem*mwm2*p4z**2*p4Norm*premx*premy**2 - 8*enRem*p2z*p4z**3*p4Norm*premx*premy**2 + 4*mwm2*p4x**3*premx**2*premy**2 - 8*mwm2*p4x*p4y**2*premx**2*premy**2 - 8*p2z*p4x**3*p4z*premx**2*premy**2 + 16*p2z*p4x*p4y**2*p4z*premx**2*premy**2 + 4*mwm2*p4x*p4z**2*premx**2*premy**2 - 8*p2z*p4x*p4z**3*premx**2*premy**2 + 4*enRem*p4x**3*p4Norm*premx**2*premy**2 + 4*enRem*p4x*p4y**2*p4Norm*premx**2*premy**2 + 4*p4x**4*premx**3*premy**2 + 12*p4x**2*p4y**2*premx**3*premy**2 + 12*p4x**2*p4z**2*premx**3*premy**2 + 4*p4y**2*p4z**2*premx**3*premy**2 + 8*p4z**4*premx**3*premy**2 - 4*enRem**2*p4x**3*p4y*premy**3 - 8*enRem**2*p4x*p4y**3*premy**3 - 12*enRem**2*p4x*p4y*p4z**2*premy**3 + 8*enRem*mwm2*p4x*p4y*p4Norm*premy**3 - 16*enRem*p2z*p4x*p4y*p4z*p4Norm*premy**3 + 8*mwm2*p4x**2*p4y*premx*premy**3 - 4*mwm2*p4y**3*premx*premy**3 - 16*p2z*p4x**2*p4y*p4z*premx*premy**3 + 8*p2z*p4y**3*p4z*premx*premy**3 - 4*mwm2*p4y*p4z**2*premx*premy**3 + 8*p2z*p4y*p4z**3*premx*premy**3 + 8*enRem*p4x**2*p4y*p4Norm*premx*premy**3 + 8*enRem*p4y*p4z**2*p4Norm*premx*premy**3 + 12*p4x**3*p4y*premx**2*premy**3 + 4*p4x*p4y**3*premx**2*premy**3 + 16*p4x*p4y*p4z**2*premx**2*premy**3 + 4*mwm2*p4x*p4y**2*premy**4 - 8*p2z*p4x*p4y**2*p4z*premy**4 + 4*mwm2*p4x*p4z**2*premy**4 - 8*p2z*p4x*p4z**3*premy**4 + 4*enRem*p4x*p4y**2*p4Norm*premy**4 - 4*enRem*p4x*p4z**2*p4Norm*premy**4 + 12*p4x**2*p4y**2*premx*premy**4 + 4*p4x**2*p4z**2*premx*premy**4 + 4*p4y**2*p4z**2*premx*premy**4 + 4*p4z**4*premx*premy**4 + 4*p4x*p4y**3*premy**5 + 4*p4x*p4y*p4z**2*premy**5 - 8*enRem**4*p4x**3*p4z*premz - 8*enRem**4*p4x*p4y**2*p4z*premz - 8*enRem**3*p2z*p4x**3*p4Norm*premz - 8*enRem**3*p2z*p4x*p4y**2*p4Norm*premz - 8*enRem**2*p2z*p4x**4*premx*premz - 8*enRem**2*p2z*p4x**2*p4y**2*premx*premz - 8*enRem**2*p2z*p4x**2*p4z**2*premx*premz + 8*enRem**2*p2z*p4y**2*p4z**2*premx*premz - 8*enRem**3*p4x**2*p4z*p4Norm*premx*premz + 8*enRem**3*p4y**2*p4z*p4Norm*premx*premz + 8*enRem**2*p4x**3*p4z*premx**2*premz + 16*enRem**2*p4x*p4y**2*p4z*premx**2*premz + 8*enRem**2*p4x*p4z**3*premx**2*premz + 8*enRem*p2z*p4x**3*p4Norm*premx**2*premz + 8*enRem*p2z*p4x*p4z**2*p4Norm*premx**2*premz + 8*p2z*p4x**4*premx**3*premz + 16*p2z*p4x**2*p4z**2*premx**3*premz + 8*p2z*p4z**4*premx**3*premz + 8*enRem*p4x**2*p4z*p4Norm*premx**3*premz + 8*enRem*p4z**3*p4Norm*premx**3*premz - 8*enRem**2*p2z*p4x**3*p4y*premy*premz - 8*enRem**2*p2z*p4x*p4y**3*premy*premz - 16*enRem**2*p2z*p4x*p4y*p4z**2*premy*premz - 16*enRem**3*p4x*p4y*p4z*p4Norm*premy*premz - 8*enRem**2*p4x**2*p4y*p4z*premx*premy*premz + 8*enRem**2*p4y**3*p4z*premx*premy*premz + 16*enRem**2*p4y*p4z**3*premx*premy*premz + 16*enRem*p2z*p4x**2*p4y*p4Norm*premx*premy*premz + 16*enRem*p2z*p4y*p4z**2*p4Norm*premx*premy*premz + 24*p2z*p4x**3*p4y*premx**2*premy*premz + 24*p2z*p4x*p4y*p4z**2*premx**2*premy*premz - 8*p4x**2*p4y*p4z*premx**3*premy*premz - 8*p4y*p4z**3*premx**3*premy*premz + 8*enRem**2*p4x**3*p4z*premy**2*premz - 8*enRem**2*p4x*p4z**3*premy**2*premz + 8*enRem*p2z*p4x*p4y**2*p4Norm*premy**2*premz - 8*enRem*p2z*p4x*p4z**2*p4Norm*premy**2*premz + 24*p2z*p4x**2*p4y**2*premx*premy**2*premz + 8*p2z*p4x**2*p4z**2*premx*premy**2*premz + 8*p2z*p4y**2*p4z**2*premx*premy**2*premz + 8*p2z*p4z**4*premx*premy**2*premz + 16*enRem*p4x**2*p4z*p4Norm*premx*premy**2*premz - 8*enRem*p4y**2*p4z*p4Norm*premx*premy**2*premz + 8*enRem*p4z**3*p4Norm*premx*premy**2*premz + 8*p4x**3*p4z*premx**2*premy**2*premz - 16*p4x*p4y**2*p4z*premx**2*premy**2*premz + 8*p4x*p4z**3*premx**2*premy**2*premz + 8*p2z*p4x*p4y**3*premy**3*premz + 8*p2z*p4x*p4y*p4z**2*premy**3*premz + 16*enRem*p4x*p4y*p4z*p4Norm*premy**3*premz + 16*p4x**2*p4y*p4z*premx*premy**3*premz - 8*p4y**3*p4z*premx*premy**3*premz - 8*p4y*p4z**3*premx*premy**3*premz + 8*p4x*p4y**2*p4z*premy**4*premz + 8*p4x*p4z**3*premy**4*premz + 4*enRem**3*p4x**3*p4Norm*premz**2 + 4*enRem**3*p4x*p4y**2*p4Norm*premz**2 + 4*enRem**2*p4x**4*premx*premz**2 + 4*enRem**2*p4x**2*p4y**2*premx*premz**2 + 4*enRem**2*p4x**2*p4z**2*premx*premz**2 - 4*enRem**2*p4y**2*p4z**2*premx*premz**2 - 4*enRem*p4x**3*p4Norm*premx**2*premz**2 - 4*enRem*p4x*p4z**2*p4Norm*premx**2*premz**2 - 4*p4x**4*premx**3*premz**2 - 8*p4x**2*p4z**2*premx**3*premz**2 - 4*p4z**4*premx**3*premz**2 + 4*enRem**2*p4x**3*p4y*premy*premz**2 + 4*enRem**2*p4x*p4y**3*premy*premz**2 + 8*enRem**2*p4x*p4y*p4z**2*premy*premz**2 - 8*enRem*p4x**2*p4y*p4Norm*premx*premy*premz**2 - 8*enRem*p4y*p4z**2*p4Norm*premx*premy*premz**2 - 12*p4x**3*p4y*premx**2*premy*premz**2 - 12*p4x*p4y*p4z**2*premx**2*premy*premz**2 - 4*enRem*p4x*p4y**2*p4Norm*premy**2*premz**2 + 4*enRem*p4x*p4z**2*p4Norm*premy**2*premz**2 - 12*p4x**2*p4y**2*premx*premy**2*premz**2 - 4*p4x**2*p4z**2*premx*premy**2*premz**2 - 4*p4y**2*p4z**2*premx*premy**2*premz**2 - 4*p4z**4*premx*premy**2*premz**2 - 4*p4x*p4y**3*premy**3*premz**2 - 4*p4x*p4y*p4z**2*premy**3*premz**2 + np.sqrt(underSqrt))/(2*(4*enRem**4*p4x**4 + 8*enRem**4*p4x**2*p4y**2 + 4*enRem**4*p4y**4 - 8*enRem**2*p4x**4*premx**2 - 8*enRem**2*p4x**2*p4y**2*premx**2 - 8*enRem**2*p4x**2*p4z**2*premx**2 + 8*enRem**2*p4y**2*p4z**2*premx**2 + 4*p4x**4*premx**4 + 8*p4x**2*p4z**2*premx**4 + 4*p4z**4*premx**4 - 16*enRem**2*p4x**3*p4y*premx*premy - 16*enRem**2*p4x*p4y**3*premx*premy - 32*enRem**2*p4x*p4y*p4z**2*premx*premy + 16*p4x**3*p4y*premx**3*premy + 16*p4x*p4y*p4z**2*premx**3*premy - 8*enRem**2*p4x**2*p4y**2*premy**2 - 8*enRem**2*p4y**4*premy**2 + 8*enRem**2*p4x**2*p4z**2*premy**2 - 8*enRem**2*p4y**2*p4z**2*premy**2 + 24*p4x**2*p4y**2*premx**2*premy**2 + 8*p4x**2*p4z**2*premx**2*premy**2 + 8*p4y**2*p4z**2*premx**2*premy**2 + 8*p4z**4*premx**2*premy**2 + 16*p4x*p4y**3*premx*premy**3 + 16*p4x*p4y*p4z**2*premx*premy**3 + 4*p4y**4*premy**4 + 8*p4y**2*p4z**2*premy**4 + 4*p4z**4*premy**4))
        return p2x

    def _p2y_func2(self, p2z, underSqrt, p4x, p4y, p4z, premx, premy, premz, mwm2, enRem, p4Norm, p1Norm):
        p2y = premy - (-(enRem**2*mwm2*p4y) + 2*enRem**2*p2z*p4y*p4z + enRem**3*p4y*p4Norm - enRem*p4y*p4Norm*premx**2 + enRem**2*p4x**2*premy + enRem**2*p4y**2*premy + enRem**2*p4z**2*premy - enRem*mwm2*p4Norm*premy + 2*enRem*p2z*p4z*p4Norm*premy - p4x**2*premx**2*premy - p4y**2*premx**2*premy - p4z**2*premx**2*premy - enRem*p4y*p4Norm*premy**2 - p4x**2*premy**3 - p4y**2*premy**3 - p4z**2*premy**3 - 2*enRem**2*p4y*p4z*premz - 2*enRem*p2z*p4y*p4Norm*premz - 2*p2z*p4x**2*premy*premz - 2*p2z*p4y**2*premy*premz - 2*p2z*p4z**2*premy*premz - 2*enRem*p4z*p4Norm*premy*premz + enRem*p4y*p4Norm*premz**2 + p4x**2*premy*premz**2 + p4y**2*premy*premz**2 + p4z**2*premy*premz**2 - (enRem**2*p4x*p4y*(-4*enRem**4*mwm2*p4x**3 - 4*enRem**4*mwm2*p4x*p4y**2 + 8*enRem**4*p2z*p4x**3*p4z + 8*enRem**4*p2z*p4x*p4y**2*p4z + 4*enRem**5*p4x**3*p4Norm + 4*enRem**5*p4x*p4y**2*p4Norm + 4*enRem**4*p4x**4*premx + 4*enRem**4*p4x**2*p4y**2*premx + 4*enRem**4*p4x**2*p4z**2*premx - 4*enRem**4*p4y**2*p4z**2*premx - 4*enRem**3*mwm2*p4x**2*p4Norm*premx + 4*enRem**3*mwm2*p4y**2*p4Norm*premx + 8*enRem**3*p2z*p4x**2*p4z*p4Norm*premx - 8*enRem**3*p2z*p4y**2*p4z*p4Norm*premx + 4*enRem**2*mwm2*p4x**3*premx**2 + 8*enRem**2*mwm2*p4x*p4y**2*premx**2 - 8*enRem**2*p2z*p4x**3*p4z*premx**2 - 16*enRem**2*p2z*p4x*p4y**2*p4z*premx**2 + 4*enRem**2*mwm2*p4x*p4z**2*premx**2 - 8*enRem**2*p2z*p4x*p4z**3*premx**2 - 8*enRem**3*p4x**3*p4Norm*premx**2 - 4*enRem**3*p4x*p4y**2*p4Norm*premx**2 - 4*enRem**3*p4x*p4z**2*p4Norm*premx**2 - 8*enRem**2*p4x**4*premx**3 - 4*enRem**2*p4x**2*p4y**2*premx**3 - 12*enRem**2*p4x**2*p4z**2*premx**3 + 4*enRem**2*p4y**2*p4z**2*premx**3 - 4*enRem**2*p4z**4*premx**3 + 4*enRem*mwm2*p4x**2*p4Norm*premx**3 - 8*enRem*p2z*p4x**2*p4z*p4Norm*premx**3 + 4*enRem*mwm2*p4z**2*p4Norm*premx**3 - 8*enRem*p2z*p4z**3*p4Norm*premx**3 + 4*enRem*p4x**3*p4Norm*premx**4 + 4*enRem*p4x*p4z**2*p4Norm*premx**4 + 4*p4x**4*premx**5 + 8*p4x**2*p4z**2*premx**5 + 4*p4z**4*premx**5 + 4*enRem**4*p4x**3*p4y*premy + 4*enRem**4*p4x*p4y**3*premy + 8*enRem**4*p4x*p4y*p4z**2*premy - 8*enRem**3*mwm2*p4x*p4y*p4Norm*premy + 16*enRem**3*p2z*p4x*p4y*p4z*p4Norm*premy - 4*enRem**2*mwm2*p4x**2*p4y*premx*premy + 4*enRem**2*mwm2*p4y**3*premx*premy + 8*enRem**2*p2z*p4x**2*p4y*p4z*premx*premy - 8*enRem**2*p2z*p4y**3*p4z*premx*premy + 8*enRem**2*mwm2*p4y*p4z**2*premx*premy - 16*enRem**2*p2z*p4y*p4z**3*premx*premy - 8*enRem**3*p4x**2*p4y*p4Norm*premx*premy - 8*enRem**3*p4y*p4z**2*p4Norm*premx*premy - 16*enRem**2*p4x**3*p4y*premx**2*premy - 4*enRem**2*p4x*p4y**3*premx**2*premy - 20*enRem**2*p4x*p4y*p4z**2*premx**2*premy - 4*mwm2*p4x**2*p4y*premx**3*premy + 8*p2z*p4x**2*p4y*p4z*premx**3*premy - 4*mwm2*p4y*p4z**2*premx**3*premy + 8*p2z*p4y*p4z**3*premx**3*premy + 8*enRem*p4x**2*p4y*p4Norm*premx**3*premy + 8*enRem*p4y*p4z**2*p4Norm*premx**3*premy + 12*p4x**3*p4y*premx**4*premy + 12*p4x*p4y*p4z**2*premx**4*premy + 4*enRem**2*mwm2*p4x**3*premy**2 - 8*enRem**2*p2z*p4x**3*p4z*premy**2 - 4*enRem**2*mwm2*p4x*p4z**2*premy**2 + 8*enRem**2*p2z*p4x*p4z**3*premy**2 - 4*enRem**3*p4x**3*p4Norm*premy**2 - 8*enRem**3*p4x*p4y**2*p4Norm*premy**2 + 4*enRem**3*p4x*p4z**2*p4Norm*premy**2 - 4*enRem**2*p4x**4*premx*premy**2 - 16*enRem**2*p4x**2*p4y**2*premx*premy**2 - 8*enRem**2*p4x**2*p4z**2*premx*premy**2 - 4*enRem**2*p4z**4*premx*premy**2 + 8*enRem*mwm2*p4x**2*p4Norm*premx*premy**2 - 4*enRem*mwm2*p4y**2*p4Norm*premx*premy**2 - 16*enRem*p2z*p4x**2*p4z*p4Norm*premx*premy**2 + 8*enRem*p2z*p4y**2*p4z*p4Norm*premx*premy**2 + 4*enRem*mwm2*p4z**2*p4Norm*premx*premy**2 - 8*enRem*p2z*p4z**3*p4Norm*premx*premy**2 + 4*mwm2*p4x**3*premx**2*premy**2 - 8*mwm2*p4x*p4y**2*premx**2*premy**2 - 8*p2z*p4x**3*p4z*premx**2*premy**2 + 16*p2z*p4x*p4y**2*p4z*premx**2*premy**2 + 4*mwm2*p4x*p4z**2*premx**2*premy**2 - 8*p2z*p4x*p4z**3*premx**2*premy**2 + 4*enRem*p4x**3*p4Norm*premx**2*premy**2 + 4*enRem*p4x*p4y**2*p4Norm*premx**2*premy**2 + 4*p4x**4*premx**3*premy**2 + 12*p4x**2*p4y**2*premx**3*premy**2 + 12*p4x**2*p4z**2*premx**3*premy**2 + 4*p4y**2*p4z**2*premx**3*premy**2 + 8*p4z**4*premx**3*premy**2 - 4*enRem**2*p4x**3*p4y*premy**3 - 8*enRem**2*p4x*p4y**3*premy**3 - 12*enRem**2*p4x*p4y*p4z**2*premy**3 + 8*enRem*mwm2*p4x*p4y*p4Norm*premy**3 - 16*enRem*p2z*p4x*p4y*p4z*p4Norm*premy**3 + 8*mwm2*p4x**2*p4y*premx*premy**3 - 4*mwm2*p4y**3*premx*premy**3 - 16*p2z*p4x**2*p4y*p4z*premx*premy**3 + 8*p2z*p4y**3*p4z*premx*premy**3 - 4*mwm2*p4y*p4z**2*premx*premy**3 + 8*p2z*p4y*p4z**3*premx*premy**3 + 8*enRem*p4x**2*p4y*p4Norm*premx*premy**3 + 8*enRem*p4y*p4z**2*p4Norm*premx*premy**3 + 12*p4x**3*p4y*premx**2*premy**3 + 4*p4x*p4y**3*premx**2*premy**3 + 16*p4x*p4y*p4z**2*premx**2*premy**3 + 4*mwm2*p4x*p4y**2*premy**4 - 8*p2z*p4x*p4y**2*p4z*premy**4 + 4*mwm2*p4x*p4z**2*premy**4 - 8*p2z*p4x*p4z**3*premy**4 + 4*enRem*p4x*p4y**2*p4Norm*premy**4 - 4*enRem*p4x*p4z**2*p4Norm*premy**4 + 12*p4x**2*p4y**2*premx*premy**4 + 4*p4x**2*p4z**2*premx*premy**4 + 4*p4y**2*p4z**2*premx*premy**4 + 4*p4z**4*premx*premy**4 + 4*p4x*p4y**3*premy**5 + 4*p4x*p4y*p4z**2*premy**5 - 8*enRem**4*p4x**3*p4z*premz - 8*enRem**4*p4x*p4y**2*p4z*premz - 8*enRem**3*p2z*p4x**3*p4Norm*premz - 8*enRem**3*p2z*p4x*p4y**2*p4Norm*premz - 8*enRem**2*p2z*p4x**4*premx*premz - 8*enRem**2*p2z*p4x**2*p4y**2*premx*premz - 8*enRem**2*p2z*p4x**2*p4z**2*premx*premz + 8*enRem**2*p2z*p4y**2*p4z**2*premx*premz - 8*enRem**3*p4x**2*p4z*p4Norm*premx*premz + 8*enRem**3*p4y**2*p4z*p4Norm*premx*premz + 8*enRem**2*p4x**3*p4z*premx**2*premz + 16*enRem**2*p4x*p4y**2*p4z*premx**2*premz + 8*enRem**2*p4x*p4z**3*premx**2*premz + 8*enRem*p2z*p4x**3*p4Norm*premx**2*premz + 8*enRem*p2z*p4x*p4z**2*p4Norm*premx**2*premz + 8*p2z*p4x**4*premx**3*premz + 16*p2z*p4x**2*p4z**2*premx**3*premz + 8*p2z*p4z**4*premx**3*premz + 8*enRem*p4x**2*p4z*p4Norm*premx**3*premz + 8*enRem*p4z**3*p4Norm*premx**3*premz - 8*enRem**2*p2z*p4x**3*p4y*premy*premz - 8*enRem**2*p2z*p4x*p4y**3*premy*premz - 16*enRem**2*p2z*p4x*p4y*p4z**2*premy*premz - 16*enRem**3*p4x*p4y*p4z*p4Norm*premy*premz - 8*enRem**2*p4x**2*p4y*p4z*premx*premy*premz + 8*enRem**2*p4y**3*p4z*premx*premy*premz + 16*enRem**2*p4y*p4z**3*premx*premy*premz + 16*enRem*p2z*p4x**2*p4y*p4Norm*premx*premy*premz + 16*enRem*p2z*p4y*p4z**2*p4Norm*premx*premy*premz + 24*p2z*p4x**3*p4y*premx**2*premy*premz + 24*p2z*p4x*p4y*p4z**2*premx**2*premy*premz - 8*p4x**2*p4y*p4z*premx**3*premy*premz - 8*p4y*p4z**3*premx**3*premy*premz + 8*enRem**2*p4x**3*p4z*premy**2*premz - 8*enRem**2*p4x*p4z**3*premy**2*premz + 8*enRem*p2z*p4x*p4y**2*p4Norm*premy**2*premz - 8*enRem*p2z*p4x*p4z**2*p4Norm*premy**2*premz + 24*p2z*p4x**2*p4y**2*premx*premy**2*premz + 8*p2z*p4x**2*p4z**2*premx*premy**2*premz + 8*p2z*p4y**2*p4z**2*premx*premy**2*premz + 8*p2z*p4z**4*premx*premy**2*premz + 16*enRem*p4x**2*p4z*p4Norm*premx*premy**2*premz - 8*enRem*p4y**2*p4z*p4Norm*premx*premy**2*premz + 8*enRem*p4z**3*p4Norm*premx*premy**2*premz + 8*p4x**3*p4z*premx**2*premy**2*premz - 16*p4x*p4y**2*p4z*premx**2*premy**2*premz + 8*p4x*p4z**3*premx**2*premy**2*premz + 8*p2z*p4x*p4y**3*premy**3*premz + 8*p2z*p4x*p4y*p4z**2*premy**3*premz + 16*enRem*p4x*p4y*p4z*p4Norm*premy**3*premz + 16*p4x**2*p4y*p4z*premx*premy**3*premz - 8*p4y**3*p4z*premx*premy**3*premz - 8*p4y*p4z**3*premx*premy**3*premz + 8*p4x*p4y**2*p4z*premy**4*premz + 8*p4x*p4z**3*premy**4*premz + 4*enRem**3*p4x**3*p4Norm*premz**2 + 4*enRem**3*p4x*p4y**2*p4Norm*premz**2 + 4*enRem**2*p4x**4*premx*premz**2 + 4*enRem**2*p4x**2*p4y**2*premx*premz**2 + 4*enRem**2*p4x**2*p4z**2*premx*premz**2 - 4*enRem**2*p4y**2*p4z**2*premx*premz**2 - 4*enRem*p4x**3*p4Norm*premx**2*premz**2 - 4*enRem*p4x*p4z**2*p4Norm*premx**2*premz**2 - 4*p4x**4*premx**3*premz**2 - 8*p4x**2*p4z**2*premx**3*premz**2 - 4*p4z**4*premx**3*premz**2 + 4*enRem**2*p4x**3*p4y*premy*premz**2 + 4*enRem**2*p4x*p4y**3*premy*premz**2 + 8*enRem**2*p4x*p4y*p4z**2*premy*premz**2 - 8*enRem*p4x**2*p4y*p4Norm*premx*premy*premz**2 - 8*enRem*p4y*p4z**2*p4Norm*premx*premy*premz**2 - 12*p4x**3*p4y*premx**2*premy*premz**2 - 12*p4x*p4y*p4z**2*premx**2*premy*premz**2 - 4*enRem*p4x*p4y**2*p4Norm*premy**2*premz**2 + 4*enRem*p4x*p4z**2*p4Norm*premy**2*premz**2 - 12*p4x**2*p4y**2*premx*premy**2*premz**2 - 4*p4x**2*p4z**2*premx*premy**2*premz**2 - 4*p4y**2*p4z**2*premx*premy**2*premz**2 - 4*p4z**4*premx*premy**2*premz**2 - 4*p4x*p4y**3*premy**3*premz**2 - 4*p4x*p4y*p4z**2*premy**3*premz**2 + np.sqrt(underSqrt)))/(4*enRem**4*p4x**4 + 8*enRem**4*p4x**2*p4y**2 + 4*enRem**4*p4y**4 - 8*enRem**2*p4x**4*premx**2 - 8*enRem**2*p4x**2*p4y**2*premx**2 - 8*enRem**2*p4x**2*p4z**2*premx**2 + 8*enRem**2*p4y**2*p4z**2*premx**2 + 4*p4x**4*premx**4 + 8*p4x**2*p4z**2*premx**4 + 4*p4z**4*premx**4 - 16*enRem**2*p4x**3*p4y*premx*premy - 16*enRem**2*p4x*p4y**3*premx*premy - 32*enRem**2*p4x*p4y*p4z**2*premx*premy + 16*p4x**3*p4y*premx**3*premy + 16*p4x*p4y*p4z**2*premx**3*premy - 8*enRem**2*p4x**2*p4y**2*premy**2 - 8*enRem**2*p4y**4*premy**2 + 8*enRem**2*p4x**2*p4z**2*premy**2 - 8*enRem**2*p4y**2*p4z**2*premy**2 + 24*p4x**2*p4y**2*premx**2*premy**2 + 8*p4x**2*p4z**2*premx**2*premy**2 + 8*p4y**2*p4z**2*premx**2*premy**2 + 8*p4z**4*premx**2*premy**2 + 16*p4x*p4y**3*premx*premy**3 + 16*p4x*p4y*p4z**2*premx*premy**3 + 4*p4y**4*premy**4 + 8*p4y**2*p4z**2*premy**4 + 4*p4z**4*premy**4) + (enRem*p4y*p4Norm*premx*(-4*enRem**4*mwm2*p4x**3 - 4*enRem**4*mwm2*p4x*p4y**2 + 8*enRem**4*p2z*p4x**3*p4z + 8*enRem**4*p2z*p4x*p4y**2*p4z + 4*enRem**5*p4x**3*p4Norm + 4*enRem**5*p4x*p4y**2*p4Norm + 4*enRem**4*p4x**4*premx + 4*enRem**4*p4x**2*p4y**2*premx + 4*enRem**4*p4x**2*p4z**2*premx - 4*enRem**4*p4y**2*p4z**2*premx - 4*enRem**3*mwm2*p4x**2*p4Norm*premx + 4*enRem**3*mwm2*p4y**2*p4Norm*premx + 8*enRem**3*p2z*p4x**2*p4z*p4Norm*premx - 8*enRem**3*p2z*p4y**2*p4z*p4Norm*premx + 4*enRem**2*mwm2*p4x**3*premx**2 + 8*enRem**2*mwm2*p4x*p4y**2*premx**2 - 8*enRem**2*p2z*p4x**3*p4z*premx**2 - 16*enRem**2*p2z*p4x*p4y**2*p4z*premx**2 + 4*enRem**2*mwm2*p4x*p4z**2*premx**2 - 8*enRem**2*p2z*p4x*p4z**3*premx**2 - 8*enRem**3*p4x**3*p4Norm*premx**2 - 4*enRem**3*p4x*p4y**2*p4Norm*premx**2 - 4*enRem**3*p4x*p4z**2*p4Norm*premx**2 - 8*enRem**2*p4x**4*premx**3 - 4*enRem**2*p4x**2*p4y**2*premx**3 - 12*enRem**2*p4x**2*p4z**2*premx**3 + 4*enRem**2*p4y**2*p4z**2*premx**3 - 4*enRem**2*p4z**4*premx**3 + 4*enRem*mwm2*p4x**2*p4Norm*premx**3 - 8*enRem*p2z*p4x**2*p4z*p4Norm*premx**3 + 4*enRem*mwm2*p4z**2*p4Norm*premx**3 - 8*enRem*p2z*p4z**3*p4Norm*premx**3 + 4*enRem*p4x**3*p4Norm*premx**4 + 4*enRem*p4x*p4z**2*p4Norm*premx**4 + 4*p4x**4*premx**5 + 8*p4x**2*p4z**2*premx**5 + 4*p4z**4*premx**5 + 4*enRem**4*p4x**3*p4y*premy + 4*enRem**4*p4x*p4y**3*premy + 8*enRem**4*p4x*p4y*p4z**2*premy - 8*enRem**3*mwm2*p4x*p4y*p4Norm*premy + 16*enRem**3*p2z*p4x*p4y*p4z*p4Norm*premy - 4*enRem**2*mwm2*p4x**2*p4y*premx*premy + 4*enRem**2*mwm2*p4y**3*premx*premy + 8*enRem**2*p2z*p4x**2*p4y*p4z*premx*premy - 8*enRem**2*p2z*p4y**3*p4z*premx*premy + 8*enRem**2*mwm2*p4y*p4z**2*premx*premy - 16*enRem**2*p2z*p4y*p4z**3*premx*premy - 8*enRem**3*p4x**2*p4y*p4Norm*premx*premy - 8*enRem**3*p4y*p4z**2*p4Norm*premx*premy - 16*enRem**2*p4x**3*p4y*premx**2*premy - 4*enRem**2*p4x*p4y**3*premx**2*premy - 20*enRem**2*p4x*p4y*p4z**2*premx**2*premy - 4*mwm2*p4x**2*p4y*premx**3*premy + 8*p2z*p4x**2*p4y*p4z*premx**3*premy - 4*mwm2*p4y*p4z**2*premx**3*premy + 8*p2z*p4y*p4z**3*premx**3*premy + 8*enRem*p4x**2*p4y*p4Norm*premx**3*premy + 8*enRem*p4y*p4z**2*p4Norm*premx**3*premy + 12*p4x**3*p4y*premx**4*premy + 12*p4x*p4y*p4z**2*premx**4*premy + 4*enRem**2*mwm2*p4x**3*premy**2 - 8*enRem**2*p2z*p4x**3*p4z*premy**2 - 4*enRem**2*mwm2*p4x*p4z**2*premy**2 + 8*enRem**2*p2z*p4x*p4z**3*premy**2 - 4*enRem**3*p4x**3*p4Norm*premy**2 - 8*enRem**3*p4x*p4y**2*p4Norm*premy**2 + 4*enRem**3*p4x*p4z**2*p4Norm*premy**2 - 4*enRem**2*p4x**4*premx*premy**2 - 16*enRem**2*p4x**2*p4y**2*premx*premy**2 - 8*enRem**2*p4x**2*p4z**2*premx*premy**2 - 4*enRem**2*p4z**4*premx*premy**2 + 8*enRem*mwm2*p4x**2*p4Norm*premx*premy**2 - 4*enRem*mwm2*p4y**2*p4Norm*premx*premy**2 - 16*enRem*p2z*p4x**2*p4z*p4Norm*premx*premy**2 + 8*enRem*p2z*p4y**2*p4z*p4Norm*premx*premy**2 + 4*enRem*mwm2*p4z**2*p4Norm*premx*premy**2 - 8*enRem*p2z*p4z**3*p4Norm*premx*premy**2 + 4*mwm2*p4x**3*premx**2*premy**2 - 8*mwm2*p4x*p4y**2*premx**2*premy**2 - 8*p2z*p4x**3*p4z*premx**2*premy**2 + 16*p2z*p4x*p4y**2*p4z*premx**2*premy**2 + 4*mwm2*p4x*p4z**2*premx**2*premy**2 - 8*p2z*p4x*p4z**3*premx**2*premy**2 + 4*enRem*p4x**3*p4Norm*premx**2*premy**2 + 4*enRem*p4x*p4y**2*p4Norm*premx**2*premy**2 + 4*p4x**4*premx**3*premy**2 + 12*p4x**2*p4y**2*premx**3*premy**2 + 12*p4x**2*p4z**2*premx**3*premy**2 + 4*p4y**2*p4z**2*premx**3*premy**2 + 8*p4z**4*premx**3*premy**2 - 4*enRem**2*p4x**3*p4y*premy**3 - 8*enRem**2*p4x*p4y**3*premy**3 - 12*enRem**2*p4x*p4y*p4z**2*premy**3 + 8*enRem*mwm2*p4x*p4y*p4Norm*premy**3 - 16*enRem*p2z*p4x*p4y*p4z*p4Norm*premy**3 + 8*mwm2*p4x**2*p4y*premx*premy**3 - 4*mwm2*p4y**3*premx*premy**3 - 16*p2z*p4x**2*p4y*p4z*premx*premy**3 + 8*p2z*p4y**3*p4z*premx*premy**3 - 4*mwm2*p4y*p4z**2*premx*premy**3 + 8*p2z*p4y*p4z**3*premx*premy**3 + 8*enRem*p4x**2*p4y*p4Norm*premx*premy**3 + 8*enRem*p4y*p4z**2*p4Norm*premx*premy**3 + 12*p4x**3*p4y*premx**2*premy**3 + 4*p4x*p4y**3*premx**2*premy**3 + 16*p4x*p4y*p4z**2*premx**2*premy**3 + 4*mwm2*p4x*p4y**2*premy**4 - 8*p2z*p4x*p4y**2*p4z*premy**4 + 4*mwm2*p4x*p4z**2*premy**4 - 8*p2z*p4x*p4z**3*premy**4 + 4*enRem*p4x*p4y**2*p4Norm*premy**4 - 4*enRem*p4x*p4z**2*p4Norm*premy**4 + 12*p4x**2*p4y**2*premx*premy**4 + 4*p4x**2*p4z**2*premx*premy**4 + 4*p4y**2*p4z**2*premx*premy**4 + 4*p4z**4*premx*premy**4 + 4*p4x*p4y**3*premy**5 + 4*p4x*p4y*p4z**2*premy**5 - 8*enRem**4*p4x**3*p4z*premz - 8*enRem**4*p4x*p4y**2*p4z*premz - 8*enRem**3*p2z*p4x**3*p4Norm*premz - 8*enRem**3*p2z*p4x*p4y**2*p4Norm*premz - 8*enRem**2*p2z*p4x**4*premx*premz - 8*enRem**2*p2z*p4x**2*p4y**2*premx*premz - 8*enRem**2*p2z*p4x**2*p4z**2*premx*premz + 8*enRem**2*p2z*p4y**2*p4z**2*premx*premz - 8*enRem**3*p4x**2*p4z*p4Norm*premx*premz + 8*enRem**3*p4y**2*p4z*p4Norm*premx*premz + 8*enRem**2*p4x**3*p4z*premx**2*premz + 16*enRem**2*p4x*p4y**2*p4z*premx**2*premz + 8*enRem**2*p4x*p4z**3*premx**2*premz + 8*enRem*p2z*p4x**3*p4Norm*premx**2*premz + 8*enRem*p2z*p4x*p4z**2*p4Norm*premx**2*premz + 8*p2z*p4x**4*premx**3*premz + 16*p2z*p4x**2*p4z**2*premx**3*premz + 8*p2z*p4z**4*premx**3*premz + 8*enRem*p4x**2*p4z*p4Norm*premx**3*premz + 8*enRem*p4z**3*p4Norm*premx**3*premz - 8*enRem**2*p2z*p4x**3*p4y*premy*premz - 8*enRem**2*p2z*p4x*p4y**3*premy*premz - 16*enRem**2*p2z*p4x*p4y*p4z**2*premy*premz - 16*enRem**3*p4x*p4y*p4z*p4Norm*premy*premz - 8*enRem**2*p4x**2*p4y*p4z*premx*premy*premz + 8*enRem**2*p4y**3*p4z*premx*premy*premz + 16*enRem**2*p4y*p4z**3*premx*premy*premz + 16*enRem*p2z*p4x**2*p4y*p4Norm*premx*premy*premz + 16*enRem*p2z*p4y*p4z**2*p4Norm*premx*premy*premz + 24*p2z*p4x**3*p4y*premx**2*premy*premz + 24*p2z*p4x*p4y*p4z**2*premx**2*premy*premz - 8*p4x**2*p4y*p4z*premx**3*premy*premz - 8*p4y*p4z**3*premx**3*premy*premz + 8*enRem**2*p4x**3*p4z*premy**2*premz - 8*enRem**2*p4x*p4z**3*premy**2*premz + 8*enRem*p2z*p4x*p4y**2*p4Norm*premy**2*premz - 8*enRem*p2z*p4x*p4z**2*p4Norm*premy**2*premz + 24*p2z*p4x**2*p4y**2*premx*premy**2*premz + 8*p2z*p4x**2*p4z**2*premx*premy**2*premz + 8*p2z*p4y**2*p4z**2*premx*premy**2*premz + 8*p2z*p4z**4*premx*premy**2*premz + 16*enRem*p4x**2*p4z*p4Norm*premx*premy**2*premz - 8*enRem*p4y**2*p4z*p4Norm*premx*premy**2*premz + 8*enRem*p4z**3*p4Norm*premx*premy**2*premz + 8*p4x**3*p4z*premx**2*premy**2*premz - 16*p4x*p4y**2*p4z*premx**2*premy**2*premz + 8*p4x*p4z**3*premx**2*premy**2*premz + 8*p2z*p4x*p4y**3*premy**3*premz + 8*p2z*p4x*p4y*p4z**2*premy**3*premz + 16*enRem*p4x*p4y*p4z*p4Norm*premy**3*premz + 16*p4x**2*p4y*p4z*premx*premy**3*premz - 8*p4y**3*p4z*premx*premy**3*premz - 8*p4y*p4z**3*premx*premy**3*premz + 8*p4x*p4y**2*p4z*premy**4*premz + 8*p4x*p4z**3*premy**4*premz + 4*enRem**3*p4x**3*p4Norm*premz**2 + 4*enRem**3*p4x*p4y**2*p4Norm*premz**2 + 4*enRem**2*p4x**4*premx*premz**2 + 4*enRem**2*p4x**2*p4y**2*premx*premz**2 + 4*enRem**2*p4x**2*p4z**2*premx*premz**2 - 4*enRem**2*p4y**2*p4z**2*premx*premz**2 - 4*enRem*p4x**3*p4Norm*premx**2*premz**2 - 4*enRem*p4x*p4z**2*p4Norm*premx**2*premz**2 - 4*p4x**4*premx**3*premz**2 - 8*p4x**2*p4z**2*premx**3*premz**2 - 4*p4z**4*premx**3*premz**2 + 4*enRem**2*p4x**3*p4y*premy*premz**2 + 4*enRem**2*p4x*p4y**3*premy*premz**2 + 8*enRem**2*p4x*p4y*p4z**2*premy*premz**2 - 8*enRem*p4x**2*p4y*p4Norm*premx*premy*premz**2 - 8*enRem*p4y*p4z**2*p4Norm*premx*premy*premz**2 - 12*p4x**3*p4y*premx**2*premy*premz**2 - 12*p4x*p4y*p4z**2*premx**2*premy*premz**2 - 4*enRem*p4x*p4y**2*p4Norm*premy**2*premz**2 + 4*enRem*p4x*p4z**2*p4Norm*premy**2*premz**2 - 12*p4x**2*p4y**2*premx*premy**2*premz**2 - 4*p4x**2*p4z**2*premx*premy**2*premz**2 - 4*p4y**2*p4z**2*premx*premy**2*premz**2 - 4*p4z**4*premx*premy**2*premz**2 - 4*p4x*p4y**3*premy**3*premz**2 - 4*p4x*p4y*p4z**2*premy**3*premz**2 + np.sqrt(underSqrt)))/(4*enRem**4*p4x**4 + 8*enRem**4*p4x**2*p4y**2 + 4*enRem**4*p4y**4 - 8*enRem**2*p4x**4*premx**2 - 8*enRem**2*p4x**2*p4y**2*premx**2 - 8*enRem**2*p4x**2*p4z**2*premx**2 + 8*enRem**2*p4y**2*p4z**2*premx**2 + 4*p4x**4*premx**4 + 8*p4x**2*p4z**2*premx**4 + 4*p4z**4*premx**4 - 16*enRem**2*p4x**3*p4y*premx*premy - 16*enRem**2*p4x*p4y**3*premx*premy - 32*enRem**2*p4x*p4y*p4z**2*premx*premy + 16*p4x**3*p4y*premx**3*premy + 16*p4x*p4y*p4z**2*premx**3*premy - 8*enRem**2*p4x**2*p4y**2*premy**2 - 8*enRem**2*p4y**4*premy**2 + 8*enRem**2*p4x**2*p4z**2*premy**2 - 8*enRem**2*p4y**2*p4z**2*premy**2 + 24*p4x**2*p4y**2*premx**2*premy**2 + 8*p4x**2*p4z**2*premx**2*premy**2 + 8*p4y**2*p4z**2*premx**2*premy**2 + 8*p4z**4*premx**2*premy**2 + 16*p4x*p4y**3*premx*premy**3 + 16*p4x*p4y*p4z**2*premx*premy**3 + 4*p4y**4*premy**4 + 8*p4y**2*p4z**2*premy**4 + 4*p4z**4*premy**4) - (enRem*p4x*p4Norm*premy*(-4*enRem**4*mwm2*p4x**3 - 4*enRem**4*mwm2*p4x*p4y**2 + 8*enRem**4*p2z*p4x**3*p4z + 8*enRem**4*p2z*p4x*p4y**2*p4z + 4*enRem**5*p4x**3*p4Norm + 4*enRem**5*p4x*p4y**2*p4Norm + 4*enRem**4*p4x**4*premx + 4*enRem**4*p4x**2*p4y**2*premx + 4*enRem**4*p4x**2*p4z**2*premx - 4*enRem**4*p4y**2*p4z**2*premx - 4*enRem**3*mwm2*p4x**2*p4Norm*premx + 4*enRem**3*mwm2*p4y**2*p4Norm*premx + 8*enRem**3*p2z*p4x**2*p4z*p4Norm*premx - 8*enRem**3*p2z*p4y**2*p4z*p4Norm*premx + 4*enRem**2*mwm2*p4x**3*premx**2 + 8*enRem**2*mwm2*p4x*p4y**2*premx**2 - 8*enRem**2*p2z*p4x**3*p4z*premx**2 - 16*enRem**2*p2z*p4x*p4y**2*p4z*premx**2 + 4*enRem**2*mwm2*p4x*p4z**2*premx**2 - 8*enRem**2*p2z*p4x*p4z**3*premx**2 - 8*enRem**3*p4x**3*p4Norm*premx**2 - 4*enRem**3*p4x*p4y**2*p4Norm*premx**2 - 4*enRem**3*p4x*p4z**2*p4Norm*premx**2 - 8*enRem**2*p4x**4*premx**3 - 4*enRem**2*p4x**2*p4y**2*premx**3 - 12*enRem**2*p4x**2*p4z**2*premx**3 + 4*enRem**2*p4y**2*p4z**2*premx**3 - 4*enRem**2*p4z**4*premx**3 + 4*enRem*mwm2*p4x**2*p4Norm*premx**3 - 8*enRem*p2z*p4x**2*p4z*p4Norm*premx**3 + 4*enRem*mwm2*p4z**2*p4Norm*premx**3 - 8*enRem*p2z*p4z**3*p4Norm*premx**3 + 4*enRem*p4x**3*p4Norm*premx**4 + 4*enRem*p4x*p4z**2*p4Norm*premx**4 + 4*p4x**4*premx**5 + 8*p4x**2*p4z**2*premx**5 + 4*p4z**4*premx**5 + 4*enRem**4*p4x**3*p4y*premy + 4*enRem**4*p4x*p4y**3*premy + 8*enRem**4*p4x*p4y*p4z**2*premy - 8*enRem**3*mwm2*p4x*p4y*p4Norm*premy + 16*enRem**3*p2z*p4x*p4y*p4z*p4Norm*premy - 4*enRem**2*mwm2*p4x**2*p4y*premx*premy + 4*enRem**2*mwm2*p4y**3*premx*premy + 8*enRem**2*p2z*p4x**2*p4y*p4z*premx*premy - 8*enRem**2*p2z*p4y**3*p4z*premx*premy + 8*enRem**2*mwm2*p4y*p4z**2*premx*premy - 16*enRem**2*p2z*p4y*p4z**3*premx*premy - 8*enRem**3*p4x**2*p4y*p4Norm*premx*premy - 8*enRem**3*p4y*p4z**2*p4Norm*premx*premy - 16*enRem**2*p4x**3*p4y*premx**2*premy - 4*enRem**2*p4x*p4y**3*premx**2*premy - 20*enRem**2*p4x*p4y*p4z**2*premx**2*premy - 4*mwm2*p4x**2*p4y*premx**3*premy + 8*p2z*p4x**2*p4y*p4z*premx**3*premy - 4*mwm2*p4y*p4z**2*premx**3*premy + 8*p2z*p4y*p4z**3*premx**3*premy + 8*enRem*p4x**2*p4y*p4Norm*premx**3*premy + 8*enRem*p4y*p4z**2*p4Norm*premx**3*premy + 12*p4x**3*p4y*premx**4*premy + 12*p4x*p4y*p4z**2*premx**4*premy + 4*enRem**2*mwm2*p4x**3*premy**2 - 8*enRem**2*p2z*p4x**3*p4z*premy**2 - 4*enRem**2*mwm2*p4x*p4z**2*premy**2 + 8*enRem**2*p2z*p4x*p4z**3*premy**2 - 4*enRem**3*p4x**3*p4Norm*premy**2 - 8*enRem**3*p4x*p4y**2*p4Norm*premy**2 + 4*enRem**3*p4x*p4z**2*p4Norm*premy**2 - 4*enRem**2*p4x**4*premx*premy**2 - 16*enRem**2*p4x**2*p4y**2*premx*premy**2 - 8*enRem**2*p4x**2*p4z**2*premx*premy**2 - 4*enRem**2*p4z**4*premx*premy**2 + 8*enRem*mwm2*p4x**2*p4Norm*premx*premy**2 - 4*enRem*mwm2*p4y**2*p4Norm*premx*premy**2 - 16*enRem*p2z*p4x**2*p4z*p4Norm*premx*premy**2 + 8*enRem*p2z*p4y**2*p4z*p4Norm*premx*premy**2 + 4*enRem*mwm2*p4z**2*p4Norm*premx*premy**2 - 8*enRem*p2z*p4z**3*p4Norm*premx*premy**2 + 4*mwm2*p4x**3*premx**2*premy**2 - 8*mwm2*p4x*p4y**2*premx**2*premy**2 - 8*p2z*p4x**3*p4z*premx**2*premy**2 + 16*p2z*p4x*p4y**2*p4z*premx**2*premy**2 + 4*mwm2*p4x*p4z**2*premx**2*premy**2 - 8*p2z*p4x*p4z**3*premx**2*premy**2 + 4*enRem*p4x**3*p4Norm*premx**2*premy**2 + 4*enRem*p4x*p4y**2*p4Norm*premx**2*premy**2 + 4*p4x**4*premx**3*premy**2 + 12*p4x**2*p4y**2*premx**3*premy**2 + 12*p4x**2*p4z**2*premx**3*premy**2 + 4*p4y**2*p4z**2*premx**3*premy**2 + 8*p4z**4*premx**3*premy**2 - 4*enRem**2*p4x**3*p4y*premy**3 - 8*enRem**2*p4x*p4y**3*premy**3 - 12*enRem**2*p4x*p4y*p4z**2*premy**3 + 8*enRem*mwm2*p4x*p4y*p4Norm*premy**3 - 16*enRem*p2z*p4x*p4y*p4z*p4Norm*premy**3 + 8*mwm2*p4x**2*p4y*premx*premy**3 - 4*mwm2*p4y**3*premx*premy**3 - 16*p2z*p4x**2*p4y*p4z*premx*premy**3 + 8*p2z*p4y**3*p4z*premx*premy**3 - 4*mwm2*p4y*p4z**2*premx*premy**3 + 8*p2z*p4y*p4z**3*premx*premy**3 + 8*enRem*p4x**2*p4y*p4Norm*premx*premy**3 + 8*enRem*p4y*p4z**2*p4Norm*premx*premy**3 + 12*p4x**3*p4y*premx**2*premy**3 + 4*p4x*p4y**3*premx**2*premy**3 + 16*p4x*p4y*p4z**2*premx**2*premy**3 + 4*mwm2*p4x*p4y**2*premy**4 - 8*p2z*p4x*p4y**2*p4z*premy**4 + 4*mwm2*p4x*p4z**2*premy**4 - 8*p2z*p4x*p4z**3*premy**4 + 4*enRem*p4x*p4y**2*p4Norm*premy**4 - 4*enRem*p4x*p4z**2*p4Norm*premy**4 + 12*p4x**2*p4y**2*premx*premy**4 + 4*p4x**2*p4z**2*premx*premy**4 + 4*p4y**2*p4z**2*premx*premy**4 + 4*p4z**4*premx*premy**4 + 4*p4x*p4y**3*premy**5 + 4*p4x*p4y*p4z**2*premy**5 - 8*enRem**4*p4x**3*p4z*premz - 8*enRem**4*p4x*p4y**2*p4z*premz - 8*enRem**3*p2z*p4x**3*p4Norm*premz - 8*enRem**3*p2z*p4x*p4y**2*p4Norm*premz - 8*enRem**2*p2z*p4x**4*premx*premz - 8*enRem**2*p2z*p4x**2*p4y**2*premx*premz - 8*enRem**2*p2z*p4x**2*p4z**2*premx*premz + 8*enRem**2*p2z*p4y**2*p4z**2*premx*premz - 8*enRem**3*p4x**2*p4z*p4Norm*premx*premz + 8*enRem**3*p4y**2*p4z*p4Norm*premx*premz + 8*enRem**2*p4x**3*p4z*premx**2*premz + 16*enRem**2*p4x*p4y**2*p4z*premx**2*premz + 8*enRem**2*p4x*p4z**3*premx**2*premz + 8*enRem*p2z*p4x**3*p4Norm*premx**2*premz + 8*enRem*p2z*p4x*p4z**2*p4Norm*premx**2*premz + 8*p2z*p4x**4*premx**3*premz + 16*p2z*p4x**2*p4z**2*premx**3*premz + 8*p2z*p4z**4*premx**3*premz + 8*enRem*p4x**2*p4z*p4Norm*premx**3*premz + 8*enRem*p4z**3*p4Norm*premx**3*premz - 8*enRem**2*p2z*p4x**3*p4y*premy*premz - 8*enRem**2*p2z*p4x*p4y**3*premy*premz - 16*enRem**2*p2z*p4x*p4y*p4z**2*premy*premz - 16*enRem**3*p4x*p4y*p4z*p4Norm*premy*premz - 8*enRem**2*p4x**2*p4y*p4z*premx*premy*premz + 8*enRem**2*p4y**3*p4z*premx*premy*premz + 16*enRem**2*p4y*p4z**3*premx*premy*premz + 16*enRem*p2z*p4x**2*p4y*p4Norm*premx*premy*premz + 16*enRem*p2z*p4y*p4z**2*p4Norm*premx*premy*premz + 24*p2z*p4x**3*p4y*premx**2*premy*premz + 24*p2z*p4x*p4y*p4z**2*premx**2*premy*premz - 8*p4x**2*p4y*p4z*premx**3*premy*premz - 8*p4y*p4z**3*premx**3*premy*premz + 8*enRem**2*p4x**3*p4z*premy**2*premz - 8*enRem**2*p4x*p4z**3*premy**2*premz + 8*enRem*p2z*p4x*p4y**2*p4Norm*premy**2*premz - 8*enRem*p2z*p4x*p4z**2*p4Norm*premy**2*premz + 24*p2z*p4x**2*p4y**2*premx*premy**2*premz + 8*p2z*p4x**2*p4z**2*premx*premy**2*premz + 8*p2z*p4y**2*p4z**2*premx*premy**2*premz + 8*p2z*p4z**4*premx*premy**2*premz + 16*enRem*p4x**2*p4z*p4Norm*premx*premy**2*premz - 8*enRem*p4y**2*p4z*p4Norm*premx*premy**2*premz + 8*enRem*p4z**3*p4Norm*premx*premy**2*premz + 8*p4x**3*p4z*premx**2*premy**2*premz - 16*p4x*p4y**2*p4z*premx**2*premy**2*premz + 8*p4x*p4z**3*premx**2*premy**2*premz + 8*p2z*p4x*p4y**3*premy**3*premz + 8*p2z*p4x*p4y*p4z**2*premy**3*premz + 16*enRem*p4x*p4y*p4z*p4Norm*premy**3*premz + 16*p4x**2*p4y*p4z*premx*premy**3*premz - 8*p4y**3*p4z*premx*premy**3*premz - 8*p4y*p4z**3*premx*premy**3*premz + 8*p4x*p4y**2*p4z*premy**4*premz + 8*p4x*p4z**3*premy**4*premz + 4*enRem**3*p4x**3*p4Norm*premz**2 + 4*enRem**3*p4x*p4y**2*p4Norm*premz**2 + 4*enRem**2*p4x**4*premx*premz**2 + 4*enRem**2*p4x**2*p4y**2*premx*premz**2 + 4*enRem**2*p4x**2*p4z**2*premx*premz**2 - 4*enRem**2*p4y**2*p4z**2*premx*premz**2 - 4*enRem*p4x**3*p4Norm*premx**2*premz**2 - 4*enRem*p4x*p4z**2*p4Norm*premx**2*premz**2 - 4*p4x**4*premx**3*premz**2 - 8*p4x**2*p4z**2*premx**3*premz**2 - 4*p4z**4*premx**3*premz**2 + 4*enRem**2*p4x**3*p4y*premy*premz**2 + 4*enRem**2*p4x*p4y**3*premy*premz**2 + 8*enRem**2*p4x*p4y*p4z**2*premy*premz**2 - 8*enRem*p4x**2*p4y*p4Norm*premx*premy*premz**2 - 8*enRem*p4y*p4z**2*p4Norm*premx*premy*premz**2 - 12*p4x**3*p4y*premx**2*premy*premz**2 - 12*p4x*p4y*p4z**2*premx**2*premy*premz**2 - 4*enRem*p4x*p4y**2*p4Norm*premy**2*premz**2 + 4*enRem*p4x*p4z**2*p4Norm*premy**2*premz**2 - 12*p4x**2*p4y**2*premx*premy**2*premz**2 - 4*p4x**2*p4z**2*premx*premy**2*premz**2 - 4*p4y**2*p4z**2*premx*premy**2*premz**2 - 4*p4z**4*premx*premy**2*premz**2 - 4*p4x*p4y**3*premy**3*premz**2 - 4*p4x*p4y*p4z**2*premy**3*premz**2 + np.sqrt(underSqrt)))/(4*enRem**4*p4x**4 + 8*enRem**4*p4x**2*p4y**2 + 4*enRem**4*p4y**4 - 8*enRem**2*p4x**4*premx**2 - 8*enRem**2*p4x**2*p4y**2*premx**2 - 8*enRem**2*p4x**2*p4z**2*premx**2 + 8*enRem**2*p4y**2*p4z**2*premx**2 + 4*p4x**4*premx**4 + 8*p4x**2*p4z**2*premx**4 + 4*p4z**4*premx**4 - 16*enRem**2*p4x**3*p4y*premx*premy - 16*enRem**2*p4x*p4y**3*premx*premy - 32*enRem**2*p4x*p4y*p4z**2*premx*premy + 16*p4x**3*p4y*premx**3*premy + 16*p4x*p4y*p4z**2*premx**3*premy - 8*enRem**2*p4x**2*p4y**2*premy**2 - 8*enRem**2*p4y**4*premy**2 + 8*enRem**2*p4x**2*p4z**2*premy**2 - 8*enRem**2*p4y**2*p4z**2*premy**2 + 24*p4x**2*p4y**2*premx**2*premy**2 + 8*p4x**2*p4z**2*premx**2*premy**2 + 8*p4y**2*p4z**2*premx**2*premy**2 + 8*p4z**4*premx**2*premy**2 + 16*p4x*p4y**3*premx*premy**3 + 16*p4x*p4y*p4z**2*premx*premy**3 + 4*p4y**4*premy**4 + 8*p4y**2*p4z**2*premy**4 + 4*p4z**4*premy**4) + (p4x**2*premx*premy*(-4*enRem**4*mwm2*p4x**3 - 4*enRem**4*mwm2*p4x*p4y**2 + 8*enRem**4*p2z*p4x**3*p4z + 8*enRem**4*p2z*p4x*p4y**2*p4z + 4*enRem**5*p4x**3*p4Norm + 4*enRem**5*p4x*p4y**2*p4Norm + 4*enRem**4*p4x**4*premx + 4*enRem**4*p4x**2*p4y**2*premx + 4*enRem**4*p4x**2*p4z**2*premx - 4*enRem**4*p4y**2*p4z**2*premx - 4*enRem**3*mwm2*p4x**2*p4Norm*premx + 4*enRem**3*mwm2*p4y**2*p4Norm*premx + 8*enRem**3*p2z*p4x**2*p4z*p4Norm*premx - 8*enRem**3*p2z*p4y**2*p4z*p4Norm*premx + 4*enRem**2*mwm2*p4x**3*premx**2 + 8*enRem**2*mwm2*p4x*p4y**2*premx**2 - 8*enRem**2*p2z*p4x**3*p4z*premx**2 - 16*enRem**2*p2z*p4x*p4y**2*p4z*premx**2 + 4*enRem**2*mwm2*p4x*p4z**2*premx**2 - 8*enRem**2*p2z*p4x*p4z**3*premx**2 - 8*enRem**3*p4x**3*p4Norm*premx**2 - 4*enRem**3*p4x*p4y**2*p4Norm*premx**2 - 4*enRem**3*p4x*p4z**2*p4Norm*premx**2 - 8*enRem**2*p4x**4*premx**3 - 4*enRem**2*p4x**2*p4y**2*premx**3 - 12*enRem**2*p4x**2*p4z**2*premx**3 + 4*enRem**2*p4y**2*p4z**2*premx**3 - 4*enRem**2*p4z**4*premx**3 + 4*enRem*mwm2*p4x**2*p4Norm*premx**3 - 8*enRem*p2z*p4x**2*p4z*p4Norm*premx**3 + 4*enRem*mwm2*p4z**2*p4Norm*premx**3 - 8*enRem*p2z*p4z**3*p4Norm*premx**3 + 4*enRem*p4x**3*p4Norm*premx**4 + 4*enRem*p4x*p4z**2*p4Norm*premx**4 + 4*p4x**4*premx**5 + 8*p4x**2*p4z**2*premx**5 + 4*p4z**4*premx**5 + 4*enRem**4*p4x**3*p4y*premy + 4*enRem**4*p4x*p4y**3*premy + 8*enRem**4*p4x*p4y*p4z**2*premy - 8*enRem**3*mwm2*p4x*p4y*p4Norm*premy + 16*enRem**3*p2z*p4x*p4y*p4z*p4Norm*premy - 4*enRem**2*mwm2*p4x**2*p4y*premx*premy + 4*enRem**2*mwm2*p4y**3*premx*premy + 8*enRem**2*p2z*p4x**2*p4y*p4z*premx*premy - 8*enRem**2*p2z*p4y**3*p4z*premx*premy + 8*enRem**2*mwm2*p4y*p4z**2*premx*premy - 16*enRem**2*p2z*p4y*p4z**3*premx*premy - 8*enRem**3*p4x**2*p4y*p4Norm*premx*premy - 8*enRem**3*p4y*p4z**2*p4Norm*premx*premy - 16*enRem**2*p4x**3*p4y*premx**2*premy - 4*enRem**2*p4x*p4y**3*premx**2*premy - 20*enRem**2*p4x*p4y*p4z**2*premx**2*premy - 4*mwm2*p4x**2*p4y*premx**3*premy + 8*p2z*p4x**2*p4y*p4z*premx**3*premy - 4*mwm2*p4y*p4z**2*premx**3*premy + 8*p2z*p4y*p4z**3*premx**3*premy + 8*enRem*p4x**2*p4y*p4Norm*premx**3*premy + 8*enRem*p4y*p4z**2*p4Norm*premx**3*premy + 12*p4x**3*p4y*premx**4*premy + 12*p4x*p4y*p4z**2*premx**4*premy + 4*enRem**2*mwm2*p4x**3*premy**2 - 8*enRem**2*p2z*p4x**3*p4z*premy**2 - 4*enRem**2*mwm2*p4x*p4z**2*premy**2 + 8*enRem**2*p2z*p4x*p4z**3*premy**2 - 4*enRem**3*p4x**3*p4Norm*premy**2 - 8*enRem**3*p4x*p4y**2*p4Norm*premy**2 + 4*enRem**3*p4x*p4z**2*p4Norm*premy**2 - 4*enRem**2*p4x**4*premx*premy**2 - 16*enRem**2*p4x**2*p4y**2*premx*premy**2 - 8*enRem**2*p4x**2*p4z**2*premx*premy**2 - 4*enRem**2*p4z**4*premx*premy**2 + 8*enRem*mwm2*p4x**2*p4Norm*premx*premy**2 - 4*enRem*mwm2*p4y**2*p4Norm*premx*premy**2 - 16*enRem*p2z*p4x**2*p4z*p4Norm*premx*premy**2 + 8*enRem*p2z*p4y**2*p4z*p4Norm*premx*premy**2 + 4*enRem*mwm2*p4z**2*p4Norm*premx*premy**2 - 8*enRem*p2z*p4z**3*p4Norm*premx*premy**2 + 4*mwm2*p4x**3*premx**2*premy**2 - 8*mwm2*p4x*p4y**2*premx**2*premy**2 - 8*p2z*p4x**3*p4z*premx**2*premy**2 + 16*p2z*p4x*p4y**2*p4z*premx**2*premy**2 + 4*mwm2*p4x*p4z**2*premx**2*premy**2 - 8*p2z*p4x*p4z**3*premx**2*premy**2 + 4*enRem*p4x**3*p4Norm*premx**2*premy**2 + 4*enRem*p4x*p4y**2*p4Norm*premx**2*premy**2 + 4*p4x**4*premx**3*premy**2 + 12*p4x**2*p4y**2*premx**3*premy**2 + 12*p4x**2*p4z**2*premx**3*premy**2 + 4*p4y**2*p4z**2*premx**3*premy**2 + 8*p4z**4*premx**3*premy**2 - 4*enRem**2*p4x**3*p4y*premy**3 - 8*enRem**2*p4x*p4y**3*premy**3 - 12*enRem**2*p4x*p4y*p4z**2*premy**3 + 8*enRem*mwm2*p4x*p4y*p4Norm*premy**3 - 16*enRem*p2z*p4x*p4y*p4z*p4Norm*premy**3 + 8*mwm2*p4x**2*p4y*premx*premy**3 - 4*mwm2*p4y**3*premx*premy**3 - 16*p2z*p4x**2*p4y*p4z*premx*premy**3 + 8*p2z*p4y**3*p4z*premx*premy**3 - 4*mwm2*p4y*p4z**2*premx*premy**3 + 8*p2z*p4y*p4z**3*premx*premy**3 + 8*enRem*p4x**2*p4y*p4Norm*premx*premy**3 + 8*enRem*p4y*p4z**2*p4Norm*premx*premy**3 + 12*p4x**3*p4y*premx**2*premy**3 + 4*p4x*p4y**3*premx**2*premy**3 + 16*p4x*p4y*p4z**2*premx**2*premy**3 + 4*mwm2*p4x*p4y**2*premy**4 - 8*p2z*p4x*p4y**2*p4z*premy**4 + 4*mwm2*p4x*p4z**2*premy**4 - 8*p2z*p4x*p4z**3*premy**4 + 4*enRem*p4x*p4y**2*p4Norm*premy**4 - 4*enRem*p4x*p4z**2*p4Norm*premy**4 + 12*p4x**2*p4y**2*premx*premy**4 + 4*p4x**2*p4z**2*premx*premy**4 + 4*p4y**2*p4z**2*premx*premy**4 + 4*p4z**4*premx*premy**4 + 4*p4x*p4y**3*premy**5 + 4*p4x*p4y*p4z**2*premy**5 - 8*enRem**4*p4x**3*p4z*premz - 8*enRem**4*p4x*p4y**2*p4z*premz - 8*enRem**3*p2z*p4x**3*p4Norm*premz - 8*enRem**3*p2z*p4x*p4y**2*p4Norm*premz - 8*enRem**2*p2z*p4x**4*premx*premz - 8*enRem**2*p2z*p4x**2*p4y**2*premx*premz - 8*enRem**2*p2z*p4x**2*p4z**2*premx*premz + 8*enRem**2*p2z*p4y**2*p4z**2*premx*premz - 8*enRem**3*p4x**2*p4z*p4Norm*premx*premz + 8*enRem**3*p4y**2*p4z*p4Norm*premx*premz + 8*enRem**2*p4x**3*p4z*premx**2*premz + 16*enRem**2*p4x*p4y**2*p4z*premx**2*premz + 8*enRem**2*p4x*p4z**3*premx**2*premz + 8*enRem*p2z*p4x**3*p4Norm*premx**2*premz + 8*enRem*p2z*p4x*p4z**2*p4Norm*premx**2*premz + 8*p2z*p4x**4*premx**3*premz + 16*p2z*p4x**2*p4z**2*premx**3*premz + 8*p2z*p4z**4*premx**3*premz + 8*enRem*p4x**2*p4z*p4Norm*premx**3*premz + 8*enRem*p4z**3*p4Norm*premx**3*premz - 8*enRem**2*p2z*p4x**3*p4y*premy*premz - 8*enRem**2*p2z*p4x*p4y**3*premy*premz - 16*enRem**2*p2z*p4x*p4y*p4z**2*premy*premz - 16*enRem**3*p4x*p4y*p4z*p4Norm*premy*premz - 8*enRem**2*p4x**2*p4y*p4z*premx*premy*premz + 8*enRem**2*p4y**3*p4z*premx*premy*premz + 16*enRem**2*p4y*p4z**3*premx*premy*premz + 16*enRem*p2z*p4x**2*p4y*p4Norm*premx*premy*premz + 16*enRem*p2z*p4y*p4z**2*p4Norm*premx*premy*premz + 24*p2z*p4x**3*p4y*premx**2*premy*premz + 24*p2z*p4x*p4y*p4z**2*premx**2*premy*premz - 8*p4x**2*p4y*p4z*premx**3*premy*premz - 8*p4y*p4z**3*premx**3*premy*premz + 8*enRem**2*p4x**3*p4z*premy**2*premz - 8*enRem**2*p4x*p4z**3*premy**2*premz + 8*enRem*p2z*p4x*p4y**2*p4Norm*premy**2*premz - 8*enRem*p2z*p4x*p4z**2*p4Norm*premy**2*premz + 24*p2z*p4x**2*p4y**2*premx*premy**2*premz + 8*p2z*p4x**2*p4z**2*premx*premy**2*premz + 8*p2z*p4y**2*p4z**2*premx*premy**2*premz + 8*p2z*p4z**4*premx*premy**2*premz + 16*enRem*p4x**2*p4z*p4Norm*premx*premy**2*premz - 8*enRem*p4y**2*p4z*p4Norm*premx*premy**2*premz + 8*enRem*p4z**3*p4Norm*premx*premy**2*premz + 8*p4x**3*p4z*premx**2*premy**2*premz - 16*p4x*p4y**2*p4z*premx**2*premy**2*premz + 8*p4x*p4z**3*premx**2*premy**2*premz + 8*p2z*p4x*p4y**3*premy**3*premz + 8*p2z*p4x*p4y*p4z**2*premy**3*premz + 16*enRem*p4x*p4y*p4z*p4Norm*premy**3*premz + 16*p4x**2*p4y*p4z*premx*premy**3*premz - 8*p4y**3*p4z*premx*premy**3*premz - 8*p4y*p4z**3*premx*premy**3*premz + 8*p4x*p4y**2*p4z*premy**4*premz + 8*p4x*p4z**3*premy**4*premz + 4*enRem**3*p4x**3*p4Norm*premz**2 + 4*enRem**3*p4x*p4y**2*p4Norm*premz**2 + 4*enRem**2*p4x**4*premx*premz**2 + 4*enRem**2*p4x**2*p4y**2*premx*premz**2 + 4*enRem**2*p4x**2*p4z**2*premx*premz**2 - 4*enRem**2*p4y**2*p4z**2*premx*premz**2 - 4*enRem*p4x**3*p4Norm*premx**2*premz**2 - 4*enRem*p4x*p4z**2*p4Norm*premx**2*premz**2 - 4*p4x**4*premx**3*premz**2 - 8*p4x**2*p4z**2*premx**3*premz**2 - 4*p4z**4*premx**3*premz**2 + 4*enRem**2*p4x**3*p4y*premy*premz**2 + 4*enRem**2*p4x*p4y**3*premy*premz**2 + 8*enRem**2*p4x*p4y*p4z**2*premy*premz**2 - 8*enRem*p4x**2*p4y*p4Norm*premx*premy*premz**2 - 8*enRem*p4y*p4z**2*p4Norm*premx*premy*premz**2 - 12*p4x**3*p4y*premx**2*premy*premz**2 - 12*p4x*p4y*p4z**2*premx**2*premy*premz**2 - 4*enRem*p4x*p4y**2*p4Norm*premy**2*premz**2 + 4*enRem*p4x*p4z**2*p4Norm*premy**2*premz**2 - 12*p4x**2*p4y**2*premx*premy**2*premz**2 - 4*p4x**2*p4z**2*premx*premy**2*premz**2 - 4*p4y**2*p4z**2*premx*premy**2*premz**2 - 4*p4z**4*premx*premy**2*premz**2 - 4*p4x*p4y**3*premy**3*premz**2 - 4*p4x*p4y*p4z**2*premy**3*premz**2 + np.sqrt(underSqrt)))/(4*enRem**4*p4x**4 + 8*enRem**4*p4x**2*p4y**2 + 4*enRem**4*p4y**4 - 8*enRem**2*p4x**4*premx**2 - 8*enRem**2*p4x**2*p4y**2*premx**2 - 8*enRem**2*p4x**2*p4z**2*premx**2 + 8*enRem**2*p4y**2*p4z**2*premx**2 + 4*p4x**4*premx**4 + 8*p4x**2*p4z**2*premx**4 + 4*p4z**4*premx**4 - 16*enRem**2*p4x**3*p4y*premx*premy - 16*enRem**2*p4x*p4y**3*premx*premy - 32*enRem**2*p4x*p4y*p4z**2*premx*premy + 16*p4x**3*p4y*premx**3*premy + 16*p4x*p4y*p4z**2*premx**3*premy - 8*enRem**2*p4x**2*p4y**2*premy**2 - 8*enRem**2*p4y**4*premy**2 + 8*enRem**2*p4x**2*p4z**2*premy**2 - 8*enRem**2*p4y**2*p4z**2*premy**2 + 24*p4x**2*p4y**2*premx**2*premy**2 + 8*p4x**2*p4z**2*premx**2*premy**2 + 8*p4y**2*p4z**2*premx**2*premy**2 + 8*p4z**4*premx**2*premy**2 + 16*p4x*p4y**3*premx*premy**3 + 16*p4x*p4y*p4z**2*premx*premy**3 + 4*p4y**4*premy**4 + 8*p4y**2*p4z**2*premy**4 + 4*p4z**4*premy**4) + (p4y**2*premx*premy*(-4*enRem**4*mwm2*p4x**3 - 4*enRem**4*mwm2*p4x*p4y**2 + 8*enRem**4*p2z*p4x**3*p4z + 8*enRem**4*p2z*p4x*p4y**2*p4z + 4*enRem**5*p4x**3*p4Norm + 4*enRem**5*p4x*p4y**2*p4Norm + 4*enRem**4*p4x**4*premx + 4*enRem**4*p4x**2*p4y**2*premx + 4*enRem**4*p4x**2*p4z**2*premx - 4*enRem**4*p4y**2*p4z**2*premx - 4*enRem**3*mwm2*p4x**2*p4Norm*premx + 4*enRem**3*mwm2*p4y**2*p4Norm*premx + 8*enRem**3*p2z*p4x**2*p4z*p4Norm*premx - 8*enRem**3*p2z*p4y**2*p4z*p4Norm*premx + 4*enRem**2*mwm2*p4x**3*premx**2 + 8*enRem**2*mwm2*p4x*p4y**2*premx**2 - 8*enRem**2*p2z*p4x**3*p4z*premx**2 - 16*enRem**2*p2z*p4x*p4y**2*p4z*premx**2 + 4*enRem**2*mwm2*p4x*p4z**2*premx**2 - 8*enRem**2*p2z*p4x*p4z**3*premx**2 - 8*enRem**3*p4x**3*p4Norm*premx**2 - 4*enRem**3*p4x*p4y**2*p4Norm*premx**2 - 4*enRem**3*p4x*p4z**2*p4Norm*premx**2 - 8*enRem**2*p4x**4*premx**3 - 4*enRem**2*p4x**2*p4y**2*premx**3 - 12*enRem**2*p4x**2*p4z**2*premx**3 + 4*enRem**2*p4y**2*p4z**2*premx**3 - 4*enRem**2*p4z**4*premx**3 + 4*enRem*mwm2*p4x**2*p4Norm*premx**3 - 8*enRem*p2z*p4x**2*p4z*p4Norm*premx**3 + 4*enRem*mwm2*p4z**2*p4Norm*premx**3 - 8*enRem*p2z*p4z**3*p4Norm*premx**3 + 4*enRem*p4x**3*p4Norm*premx**4 + 4*enRem*p4x*p4z**2*p4Norm*premx**4 + 4*p4x**4*premx**5 + 8*p4x**2*p4z**2*premx**5 + 4*p4z**4*premx**5 + 4*enRem**4*p4x**3*p4y*premy + 4*enRem**4*p4x*p4y**3*premy + 8*enRem**4*p4x*p4y*p4z**2*premy - 8*enRem**3*mwm2*p4x*p4y*p4Norm*premy + 16*enRem**3*p2z*p4x*p4y*p4z*p4Norm*premy - 4*enRem**2*mwm2*p4x**2*p4y*premx*premy + 4*enRem**2*mwm2*p4y**3*premx*premy + 8*enRem**2*p2z*p4x**2*p4y*p4z*premx*premy - 8*enRem**2*p2z*p4y**3*p4z*premx*premy + 8*enRem**2*mwm2*p4y*p4z**2*premx*premy - 16*enRem**2*p2z*p4y*p4z**3*premx*premy - 8*enRem**3*p4x**2*p4y*p4Norm*premx*premy - 8*enRem**3*p4y*p4z**2*p4Norm*premx*premy - 16*enRem**2*p4x**3*p4y*premx**2*premy - 4*enRem**2*p4x*p4y**3*premx**2*premy - 20*enRem**2*p4x*p4y*p4z**2*premx**2*premy - 4*mwm2*p4x**2*p4y*premx**3*premy + 8*p2z*p4x**2*p4y*p4z*premx**3*premy - 4*mwm2*p4y*p4z**2*premx**3*premy + 8*p2z*p4y*p4z**3*premx**3*premy + 8*enRem*p4x**2*p4y*p4Norm*premx**3*premy + 8*enRem*p4y*p4z**2*p4Norm*premx**3*premy + 12*p4x**3*p4y*premx**4*premy + 12*p4x*p4y*p4z**2*premx**4*premy + 4*enRem**2*mwm2*p4x**3*premy**2 - 8*enRem**2*p2z*p4x**3*p4z*premy**2 - 4*enRem**2*mwm2*p4x*p4z**2*premy**2 + 8*enRem**2*p2z*p4x*p4z**3*premy**2 - 4*enRem**3*p4x**3*p4Norm*premy**2 - 8*enRem**3*p4x*p4y**2*p4Norm*premy**2 + 4*enRem**3*p4x*p4z**2*p4Norm*premy**2 - 4*enRem**2*p4x**4*premx*premy**2 - 16*enRem**2*p4x**2*p4y**2*premx*premy**2 - 8*enRem**2*p4x**2*p4z**2*premx*premy**2 - 4*enRem**2*p4z**4*premx*premy**2 + 8*enRem*mwm2*p4x**2*p4Norm*premx*premy**2 - 4*enRem*mwm2*p4y**2*p4Norm*premx*premy**2 - 16*enRem*p2z*p4x**2*p4z*p4Norm*premx*premy**2 + 8*enRem*p2z*p4y**2*p4z*p4Norm*premx*premy**2 + 4*enRem*mwm2*p4z**2*p4Norm*premx*premy**2 - 8*enRem*p2z*p4z**3*p4Norm*premx*premy**2 + 4*mwm2*p4x**3*premx**2*premy**2 - 8*mwm2*p4x*p4y**2*premx**2*premy**2 - 8*p2z*p4x**3*p4z*premx**2*premy**2 + 16*p2z*p4x*p4y**2*p4z*premx**2*premy**2 + 4*mwm2*p4x*p4z**2*premx**2*premy**2 - 8*p2z*p4x*p4z**3*premx**2*premy**2 + 4*enRem*p4x**3*p4Norm*premx**2*premy**2 + 4*enRem*p4x*p4y**2*p4Norm*premx**2*premy**2 + 4*p4x**4*premx**3*premy**2 + 12*p4x**2*p4y**2*premx**3*premy**2 + 12*p4x**2*p4z**2*premx**3*premy**2 + 4*p4y**2*p4z**2*premx**3*premy**2 + 8*p4z**4*premx**3*premy**2 - 4*enRem**2*p4x**3*p4y*premy**3 - 8*enRem**2*p4x*p4y**3*premy**3 - 12*enRem**2*p4x*p4y*p4z**2*premy**3 + 8*enRem*mwm2*p4x*p4y*p4Norm*premy**3 - 16*enRem*p2z*p4x*p4y*p4z*p4Norm*premy**3 + 8*mwm2*p4x**2*p4y*premx*premy**3 - 4*mwm2*p4y**3*premx*premy**3 - 16*p2z*p4x**2*p4y*p4z*premx*premy**3 + 8*p2z*p4y**3*p4z*premx*premy**3 - 4*mwm2*p4y*p4z**2*premx*premy**3 + 8*p2z*p4y*p4z**3*premx*premy**3 + 8*enRem*p4x**2*p4y*p4Norm*premx*premy**3 + 8*enRem*p4y*p4z**2*p4Norm*premx*premy**3 + 12*p4x**3*p4y*premx**2*premy**3 + 4*p4x*p4y**3*premx**2*premy**3 + 16*p4x*p4y*p4z**2*premx**2*premy**3 + 4*mwm2*p4x*p4y**2*premy**4 - 8*p2z*p4x*p4y**2*p4z*premy**4 + 4*mwm2*p4x*p4z**2*premy**4 - 8*p2z*p4x*p4z**3*premy**4 + 4*enRem*p4x*p4y**2*p4Norm*premy**4 - 4*enRem*p4x*p4z**2*p4Norm*premy**4 + 12*p4x**2*p4y**2*premx*premy**4 + 4*p4x**2*p4z**2*premx*premy**4 + 4*p4y**2*p4z**2*premx*premy**4 + 4*p4z**4*premx*premy**4 + 4*p4x*p4y**3*premy**5 + 4*p4x*p4y*p4z**2*premy**5 - 8*enRem**4*p4x**3*p4z*premz - 8*enRem**4*p4x*p4y**2*p4z*premz - 8*enRem**3*p2z*p4x**3*p4Norm*premz - 8*enRem**3*p2z*p4x*p4y**2*p4Norm*premz - 8*enRem**2*p2z*p4x**4*premx*premz - 8*enRem**2*p2z*p4x**2*p4y**2*premx*premz - 8*enRem**2*p2z*p4x**2*p4z**2*premx*premz + 8*enRem**2*p2z*p4y**2*p4z**2*premx*premz - 8*enRem**3*p4x**2*p4z*p4Norm*premx*premz + 8*enRem**3*p4y**2*p4z*p4Norm*premx*premz + 8*enRem**2*p4x**3*p4z*premx**2*premz + 16*enRem**2*p4x*p4y**2*p4z*premx**2*premz + 8*enRem**2*p4x*p4z**3*premx**2*premz + 8*enRem*p2z*p4x**3*p4Norm*premx**2*premz + 8*enRem*p2z*p4x*p4z**2*p4Norm*premx**2*premz + 8*p2z*p4x**4*premx**3*premz + 16*p2z*p4x**2*p4z**2*premx**3*premz + 8*p2z*p4z**4*premx**3*premz + 8*enRem*p4x**2*p4z*p4Norm*premx**3*premz + 8*enRem*p4z**3*p4Norm*premx**3*premz - 8*enRem**2*p2z*p4x**3*p4y*premy*premz - 8*enRem**2*p2z*p4x*p4y**3*premy*premz - 16*enRem**2*p2z*p4x*p4y*p4z**2*premy*premz - 16*enRem**3*p4x*p4y*p4z*p4Norm*premy*premz - 8*enRem**2*p4x**2*p4y*p4z*premx*premy*premz + 8*enRem**2*p4y**3*p4z*premx*premy*premz + 16*enRem**2*p4y*p4z**3*premx*premy*premz + 16*enRem*p2z*p4x**2*p4y*p4Norm*premx*premy*premz + 16*enRem*p2z*p4y*p4z**2*p4Norm*premx*premy*premz + 24*p2z*p4x**3*p4y*premx**2*premy*premz + 24*p2z*p4x*p4y*p4z**2*premx**2*premy*premz - 8*p4x**2*p4y*p4z*premx**3*premy*premz - 8*p4y*p4z**3*premx**3*premy*premz + 8*enRem**2*p4x**3*p4z*premy**2*premz - 8*enRem**2*p4x*p4z**3*premy**2*premz + 8*enRem*p2z*p4x*p4y**2*p4Norm*premy**2*premz - 8*enRem*p2z*p4x*p4z**2*p4Norm*premy**2*premz + 24*p2z*p4x**2*p4y**2*premx*premy**2*premz + 8*p2z*p4x**2*p4z**2*premx*premy**2*premz + 8*p2z*p4y**2*p4z**2*premx*premy**2*premz + 8*p2z*p4z**4*premx*premy**2*premz + 16*enRem*p4x**2*p4z*p4Norm*premx*premy**2*premz - 8*enRem*p4y**2*p4z*p4Norm*premx*premy**2*premz + 8*enRem*p4z**3*p4Norm*premx*premy**2*premz + 8*p4x**3*p4z*premx**2*premy**2*premz - 16*p4x*p4y**2*p4z*premx**2*premy**2*premz + 8*p4x*p4z**3*premx**2*premy**2*premz + 8*p2z*p4x*p4y**3*premy**3*premz + 8*p2z*p4x*p4y*p4z**2*premy**3*premz + 16*enRem*p4x*p4y*p4z*p4Norm*premy**3*premz + 16*p4x**2*p4y*p4z*premx*premy**3*premz - 8*p4y**3*p4z*premx*premy**3*premz - 8*p4y*p4z**3*premx*premy**3*premz + 8*p4x*p4y**2*p4z*premy**4*premz + 8*p4x*p4z**3*premy**4*premz + 4*enRem**3*p4x**3*p4Norm*premz**2 + 4*enRem**3*p4x*p4y**2*p4Norm*premz**2 + 4*enRem**2*p4x**4*premx*premz**2 + 4*enRem**2*p4x**2*p4y**2*premx*premz**2 + 4*enRem**2*p4x**2*p4z**2*premx*premz**2 - 4*enRem**2*p4y**2*p4z**2*premx*premz**2 - 4*enRem*p4x**3*p4Norm*premx**2*premz**2 - 4*enRem*p4x*p4z**2*p4Norm*premx**2*premz**2 - 4*p4x**4*premx**3*premz**2 - 8*p4x**2*p4z**2*premx**3*premz**2 - 4*p4z**4*premx**3*premz**2 + 4*enRem**2*p4x**3*p4y*premy*premz**2 + 4*enRem**2*p4x*p4y**3*premy*premz**2 + 8*enRem**2*p4x*p4y*p4z**2*premy*premz**2 - 8*enRem*p4x**2*p4y*p4Norm*premx*premy*premz**2 - 8*enRem*p4y*p4z**2*p4Norm*premx*premy*premz**2 - 12*p4x**3*p4y*premx**2*premy*premz**2 - 12*p4x*p4y*p4z**2*premx**2*premy*premz**2 - 4*enRem*p4x*p4y**2*p4Norm*premy**2*premz**2 + 4*enRem*p4x*p4z**2*p4Norm*premy**2*premz**2 - 12*p4x**2*p4y**2*premx*premy**2*premz**2 - 4*p4x**2*p4z**2*premx*premy**2*premz**2 - 4*p4y**2*p4z**2*premx*premy**2*premz**2 - 4*p4z**4*premx*premy**2*premz**2 - 4*p4x*p4y**3*premy**3*premz**2 - 4*p4x*p4y*p4z**2*premy**3*premz**2 + np.sqrt(underSqrt)))/(4*enRem**4*p4x**4 + 8*enRem**4*p4x**2*p4y**2 + 4*enRem**4*p4y**4 - 8*enRem**2*p4x**4*premx**2 - 8*enRem**2*p4x**2*p4y**2*premx**2 - 8*enRem**2*p4x**2*p4z**2*premx**2 + 8*enRem**2*p4y**2*p4z**2*premx**2 + 4*p4x**4*premx**4 + 8*p4x**2*p4z**2*premx**4 + 4*p4z**4*premx**4 - 16*enRem**2*p4x**3*p4y*premx*premy - 16*enRem**2*p4x*p4y**3*premx*premy - 32*enRem**2*p4x*p4y*p4z**2*premx*premy + 16*p4x**3*p4y*premx**3*premy + 16*p4x*p4y*p4z**2*premx**3*premy - 8*enRem**2*p4x**2*p4y**2*premy**2 - 8*enRem**2*p4y**4*premy**2 + 8*enRem**2*p4x**2*p4z**2*premy**2 - 8*enRem**2*p4y**2*p4z**2*premy**2 + 24*p4x**2*p4y**2*premx**2*premy**2 + 8*p4x**2*p4z**2*premx**2*premy**2 + 8*p4y**2*p4z**2*premx**2*premy**2 + 8*p4z**4*premx**2*premy**2 + 16*p4x*p4y**3*premx*premy**3 + 16*p4x*p4y*p4z**2*premx*premy**3 + 4*p4y**4*premy**4 + 8*p4y**2*p4z**2*premy**4 + 4*p4z**4*premy**4) + (p4z**2*premx*premy*(-4*enRem**4*mwm2*p4x**3 - 4*enRem**4*mwm2*p4x*p4y**2 + 8*enRem**4*p2z*p4x**3*p4z + 8*enRem**4*p2z*p4x*p4y**2*p4z + 4*enRem**5*p4x**3*p4Norm + 4*enRem**5*p4x*p4y**2*p4Norm + 4*enRem**4*p4x**4*premx + 4*enRem**4*p4x**2*p4y**2*premx + 4*enRem**4*p4x**2*p4z**2*premx - 4*enRem**4*p4y**2*p4z**2*premx - 4*enRem**3*mwm2*p4x**2*p4Norm*premx + 4*enRem**3*mwm2*p4y**2*p4Norm*premx + 8*enRem**3*p2z*p4x**2*p4z*p4Norm*premx - 8*enRem**3*p2z*p4y**2*p4z*p4Norm*premx + 4*enRem**2*mwm2*p4x**3*premx**2 + 8*enRem**2*mwm2*p4x*p4y**2*premx**2 - 8*enRem**2*p2z*p4x**3*p4z*premx**2 - 16*enRem**2*p2z*p4x*p4y**2*p4z*premx**2 + 4*enRem**2*mwm2*p4x*p4z**2*premx**2 - 8*enRem**2*p2z*p4x*p4z**3*premx**2 - 8*enRem**3*p4x**3*p4Norm*premx**2 - 4*enRem**3*p4x*p4y**2*p4Norm*premx**2 - 4*enRem**3*p4x*p4z**2*p4Norm*premx**2 - 8*enRem**2*p4x**4*premx**3 - 4*enRem**2*p4x**2*p4y**2*premx**3 - 12*enRem**2*p4x**2*p4z**2*premx**3 + 4*enRem**2*p4y**2*p4z**2*premx**3 - 4*enRem**2*p4z**4*premx**3 + 4*enRem*mwm2*p4x**2*p4Norm*premx**3 - 8*enRem*p2z*p4x**2*p4z*p4Norm*premx**3 + 4*enRem*mwm2*p4z**2*p4Norm*premx**3 - 8*enRem*p2z*p4z**3*p4Norm*premx**3 + 4*enRem*p4x**3*p4Norm*premx**4 + 4*enRem*p4x*p4z**2*p4Norm*premx**4 + 4*p4x**4*premx**5 + 8*p4x**2*p4z**2*premx**5 + 4*p4z**4*premx**5 + 4*enRem**4*p4x**3*p4y*premy + 4*enRem**4*p4x*p4y**3*premy + 8*enRem**4*p4x*p4y*p4z**2*premy - 8*enRem**3*mwm2*p4x*p4y*p4Norm*premy + 16*enRem**3*p2z*p4x*p4y*p4z*p4Norm*premy - 4*enRem**2*mwm2*p4x**2*p4y*premx*premy + 4*enRem**2*mwm2*p4y**3*premx*premy + 8*enRem**2*p2z*p4x**2*p4y*p4z*premx*premy - 8*enRem**2*p2z*p4y**3*p4z*premx*premy + 8*enRem**2*mwm2*p4y*p4z**2*premx*premy - 16*enRem**2*p2z*p4y*p4z**3*premx*premy - 8*enRem**3*p4x**2*p4y*p4Norm*premx*premy - 8*enRem**3*p4y*p4z**2*p4Norm*premx*premy - 16*enRem**2*p4x**3*p4y*premx**2*premy - 4*enRem**2*p4x*p4y**3*premx**2*premy - 20*enRem**2*p4x*p4y*p4z**2*premx**2*premy - 4*mwm2*p4x**2*p4y*premx**3*premy + 8*p2z*p4x**2*p4y*p4z*premx**3*premy - 4*mwm2*p4y*p4z**2*premx**3*premy + 8*p2z*p4y*p4z**3*premx**3*premy + 8*enRem*p4x**2*p4y*p4Norm*premx**3*premy + 8*enRem*p4y*p4z**2*p4Norm*premx**3*premy + 12*p4x**3*p4y*premx**4*premy + 12*p4x*p4y*p4z**2*premx**4*premy + 4*enRem**2*mwm2*p4x**3*premy**2 - 8*enRem**2*p2z*p4x**3*p4z*premy**2 - 4*enRem**2*mwm2*p4x*p4z**2*premy**2 + 8*enRem**2*p2z*p4x*p4z**3*premy**2 - 4*enRem**3*p4x**3*p4Norm*premy**2 - 8*enRem**3*p4x*p4y**2*p4Norm*premy**2 + 4*enRem**3*p4x*p4z**2*p4Norm*premy**2 - 4*enRem**2*p4x**4*premx*premy**2 - 16*enRem**2*p4x**2*p4y**2*premx*premy**2 - 8*enRem**2*p4x**2*p4z**2*premx*premy**2 - 4*enRem**2*p4z**4*premx*premy**2 + 8*enRem*mwm2*p4x**2*p4Norm*premx*premy**2 - 4*enRem*mwm2*p4y**2*p4Norm*premx*premy**2 - 16*enRem*p2z*p4x**2*p4z*p4Norm*premx*premy**2 + 8*enRem*p2z*p4y**2*p4z*p4Norm*premx*premy**2 + 4*enRem*mwm2*p4z**2*p4Norm*premx*premy**2 - 8*enRem*p2z*p4z**3*p4Norm*premx*premy**2 + 4*mwm2*p4x**3*premx**2*premy**2 - 8*mwm2*p4x*p4y**2*premx**2*premy**2 - 8*p2z*p4x**3*p4z*premx**2*premy**2 + 16*p2z*p4x*p4y**2*p4z*premx**2*premy**2 + 4*mwm2*p4x*p4z**2*premx**2*premy**2 - 8*p2z*p4x*p4z**3*premx**2*premy**2 + 4*enRem*p4x**3*p4Norm*premx**2*premy**2 + 4*enRem*p4x*p4y**2*p4Norm*premx**2*premy**2 + 4*p4x**4*premx**3*premy**2 + 12*p4x**2*p4y**2*premx**3*premy**2 + 12*p4x**2*p4z**2*premx**3*premy**2 + 4*p4y**2*p4z**2*premx**3*premy**2 + 8*p4z**4*premx**3*premy**2 - 4*enRem**2*p4x**3*p4y*premy**3 - 8*enRem**2*p4x*p4y**3*premy**3 - 12*enRem**2*p4x*p4y*p4z**2*premy**3 + 8*enRem*mwm2*p4x*p4y*p4Norm*premy**3 - 16*enRem*p2z*p4x*p4y*p4z*p4Norm*premy**3 + 8*mwm2*p4x**2*p4y*premx*premy**3 - 4*mwm2*p4y**3*premx*premy**3 - 16*p2z*p4x**2*p4y*p4z*premx*premy**3 + 8*p2z*p4y**3*p4z*premx*premy**3 - 4*mwm2*p4y*p4z**2*premx*premy**3 + 8*p2z*p4y*p4z**3*premx*premy**3 + 8*enRem*p4x**2*p4y*p4Norm*premx*premy**3 + 8*enRem*p4y*p4z**2*p4Norm*premx*premy**3 + 12*p4x**3*p4y*premx**2*premy**3 + 4*p4x*p4y**3*premx**2*premy**3 + 16*p4x*p4y*p4z**2*premx**2*premy**3 + 4*mwm2*p4x*p4y**2*premy**4 - 8*p2z*p4x*p4y**2*p4z*premy**4 + 4*mwm2*p4x*p4z**2*premy**4 - 8*p2z*p4x*p4z**3*premy**4 + 4*enRem*p4x*p4y**2*p4Norm*premy**4 - 4*enRem*p4x*p4z**2*p4Norm*premy**4 + 12*p4x**2*p4y**2*premx*premy**4 + 4*p4x**2*p4z**2*premx*premy**4 + 4*p4y**2*p4z**2*premx*premy**4 + 4*p4z**4*premx*premy**4 + 4*p4x*p4y**3*premy**5 + 4*p4x*p4y*p4z**2*premy**5 - 8*enRem**4*p4x**3*p4z*premz - 8*enRem**4*p4x*p4y**2*p4z*premz - 8*enRem**3*p2z*p4x**3*p4Norm*premz - 8*enRem**3*p2z*p4x*p4y**2*p4Norm*premz - 8*enRem**2*p2z*p4x**4*premx*premz - 8*enRem**2*p2z*p4x**2*p4y**2*premx*premz - 8*enRem**2*p2z*p4x**2*p4z**2*premx*premz + 8*enRem**2*p2z*p4y**2*p4z**2*premx*premz - 8*enRem**3*p4x**2*p4z*p4Norm*premx*premz + 8*enRem**3*p4y**2*p4z*p4Norm*premx*premz + 8*enRem**2*p4x**3*p4z*premx**2*premz + 16*enRem**2*p4x*p4y**2*p4z*premx**2*premz + 8*enRem**2*p4x*p4z**3*premx**2*premz + 8*enRem*p2z*p4x**3*p4Norm*premx**2*premz + 8*enRem*p2z*p4x*p4z**2*p4Norm*premx**2*premz + 8*p2z*p4x**4*premx**3*premz + 16*p2z*p4x**2*p4z**2*premx**3*premz + 8*p2z*p4z**4*premx**3*premz + 8*enRem*p4x**2*p4z*p4Norm*premx**3*premz + 8*enRem*p4z**3*p4Norm*premx**3*premz - 8*enRem**2*p2z*p4x**3*p4y*premy*premz - 8*enRem**2*p2z*p4x*p4y**3*premy*premz - 16*enRem**2*p2z*p4x*p4y*p4z**2*premy*premz - 16*enRem**3*p4x*p4y*p4z*p4Norm*premy*premz - 8*enRem**2*p4x**2*p4y*p4z*premx*premy*premz + 8*enRem**2*p4y**3*p4z*premx*premy*premz + 16*enRem**2*p4y*p4z**3*premx*premy*premz + 16*enRem*p2z*p4x**2*p4y*p4Norm*premx*premy*premz + 16*enRem*p2z*p4y*p4z**2*p4Norm*premx*premy*premz + 24*p2z*p4x**3*p4y*premx**2*premy*premz + 24*p2z*p4x*p4y*p4z**2*premx**2*premy*premz - 8*p4x**2*p4y*p4z*premx**3*premy*premz - 8*p4y*p4z**3*premx**3*premy*premz + 8*enRem**2*p4x**3*p4z*premy**2*premz - 8*enRem**2*p4x*p4z**3*premy**2*premz + 8*enRem*p2z*p4x*p4y**2*p4Norm*premy**2*premz - 8*enRem*p2z*p4x*p4z**2*p4Norm*premy**2*premz + 24*p2z*p4x**2*p4y**2*premx*premy**2*premz + 8*p2z*p4x**2*p4z**2*premx*premy**2*premz + 8*p2z*p4y**2*p4z**2*premx*premy**2*premz + 8*p2z*p4z**4*premx*premy**2*premz + 16*enRem*p4x**2*p4z*p4Norm*premx*premy**2*premz - 8*enRem*p4y**2*p4z*p4Norm*premx*premy**2*premz + 8*enRem*p4z**3*p4Norm*premx*premy**2*premz + 8*p4x**3*p4z*premx**2*premy**2*premz - 16*p4x*p4y**2*p4z*premx**2*premy**2*premz + 8*p4x*p4z**3*premx**2*premy**2*premz + 8*p2z*p4x*p4y**3*premy**3*premz + 8*p2z*p4x*p4y*p4z**2*premy**3*premz + 16*enRem*p4x*p4y*p4z*p4Norm*premy**3*premz + 16*p4x**2*p4y*p4z*premx*premy**3*premz - 8*p4y**3*p4z*premx*premy**3*premz - 8*p4y*p4z**3*premx*premy**3*premz + 8*p4x*p4y**2*p4z*premy**4*premz + 8*p4x*p4z**3*premy**4*premz + 4*enRem**3*p4x**3*p4Norm*premz**2 + 4*enRem**3*p4x*p4y**2*p4Norm*premz**2 + 4*enRem**2*p4x**4*premx*premz**2 + 4*enRem**2*p4x**2*p4y**2*premx*premz**2 + 4*enRem**2*p4x**2*p4z**2*premx*premz**2 - 4*enRem**2*p4y**2*p4z**2*premx*premz**2 - 4*enRem*p4x**3*p4Norm*premx**2*premz**2 - 4*enRem*p4x*p4z**2*p4Norm*premx**2*premz**2 - 4*p4x**4*premx**3*premz**2 - 8*p4x**2*p4z**2*premx**3*premz**2 - 4*p4z**4*premx**3*premz**2 + 4*enRem**2*p4x**3*p4y*premy*premz**2 + 4*enRem**2*p4x*p4y**3*premy*premz**2 + 8*enRem**2*p4x*p4y*p4z**2*premy*premz**2 - 8*enRem*p4x**2*p4y*p4Norm*premx*premy*premz**2 - 8*enRem*p4y*p4z**2*p4Norm*premx*premy*premz**2 - 12*p4x**3*p4y*premx**2*premy*premz**2 - 12*p4x*p4y*p4z**2*premx**2*premy*premz**2 - 4*enRem*p4x*p4y**2*p4Norm*premy**2*premz**2 + 4*enRem*p4x*p4z**2*p4Norm*premy**2*premz**2 - 12*p4x**2*p4y**2*premx*premy**2*premz**2 - 4*p4x**2*p4z**2*premx*premy**2*premz**2 - 4*p4y**2*p4z**2*premx*premy**2*premz**2 - 4*p4z**4*premx*premy**2*premz**2 - 4*p4x*p4y**3*premy**3*premz**2 - 4*p4x*p4y*p4z**2*premy**3*premz**2 + np.sqrt(underSqrt)))/(4*enRem**4*p4x**4 + 8*enRem**4*p4x**2*p4y**2 + 4*enRem**4*p4y**4 - 8*enRem**2*p4x**4*premx**2 - 8*enRem**2*p4x**2*p4y**2*premx**2 - 8*enRem**2*p4x**2*p4z**2*premx**2 + 8*enRem**2*p4y**2*p4z**2*premx**2 + 4*p4x**4*premx**4 + 8*p4x**2*p4z**2*premx**4 + 4*p4z**4*premx**4 - 16*enRem**2*p4x**3*p4y*premx*premy - 16*enRem**2*p4x*p4y**3*premx*premy - 32*enRem**2*p4x*p4y*p4z**2*premx*premy + 16*p4x**3*p4y*premx**3*premy + 16*p4x*p4y*p4z**2*premx**3*premy - 8*enRem**2*p4x**2*p4y**2*premy**2 - 8*enRem**2*p4y**4*premy**2 + 8*enRem**2*p4x**2*p4z**2*premy**2 - 8*enRem**2*p4y**2*p4z**2*premy**2 + 24*p4x**2*p4y**2*premx**2*premy**2 + 8*p4x**2*p4z**2*premx**2*premy**2 + 8*p4y**2*p4z**2*premx**2*premy**2 + 8*p4z**4*premx**2*premy**2 + 16*p4x*p4y**3*premx*premy**3 + 16*p4x*p4y*p4z**2*premx*premy**3 + 4*p4y**4*premy**4 + 8*p4y**2*p4z**2*premy**4 + 4*p4z**4*premy**4))/(2*enRem**2*p4y**2 - 2*p4x**2*premy**2 - 2*p4y**2*premy**2 - 2*p4z**2*premy**2)
        return p2y

    def p2VecFromP2z(self, p2z, oneOrTwo, doComplex=True):
        p2x = 0.0
        p2y = 0.0
        p4x = self.p4Vec[0]
        p4y = self.p4Vec[1]
        p4z = self.p4Vec[2]
        premx = self.pRemVec[0]
        premy = self.pRemVec[1]
        premz = self.pRemVec[2]
        mwm2 = self.mWm**2
        p1Norm = self.p1Norm
        p4Norm = self.p4Norm
        enRem = self.enRem

        underSqrt = self._underSqrt(p2z, p4x, p4y, p4z, premx, premy, premz, mwm2, enRem, p4Norm, p1Norm)
        if doComplex and underSqrt < 0:
            underSqrt += 0j
        elif underSqrt < 0:
            return [np.nan, np.nan, p2z]

        if oneOrTwo == 1:
            p2x = self._p2x_func1(p2z, underSqrt, p4x, p4y, p4z, premx, premy, premz, mwm2, enRem, p4Norm, p1Norm)
            p2y = self._p2y_func1(p2z, underSqrt, p4x, p4y, p4z, premx, premy, premz, mwm2, enRem, p4Norm, p1Norm)
        elif oneOrTwo == 2:
            p2x = self._p2x_func2(p2z, underSqrt, p4x, p4y, p4z, premx, premy, premz, mwm2, enRem, p4Norm, p1Norm)
            p2y = self._p2y_func2(p2z, underSqrt, p4x, p4y, p4z, premx, premy, premz, mwm2, enRem, p4Norm, p1Norm)
        
        p2Vec = np.array([p2x, p2y, p2z])
        return p2Vec

    def func(self, p2z, oneOrTwo, doComplex=True):
        p2Vec = self.p2VecFromP2z(p2z, oneOrTwo, doComplex)
        p2Norm = linalg.norm(p2Vec)
        out = (self.p1Norm + p2Norm)**2 - np.vdot(self.p1Vec + p2Vec, self.p1Vec + p2Vec) - self.mWp**2
        return out

    def expandSolution(self, p2z, oneOrTwo):
        out = {}
        p2Vec = self.p2VecFromP2z(p2z, oneOrTwo, doComplex=False)
        if not (isinstance(p2Vec[0], complex) or isinstance(p2Vec[1], complex)) and not (math.isnan(p2Vec[0]) or math.isnan(p2Vec[1])):
            p5Vec = self.p5VecFromP2Vec(p2Vec)
            funcVal = self.func(p2z, oneOrTwo, doComplex=False)
            out = {'nu': p2Vec, 'nu~': p5Vec}
        else:
            raise RuntimeError("Neutrino momentum contains complex or null values")
        return out


    # Find a single solution within a given range
    def findCrossSolution(self, rangeMin, rangeMax, fAtMin, fAtMax, oneOrTwo, maxIters=30):
        iterCount = 0
        while (rangeMax - rangeMin > self.crossTolerance) and iterCount < maxIters:
            iterCount += 1
            midpoint = float(rangeMax + rangeMin) / 2.0
            fMid = self.func(midpoint, oneOrTwo)

            if self.sameSign(fMid, fAtMax):
                rangeMax = midpoint
                fAtMax = fMid
            else:
                rangeMin = midpoint
                fAtMin = fMid
        
        if rangeMax - rangeMin <= self.crossTolerance and fAtMax < 100:
            res = (rangeMin + rangeMax)/2.0
            try:
                soln = self.expandSolution(res, oneOrTwo)
            except RuntimeError:
                soln = None
            return soln
        return None
    #TODO: run "best" with this and without, see if any grazed solutions make it through
    # finds a minimum of the function. Assumes you're already kinf od near the minimum to begin with
    def findGrazedSolution(self, startingMin, fMid, smidgeSize, oneOrTwo, maxIters=15):
        # Get a value to the left, and a value to the right.
        for i in range(0, maxIters):
            leftPt = startingMin - smidgeSize
            rightPt = startingMin + smidgeSize
            valStart = abs(self.func(startingMin, oneOrTwo))
            valLeft = abs(self.func(leftPt, oneOrTwo))
            valRight = abs(self.func(rightPt, oneOrTwo))
            if (valLeft < valStart):
                #move left
                startingMin = leftPt
                valStart = valLeft
            elif(valRight < valStart):
                #move right
                startingMin = rightPt
                valStart = valRight
            else:
                # neither valLeft nor valRight is less than your current point
                smidgeSize = smidgeSize/2.0
            if valStart < self.grazeTolerance:
                break
        # don't return a bogus min
        if valStart < self.grazeTolerance:
            soln = None
            try:
                soln = self.expandSolution(startingMin, oneOrTwo)
            except RuntimeError:
                soln = None
            return soln
        else:
            return None

    # This returns EITHER:
    # A) a point at which the function value has the opposite sign as the function values at the ends, OR
    # B) if (A) does not exist, returns a roughly-minimum point of the absolute value of the function
    def findOppositeSignOrMin(self, maxAllowed, minAllowed, fAtMax, fAtMin, oneOrTwo):
        denom = 2
        middle = float(maxAllowed + minAllowed) / denom
        fMid = self.func(middle, oneOrTwo, doComplex=False)
        if math.isnan(fMid): fMid = fAtMax # we can just say NaN is "not a useful value"
        minAbs = abs(fMid)
        minAbsWithSign = fMid
        minPoint = middle
        while np.sign(fMid)==np.sign(fAtMax) and middle < maxAllowed and middle > minAllowed and denom < 33:
            checkPoint = middle
            fCheck = fMid
            denom *= 2
            i = 1
            while i < denom and np.sign(fCheck)==np.sign(fAtMax):
                checkPoint = minAllowed + i*(float(maxAllowed - minAllowed)/denom)
                fCheck = self.func(checkPoint, oneOrTwo, doComplex=False)
                if math.isnan(fCheck): 
                    fCheck = fAtMax # we can just say NaN is "not a useful value"
                else:
                    # if you get a real answer populate fMid so it doesn't get lost
                    middle = checkPoint
                    fMid = fCheck
                    absVal = abs(fMid)
                    if absVal < minAbs:
                        minAbs = absVal
                        minPoint = middle
                        minAbsWithSign = fMid
                i += 2
        # Last check: NEVER return NaN for the midpoint function value
        if math.isnan(fMid): fMid = self.func(middle, oneOrTwo, doComplex=True)

        if self.sameSign(fMid, fAtMax):
            # no opposite-sign point found. Return the minimum
            return (minPoint, minAbsWithSign)
        else:
            # fouund sign flip
            return (middle, fMid)

    def findSignFlip(self, rangeMin, rangeMax, fAtMin, fAtMax, oneOrTwo):
        # use the fact that these functions tend to have simple, smooth shapes in the regions where they are real-valued
        # assumes fAtMax and fAtMin are on the same side of the x-axis
        # increment the min and max of the range
        minInc = rangeMin + self.cheat
        maxInc = rangeMax - self.cheat # increment "inward"
        minIncVal = self.func(minInc, oneOrTwo, doComplex=False)
        maxIncVal = self.func(maxInc, oneOrTwo, doComplex=False)
        # If both incremented values are even further from the x-axis than the original endpoints, this is a no-hoper.
        if self.sameSign(minIncVal, fAtMin) and self.sameSign(maxIncVal, fAtMax) and (abs(minIncVal) > abs(fAtMin)) and (abs(maxIncVal) > abs(fAtMax)):
            # nothing valuable here -- all same signs, and getting further from zero
            return (minInc, minIncVal)
        # If you happen to have stumbled upon a sign flip, sweet!
        if np.sign(minIncVal) != np.sign(fAtMin):
            return (minInc, minIncVal)
        if np.sign(maxIncVal) != np.sign(fAtMax):
            return (maxInc, maxIncVal)
        # if you're here, then you haven't found a sign flip, but there might be one
        return self.findOppositeSignOrMin(rangeMax, rangeMin, fAtMax, fAtMin, oneOrTwo)

    def saveResult(self, sol1, oneOrTwo):
        if sol1 is None:
            return False
        if math.isnan(sol1['nu'][0]) or math.isnan(sol1['nu'][1]):
            return False
        resList = None
        if oneOrTwo == 1:
            resList = self.resultsListOne
        elif oneOrTwo == 2:
            resList = self.resultsListTwo
        isDuplicate = False
        for j in range(0, len(self.resultsListOne)+len(self.resultsListTwo)):
            sol2 = None
            searchList = None
            itemCount = j
            if j < len(self.resultsListOne):
                sol2 = self.resultsListOne[itemCount]
                searchList = self.resultsListOne
            else:
                itemCount = j - len(self.resultsListOne)
                sol2 = self.resultsListTwo[itemCount]
                searchList = self.resultsListTwo
            # new way to find duplicates: magnitude and solid angle
            mag1 = linalg.norm(sol1['nu'])
            mag2 = linalg.norm(sol2['nu'])
            magDiff = abs(mag1 - mag2) / max([mag1, mag2])
            if magDiff > 0.1:
                continue
            px1 = sol1['nu'][0]
            py1 = sol1['nu'][1]
            pz1 = sol1['nu'][2]
            px2 = sol2['nu'][0]
            py2 = sol2['nu'][1]
            pz2 = sol2['nu'][2]
            maxCoord1 = max([abs(px1), abs(py1), abs(pz1)])
            maxCoord2 = max([abs(px2), abs(py2), abs(pz2)])
            if abs(maxCoord1 - maxCoord2)/max([maxCoord1, maxCoord2]) > 0.1:
                continue
            # check that the relations between the other coordinate and the max coordinate are similar
            if (px1/maxCoord1) - (px2/maxCoord2) > 0.1 or (px1/maxCoord1) - (px2/maxCoord2) < -0.1:
                continue
            if (py1/maxCoord1) - (py2/maxCoord2) > 0.1 or (py1/maxCoord1) - (py2/maxCoord2) < -0.1:
                continue
            if (pz1/maxCoord1) - (pz2/maxCoord2) > 0.1 or (pz1/maxCoord1) - (pz2/maxCoord2) < -0.1:
                continue

            # At this point, your neutrino momenta are within 5%, and your calculated top mass is within 5%
            # These are duplicates
            isDuplicate = True
            self.talk("Found an actual duplicate!")
            # which solutions is "better"? Compare the function values
            if abs(sol1['func']) >= abs(sol2['func']):
                return False # we're done. Don't add the new one
            else: # the new solution is better than the old one -- replace the old one
                searchList.pop(itemCount)
                resList.append(sol1)
                return False # was still a dup
        if not isDuplicate:
            resList.append(sol1)
            return True

    def isFunctionUseful(self, oneOrTwo):
        # what we are looking for here:
        # either the two ends of the range are on opposite sides of the x axis,
        # or they are on the same side, but at least one end curces toward the x axis
        fAtMin = self.func(self.fullRange[0], oneOrTwo, doComplex=False)
        fAtMax = self.func(self.fullRange[1], oneOrTwo, doComplex=False)
        if not self.sameSign(fAtMin, fAtMax):
            return True
        fAtLow = self.func(self.fullRange[0]+(5*self.cheat), oneOrTwo, doComplex=False)
        fAtHigh = self.func(self.fullRange[1]-(5*self.cheat), oneOrTwo, doComplex=False)
        if abs(fAtLow) < abs(fAtMin) or abs(fAtHigh) < abs(fAtMax):
            return True
        elif not self.sameSign(fAtMin, fAtLow) or not self.sameSign(fAtMax, fAtHigh):
            return True
        return False



    def seekSolution(self, oneOrTwo, recursed=False):
        self.newFunc = False
        if len(self.ranges) == 0:
            # you've used up all your ranges
            self.funcDone[oneOrTwo-1] = True
            return None
        resList = None
        if oneOrTwo == 1:
            resList = self.resultsListOne
        elif oneOrTwo == 2:
            resList = self.resultsListTwo
        if len(resList) >= self.maxSolnsPerFunc:
            self.funcDone[oneOrTwo-1] = True
            return None
        # NEW CHECK: if you have 2 solutions TOTAL, you are done
        if len(self.resultsListOne)+len(self.resultsListTwo) >= self.maxSolnsPerFunc:
            self.funcDone[oneOrTwo-1] = True
            return None

        grazedSolution = False
        fMid = 0.0
        startingMin = 0.0
        # pop the first range off the list
        nextRange = self.ranges.pop(0)
        if nextRange[1] - nextRange[0] < self.cheat:
            # this search range is no good. skip this attemps
            self.seekSolution(oneOrTwo, recursed=True)
            return None # so when the recursive call is done this does not continue like business as usual
        fAtMin = self.func(nextRange[0], oneOrTwo, doComplex=False)
        fAtMax = self.func(nextRange[1], oneOrTwo, doComplex=False)
        if self.sameSign(fAtMin, fAtMax):
            oppOrMin, val = self.findSignFlip(nextRange[0], nextRange[1], fAtMax, fAtMin, oneOrTwo)
            # if we find an opposite-sign point, make a new range for now using it as the MAX
            # create a second range using the opposite-sign point as the MIN, store it for later.
            if self.sameSign(val, fAtMax):
                grazedSolution = True
                fMid = val
                startingMin = oppOrMin
            else:
                self.talk("splitting range: midpoint at {}".format(oppOrMin))
                oldMax = nextRange[1]
                nextRange = [nextRange[0], oppOrMin]
                fAtMax = val
                self.ranges.append([oppOrMin, oldMax])
            # If no opposite-sign point, try to find a grazed solution
        soln = None
        foundSolution = False
        if grazedSolution:
            soln = self.findGrazedSolution(startingMin, fMid, self.cheat, oneOrTwo)
            allGood = self.saveResult(soln, oneOrTwo)
            if allGood: 
                foundSolution = True
                self.talk("found grazed solution")
        if not grazedSolution:
            soln = self.findCrossSolution(nextRange[0], nextRange[1], fAtMin, fAtMax, oneOrTwo)
            allGood = self.saveResult(soln, oneOrTwo)
            if allGood: 
                foundSolution = True
                self.talk("found cross solution")
        # If found: break the range in the spot where the solution was, put both new ranges at the end of the list
        # If not found, go to the next range and try again
        # If you run out of ranges, or hit four solutions, you are done
        if not foundSolution:
            # no solution in this range... trying the next one
            self.seekSolution(oneOrTwo, recursed=True)
            return None # so when the recursive call is done this does not continue like business as usual
        else:
            range1 = [nextRange[0], soln['nu'][2]-self.cheat]
            range2 = [soln['nu'][2]+self.cheat, nextRange[1]]
            self.ranges.append(range1)
            self.ranges.append(range2)


    # From plotting these functions, it is clear that there are large regions
    # and the edge of the "allowed" z-range with no solutions. Also, there
    # are large areas without any solutions with real px, py, and pz.
    # This should cut out a bunch of that -- up to 50% of the total z range.
    def shrinkRange(self, tmpMin, tmpMax):
        stepCount = 0
        stepRatio = 100
        numSteps = stepRatio
        stepSize = (tmpMax - tmpMin) / float(stepRatio)
        underRad = self._underSqrt(tmpMin, self.p4Vec[0], self.p4Vec[1], self.p4Vec[2], self.pRemVec[0], self.pRemVec[1], self.pRemVec[2], self.mWm**2, self.enRem, self.p4Norm, self.p1Norm)
        while underRad < 0 and stepCount < numSteps:
            stepCount += 1
            tmpMin += stepSize
            # this is much quicker than evaluating the whole function over the whole range
            underRad = self._underSqrt(tmpMin, self.p4Vec[0], self.p4Vec[1], self.p4Vec[2], self.pRemVec[0], self.pRemVec[1], self.pRemVec[2], self.mWm**2, self.enRem, self.p4Norm, self.p1Norm)

        underRad = self._underSqrt(tmpMax, self.p4Vec[0], self.p4Vec[1], self.p4Vec[2], self.pRemVec[0], self.pRemVec[1], self.pRemVec[2], self.mWm**2, self.enRem, self.p4Norm, self.p1Norm)
        while underRad < 0 and stepCount < numSteps:
            stepCount += 1
            tmpMax -= stepSize
            # this is much quicker than evaluating the whole function over the whole range
            underRad = self._underSqrt(tmpMax, self.p4Vec[0], self.p4Vec[1], self.p4Vec[2], self.pRemVec[0], self.pRemVec[1], self.pRemVec[2], self.mWm**2, self.enRem, self.p4Norm, self.p1Norm)
        self.talk("allowed range: {0} - {1}".format(tmpMin, tmpMax))
        return (tmpMin, tmpMax)


    def initFunc(self, oneOrTwo):
        if len(self.fullRange) == 0:
            rangeMin = self.totalMinP2z
            rangeMax = self.totalMaxP2z
            # right... a lot of that is probably far from our solutions, so let's clear that out
            (rangeMin, rangeMax) = self.shrinkRange(rangeMin, rangeMax)
            self.fullRange = [rangeMin, rangeMax]
            self.cheat = (rangeMax - rangeMin)*0.01
            if self.cheat > 10: 
                self.cheat = 10
                #print "set cheat to 10!"

        self.ranges = [self.fullRange]
        self.funcInitialized[oneOrTwo-1] = True


    def findNextSolution(self):
        oneOrTwo = 0
        if not self.funcInitialized[0]:
            oneOrTwo = 1
            self.initFunc(1)
            self.seekSolution(1)
            self.allResultsList.extend(self.resultsListOne)
            return True
        elif self.funcInitialized[0] and not self.funcDone[0]:
            oneOrTwo = 1
            self.seekSolution(1)
            self.allResultsList.extend(self.resultsListOne)
            return True
        elif not self.funcInitialized[1]:
            oneOrTwo = 2
            self.initFunc(2)
            self.seekSolution(2)
            self.allResultsList.extend(self.resultsListTwo)
            return True
        elif self.funcInitialized[1] and not self.funcDone[1]:
            oneOrTwo = 2
            self.seekSolution(2)
            self.allResultsList.extend(self.resultsListTwo)
            return True
        else:
            # all done
            return False

    def findAllSolutions(self):
        self.initFunc(1)
        self.newFunc = True
        while not self.funcDone[0]:
            self.seekSolution(1)
        self.initFunc(2)
        self.newFunc = True
        while not self.funcDone[1]:
            self.seekSolution(2)
        self.talk("solutions for func 1: ")
        for sol in self.resultsListOne:
            self.talk("\t{0}".format(sol))
        self.talk("solutions for func 2: ")
        for sol in self.resultsListTwo:
            self.talk("\t{0}".format(sol))
        self.allResultsList.extend(self.resultsListOne)
        self.allResultsList.extend(self.resultsListTwo)
        return self.allResultsList
